{
  "GoalName": "CreatePayment",
  "Comment": null,
  "GoalSteps": [
    {
      "Text": "create var %body%, '{\n        \"currency\": \"USD\",\n        \"amount_is_editable\": true,\n        \"customer\": \"cus_%Identity%\",\n        \"language\": \"EN\",\n        \"checkout\": {\n            \"error_payment_url\": \"https://www.rapyd.com\",\n            \"complete_payment_url\": \"https://plang.is/payment.html\"\n        }\n    }'",
      "Comment": null,
      "ModuleType": "PLang.Modules.LocalOrGlobalVariableModule",
      "Name": "CreateVariableBody",
      "Description": "Create a variable named 'body' and assign it a JSON string that contains information about currency, customer, language, and checkout URLs.",
      "PrFileName": "01. CreateVariableBody.pr",
      "RelativePrPath": ".build\\api\\CreatePayment\\01. CreateVariableBody.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Executed": null,
      "Generated": "2023-10-13T13:23:29.1861362+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 0,
      "LlmQuestion": {
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "create var %body%, '{\n        \"currency\": \"USD\",\n        \"amount_is_editable\": true,\n        \"customer\": \"cus_%Identity%\",\n        \"language\": \"EN\",\n        \"checkout\": {\n            \"error_payment_url\": \"https://www.rapyd.com\",\n            \"complete_payment_url\": \"https://plang.is/payment.html\"\n        }\n    }'",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "Reload": false,
        "PreviousResult": null,
        "RawResponse": "{\"StepName\": \"CreateVariableBody\",\n\"StepDescription\": \"Create a variable named 'body' and assign it a JSON string that contains information about currency, customer, language, and checkout URLs.\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
      }
    },
    {
      "Text": "create var %idempotency%, set value %Now.Ticks%",
      "Comment": null,
      "ModuleType": "PLang.Modules.LocalOrGlobalVariableModule",
      "Name": "CreateAndSetVariable",
      "Description": "Create a variable named 'idempotency' and set its value to the current timestamp in ticks.",
      "PrFileName": "02. CreateAndSetVariable.pr",
      "RelativePrPath": ".build\\api\\CreatePayment\\02. CreateAndSetVariable.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Executed": null,
      "Generated": "2023-10-13T13:23:41.6073264+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 1,
      "LlmQuestion": {
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "create var %idempotency%, set value %Now.Ticks%",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "Reload": false,
        "PreviousResult": null,
        "RawResponse": "{\"StepName\": \"CreateAndSetVariable\",\n\"StepDescription\": \"Create a variable named 'idempotency' and set its value to the current timestamp in ticks.\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
      }
    },
    {
      "Text": "create var %timestamp%, set value %Now.GetUnixTime()%",
      "Comment": null,
      "ModuleType": "PLang.Modules.LocalOrGlobalVariableModule",
      "Name": "CreateAndSetTimestamp",
      "Description": "Create a variable named 'timestamp' and set its value to the current Unix timestamp.",
      "PrFileName": "03. CreateAndSetTimestamp.pr",
      "RelativePrPath": ".build\\api\\CreatePayment\\03. CreateAndSetTimestamp.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Executed": null,
      "Generated": "2023-10-13T13:23:51.8865645+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 2,
      "LlmQuestion": {
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "create var %timestamp%, set value %Now.GetUnixTime()%",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "Reload": false,
        "PreviousResult": null,
        "RawResponse": "{\"StepName\": \"CreateAndSetTimestamp\",\n\"StepDescription\": \"Create a variable named 'timestamp' and set its value to the current Unix timestamp.\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
      }
    },
    {
      "Text": "[crypto] create salt, write to %salt%",
      "Comment": null,
      "ModuleType": "PLang.Modules.CryptographicModule",
      "Name": "CreateSalt",
      "Description": "Create a cryptographic salt and store it in the variable %salt%",
      "PrFileName": "04. CreateSalt.pr",
      "RelativePrPath": ".build\\api\\CreatePayment\\04. CreateSalt.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Executed": null,
      "Generated": "2023-10-13T13:24:01.9689497+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 3,
      "LlmQuestion": {
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "[crypto] create salt, write to %salt%",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.CryptographicModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "Reload": false,
        "PreviousResult": null,
        "RawResponse": "{\"StepName\": \"CreateSalt\",\n\"StepDescription\": \"Create a cryptographic salt and store it in the variable %salt%\",\n\"Modules\": [\"PLang.Modules.CryptographicModule\"],\n\"WaitForExecution\": true}"
      }
    },
    {
      "Text": "sign(httpMethod, httpURLPath, salt, timestamp, body)",
      "Comment": null,
      "ModuleType": "PLang.Modules.WebserverModule",
      "Name": "SignHTTPRequest",
      "Description": "This step involves signing an HTTP request. The method involves the use of the HTTP method, the HTTP URL path, a salt value, a timestamp, and the body of the request.",
      "PrFileName": "05. SignHTTPRequest.pr",
      "RelativePrPath": ".build\\api\\CreatePayment\\05. SignHTTPRequest.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Executed": null,
      "Generated": "2023-10-13T13:24:37.6381408+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 4,
      "LlmQuestion": {
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "sign(httpMethod, httpURLPath, salt, timestamp, body)",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "Reload": false,
        "PreviousResult": null,
        "RawResponse": "{\"StepName\": \"SignHTTPRequest\",\n\"StepDescription\": \"This step involves signing an HTTP request. The method involves the use of the HTTP method, the HTTP URL path, a salt value, a timestamp, and the body of the request.\",\n\"Modules\": [\"PLang.Modules.WebserverModule\"],\n\"WaitForExecution\": true}"
      }
    },
    {
      "Text": "create var %signatureContent%, \"post/v1/hosted/collect/payments%salt%%timestamp%%Settings.GetRapydApiKey%%Settings.GetRapydApiKey%%body%\"",
      "Comment": null,
      "ModuleType": null,
      "Name": null,
      "Description": null,
      "PrFileName": null,
      "RelativePrPath": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Executed": null,
      "Generated": "0001-01-01T00:00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 0,
      "LlmQuestion": null
    },
    {
      "Text": "create signature for %signatureContent%, format sha256, write to %signature%",
      "Comment": null,
      "ModuleType": null,
      "Name": null,
      "Description": null,
      "PrFileName": null,
      "RelativePrPath": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Executed": null,
      "Generated": "0001-01-01T00:00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 0,
      "LlmQuestion": null
    },
    {
      "Text": "POST to https://sandboxapi.rapyd.net/v1/hosted/collect/payments\n    headers: 'access_key: %Settings.GetRapydApiKey%'\n        'idempotency: %idempotency%'\n        'salt: %salt%'\n        'signature: %signature%'\n        'timestamp: %timestamp%'\n    body: %body%",
      "Comment": null,
      "ModuleType": null,
      "Name": null,
      "Description": null,
      "PrFileName": null,
      "RelativePrPath": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Executed": null,
      "Generated": "0001-01-01T00:00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 0,
      "LlmQuestion": null
    }
  ],
  "Description": null,
  "Visibility": 0,
  "GoalFileName": "CreatePayment.goal",
  "RelativeGoalPath": "\\api\\CreatePayment.goal",
  "RelativeGoalFolderPath": "\\api",
  "RelativePrPath": ".build\\api\\CreatePayment\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\api\\CreatePayment",
  "ExternalApp": null,
  "BuilderVersion": "0.1.0.0",
  "GoalApiInfo": {
    "Method": "POST",
    "Description": "This API is used to create a payment. It first creates a body variable with payment details such as currency, amount, customer, language, and checkout URLs. It then creates an idempotency key and a timestamp. A salt is created and used along with the HTTP method, URL path, timestamp, and body to create a signature. This signature is then used in the POST request to the Rapyd API endpoint for creating payments. The headers of the request include the access key, idempotency key, salt, signature, and timestamp. The body of the request is the previously created body variable.",
    "ContentEncoding": "utf-8",
    "ContentType": "application/json",
    "MaxContentLengthInBytes": 4096,
    "CacheControlPrivateOrPublic": null,
    "CacheControlMaxAge": null,
    "NoCacheOrNoStore": null
  },
  "Injections": {}
}