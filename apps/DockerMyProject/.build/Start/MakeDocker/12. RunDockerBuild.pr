{
  "Action": {
    "FunctionName": "RunTerminal",
    "Parameters": [
      {
        "Type": "string",
        "Name": "appExecutableName",
        "Value": "docker"
      },
      {
        "Type": "List`1<String>",
        "Name": "parameters",
        "Value": [
          "build",
          "-t",
          "%imageName%",
          "."
        ]
      },
      {
        "Type": "string",
        "Name": "pathToWorkingDirInTerminal",
        "Value": "%path%/.deploy"
      }
    ],
    "ReturnValue": null
  },
  "Text": "run cmd, app is 'docker',\n    params: 'build -t %imageName% .'\n    start in %path%/.deploy",
  "Reload": false,
  "LlmQuestion": {
    "type": "PLang.Modules.TerminalModule.Builder",
    "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
    "question": "command: run cmd, app is 'docker',\n    params: 'build -t %imageName% .'\n    start in %path%/.deploy",
    "assistant": "## functions available defined in csharp ##\r\nvoid Read(String variableName) \nDictionary`2 RunTerminal(String appExecutableName, List`1<String>? parameters, String? pathToWorkingDirInTerminal, String? dataOutputVariable, String? errorDebugInfoOutputVariable, String? dataStreamDelta, String? errorStreamDelta) \n\r\n## functions available ends ##",
    "model": "gpt-4",
    "caching": true,
    "Reload": false,
    "PreviousResult": null,
    "RawResponse": null
  },
  "RunOnBuild": false
}