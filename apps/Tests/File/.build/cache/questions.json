[
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read 1px.png into %base64%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadImageToBase64\",\n\"StepDescription\": \"This step reads the image file '1px.png' and converts it into a base64 string. The result is stored in the variable %base64%.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"ReadImageToBase64\",\n\"StepDescription\": \"This step reads the image file '1px.png' and converts it into a base64 string. The result is stored in the variable %base64%.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "cae56821f7e7058321b5650129b5405d3d247bd6c27bd914eabc43d08754fe3e",
    "Created": "2023-10-04T17:40:21.2101985Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read 1px.png into %base64%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid CreateExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadBinaryFileAndConvertToBase64\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"1px.png\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"base64\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadBinaryFileAndConvertToBase64\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"1px.png\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"base64\"}}",
    "hash": "e458403a68f7531462ba40cd5ed9af2b3d4405a319ea754b65e03a0e0fedee30",
    "Created": "2023-10-04T17:40:33.5313791Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %base64%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutBase64\",\n\"StepDescription\": \"This step involves writing out the value of the variable %base64%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutBase64\",\n\"StepDescription\": \"This step involves writing out the value of the variable %base64%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "818afafa268732da9811d49d73b5678a4b757fb0fbcc1c043a24b08df8838659",
    "Created": "2023-10-04T17:40:38.1316642Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %base64%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nbase64(String), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"%base64%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}"
    },
    "answer": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"%base64%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}",
    "hash": "1d82d3235884f36fb4fb08ad383aafe811ebf4f453ba9902b1dc7b007739fdbc",
    "Created": "2023-10-04T17:40:45.3977886Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read file.txt into %content%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadFile\",\n\"StepDescription\": \"Read the content of the file named 'file.txt' and store it into the variable '%content%'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"ReadFile\",\n\"StepDescription\": \"Read the content of the file named 'file.txt' and store it into the variable '%content%'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "f4b37d7cab688b7cafb258c4f416dbd9bdb2bab6848772ea0c75f85b8e804655",
    "Created": "2023-10-04T17:40:52.7784179Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read file.txt into %content%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid CreateExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"content\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"content\"}}",
    "hash": "a9194c1ed0407a32ad92ba48c493e167bc8926ad360a0d4659be1d1c10aa6c32",
    "Created": "2023-10-04T17:41:03.0357396Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %content%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutContent\",\n\"StepDescription\": \"This step involves writing out the value of the variable %content%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"WriteOutContent\",\n\"StepDescription\": \"This step involves writing out the value of the variable %content%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "fb3bfc6c819ac6b197341fe152984828e7ce3f90f248563874276547e5ce065f",
    "Created": "2023-10-04T17:41:12.6749629Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %content%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\ncontent(String), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"%content%\"\n    }\n],\n\"ReturnValue\": null\n}"
    },
    "answer": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"%content%\"\n    }\n],\n\"ReturnValue\": null\n}",
    "hash": "e09ceac4656697e2ea62ce6b4968085d0b67d8491c2e2931580c7c1ce578ba6f",
    "Created": "2023-10-04T17:41:19.0289664Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read Employees.xlsx into %excelData%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadExcelFile\",\n\"StepDescription\": \"Read the data from the Excel file named 'Employees.xlsx' and store it into the variable 'excelData'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"ReadExcelFile\",\n\"StepDescription\": \"Read the data from the Excel file named 'Employees.xlsx' and store it into the variable 'excelData'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "b5446e473e8018dbe3f9395aaa4e390aa74a4bff0c1f2db369f20c5200e6dbb4",
    "Created": "2023-10-04T17:41:26.7865925Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read Employees.xlsx into %excelData%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid CreateExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadExcelFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"Employees.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"useHeaderRow\",\n\"Value\": true},\n{\"Type\": \"Dictionary`2\",\n\"Name\": \"sheetsToVariable\",\n\"Value\": {\"Sheet1\": \"%excelData%\"}}],\n\"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"ReadExcelFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"Employees.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"useHeaderRow\",\n\"Value\": true},\n{\"Type\": \"Dictionary`2\",\n\"Name\": \"sheetsToVariable\",\n\"Value\": {\"Sheet1\": \"%excelData%\"}}],\n\"ReturnValue\": null}",
    "hash": "9b85f89fad4b1ed4e1751c908d6e0c9a13c54694b1742db5c5c6dd635d54441d",
    "Created": "2023-10-04T17:41:35.1505299Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "loop through %excelData%, call !PrintOutExcel",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"LoopAndPrintExcelData\",\n\"StepDescription\": \"This step involves looping through the data in the variable %excelData% and for each item in the data, the function !PrintOutExcel is called.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"LoopAndPrintExcelData\",\n\"StepDescription\": \"This step involves looping through the data in the variable %excelData% and for each item in the data, the function !PrintOutExcel is called.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "2f1e4d406dd4f5f1b5e4405699383c4c7207d2bae0144f66d1d9a90e46a8f01a",
    "Created": "2023-10-04T17:41:44.6101509Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: loop through %excelData%, call !PrintOutExcel",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunLoop(String variableToLoopThrough, String goalNameToCall, Dictionary`2? parameters) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"RunLoop\",\n\"Parameters\": [\n    {\n    \"Type\": \"String\",\n    \"Name\": \"variableToLoopThrough\",\n    \"Value\": \"%excelData%\"\n    },\n    {\n    \"Type\": \"String\",\n    \"Name\": \"goalNameToCall\",\n    \"Value\": \"!PrintOutExcel\"\n    },\n    {\n    \"Type\": \"Dictionary`2\",\n    \"Name\": \"parameters\",\n    \"Value\": null\n    }\n]\n}"
    },
    "answer": "{\n\"FunctionName\": \"RunLoop\",\n\"Parameters\": [\n    {\n    \"Type\": \"String\",\n    \"Name\": \"variableToLoopThrough\",\n    \"Value\": \"%excelData%\"\n    },\n    {\n    \"Type\": \"String\",\n    \"Name\": \"goalNameToCall\",\n    \"Value\": \"!PrintOutExcel\"\n    },\n    {\n    \"Type\": \"Dictionary`2\",\n    \"Name\": \"parameters\",\n    \"Value\": null\n    }\n]\n}",
    "hash": "927f1922b4791e8fbab224a4b6d5f80d4962342bb569df9cae21708500ae9ae9",
    "Created": "2023-10-04T17:41:52.3354912Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read Test5x2.csv into %csvData%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadCSVFile\",\n\"StepDescription\": \"Read the content of the file named 'Test5x2.csv' and store it into the variable 'csvData'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"ReadCSVFile\",\n\"StepDescription\": \"Read the content of the file named 'Test5x2.csv' and store it into the variable 'csvData'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "827f14b6233227edb9dc51dcb8b2d419b4d053650b776ac36a08494c0a6daa43",
    "Created": "2023-10-04T17:41:59.34501Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read Test5x2.csv into %csvData%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid CreateExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadExcelFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"Test5x2.csv\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"useHeaderRow\",\n\"Value\": true},\n{\"Type\": \"Dictionary`2\",\n\"Name\": \"sheetsToVariable\",\n\"Value\": {\"Sheet1\": \"%csvData%\"}}]}"
    },
    "answer": "{\"FunctionName\": \"ReadExcelFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"Test5x2.csv\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"useHeaderRow\",\n\"Value\": true},\n{\"Type\": \"Dictionary`2\",\n\"Name\": \"sheetsToVariable\",\n\"Value\": {\"Sheet1\": \"%csvData%\"}}]}",
    "hash": "b4213731309d517eff6d9b154cfc60b04e7dace996902426bc0e40bf8dc8fb67",
    "Created": "2023-10-04T17:42:10.1969493Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "loop through %csvData%, call !PrintOutCSV",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"LoopAndPrintCSV\",\n\"StepDescription\": \"This step involves looping through the data stored in the variable %csvData% and for each iteration, the function !PrintOutCSV is called.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"LoopAndPrintCSV\",\n\"StepDescription\": \"This step involves looping through the data stored in the variable %csvData% and for each iteration, the function !PrintOutCSV is called.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "3445cd2c55f2c0ef247fd5b24257e1adb84b86331296e42b992e3e0b160a3ab9",
    "Created": "2023-10-04T17:42:18.5173712Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: loop through %csvData%, call !PrintOutCSV",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunLoop(String variableToLoopThrough, String goalNameToCall, Dictionary`2? parameters) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"RunLoop\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"variableToLoopThrough\",\n\"Value\": \"%csvData%\"},\n{\"Type\": \"String\",\n\"Name\": \"goalNameToCall\",\n\"Value\": \"!PrintOutCSV\"},\n{\"Type\": \"Dictionary`2\",\n\"Name\": \"parameters\",\n\"Value\": null}]}"
    },
    "answer": "{\"FunctionName\": \"RunLoop\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"variableToLoopThrough\",\n\"Value\": \"%csvData%\"},\n{\"Type\": \"String\",\n\"Name\": \"goalNameToCall\",\n\"Value\": \"!PrintOutCSV\"},\n{\"Type\": \"Dictionary`2\",\n\"Name\": \"parameters\",\n\"Value\": null}]}",
    "hash": "5f7d2352d3fb4498eccb363d9e1ec1a6a42b9709a3cf968a1c6b7cb405af0916",
    "Created": "2023-10-04T17:42:24.8460468Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %item.Name% - %item.Email%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"OutputItemDetails\",\n\"StepDescription\": \"Write out the name and email of the item to the console or UI.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"OutputItemDetails\",\n\"StepDescription\": \"Write out the name and email of the item to the console or UI.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "e858fa4dbb23510fffc273e0bfd991cc5175e221c5c6df98eaf93e24d3225261",
    "Created": "2023-10-04T17:42:29.3954332Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %item.Name% - %item.Email%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"%item.Name% - %item.Email%\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"%item.Name% - %item.Email%\"}]}",
    "hash": "1c03b1ed89ea3358ea78534b0804129482c84ab08394f90d78038e45957d616d",
    "Created": "2023-10-04T17:42:32.3999714Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %item.ToJson()%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutJson\",\n\"StepDescription\": \"Write out the JSON representation of the variable 'item'\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutJson\",\n\"StepDescription\": \"Write out the JSON representation of the variable 'item'\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "d5d150913afe1347f81a8969fd36c5b03e3e5c7905c7f8f95911e7b895bfed2b",
    "Created": "2023-10-04T17:42:37.5310613Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %item.ToJson()%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"%item.ToJson()%\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"%item.ToJson()%\"}]}",
    "hash": "49b0c406590067489089c20bbed4b4d712007f11290ea683e0ded23999b42125",
    "Created": "2023-10-04T17:42:41.0297079Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to file2.txt, 'This is a content'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToFile\",\n\"StepDescription\": \"Write the text 'This is a content' to the file named file2.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteToFile\",\n\"StepDescription\": \"Write the text 'This is a content' to the file named file2.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}",
    "hash": "07156987ae6397afc2d68540859939d9c92de6c6b70e82630fc3bf9907147a00",
    "Created": "2023-10-04T17:48:48.9988098Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to file2.txt, 'This is a content'",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteToFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"content\",\n\"Value\": \"This is a content\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"overwrite\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"WriteToFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"content\",\n\"Value\": \"This is a content\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"overwrite\",\n\"Value\": false}]}",
    "hash": "e39d0b45d30c7916453f7c5485e5d8ccc25dac55fb68c132286c4ed95a59a991",
    "Created": "2023-10-04T17:48:55.3042327Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read file2.txt, into %newContent%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadFile\",\n\"StepDescription\": \"Read the content of the file named 'file2.txt' and store it into the variable 'newContent'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"ReadFile\",\n\"StepDescription\": \"Read the content of the file named 'file2.txt' and store it into the variable 'newContent'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "90f22d6b727d21523b3abbf4b9f5c142430a12e000a42c9a480af67dc58644e6",
    "Created": "2023-10-04T17:49:02.9741579Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read file2.txt, into %newContent%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"newContent\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"newContent\"}}",
    "hash": "c4799dfc7494debb07b02309cad4d8e1f1769d5c871cd4a8b2536c9392448c46",
    "Created": "2023-10-04T17:49:09.4624707Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %newContent%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutNewContent\",\n\"StepDescription\": \"This step involves outputting the value of the variable 'newContent' to the user interface.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"WriteOutNewContent\",\n\"StepDescription\": \"This step involves outputting the value of the variable 'newContent' to the user interface.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "ae08a6e97ceb2fb56a145b84dda079fbbdc4f3b5c213afce1e7050e692e4ce0a",
    "Created": "2023-10-04T17:49:16.5406289Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %newContent%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nnewContent(String), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"%newContent%\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"%newContent%\"}]}",
    "hash": "d142f17a96e95e7baf7c3b1fc9d51bdcc90adccfefccfcc20daf386cf5b09729",
    "Created": "2023-10-04T17:49:19.3957788Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "delete file file2.txt",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'file2.txt'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'file2.txt'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "2bf9507c371c5732736817a51cb8b54c4292701161f95ed6d679ca846b0d8692",
    "Created": "2023-10-04T17:49:26.3825331Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete file file2.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "a911736c56ab058995669556ef13c96d93d1cf0a64e4c7b6f6b40b3b8adefff8",
    "Created": "2023-10-04T17:49:32.269254Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "append ', some more content' to file2.txt",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AppendToFile\",\n\"StepDescription\": \"Append the string ', some more content' to the file named file2.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"AppendToFile\",\n\"StepDescription\": \"Append the string ', some more content' to the file named file2.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "eedd92fb16c0c8e6588a41d857ee8942ab6282fec2c20ba801395e1b17c0f47c",
    "Created": "2023-10-05T09:07:06.0460182Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: append ', some more content' to file2.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AppendToFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"content\",\n\"Value\": \", some more content\"},\n{\"Type\": \"String\",\n\"Name\": \"seperator\",\n\"Value\": null}]}"
    },
    "answer": "{\"FunctionName\": \"AppendToFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"content\",\n\"Value\": \", some more content\"},\n{\"Type\": \"String\",\n\"Name\": \"seperator\",\n\"Value\": null}]}",
    "hash": "4914b8463a86a035d64612cdafa69124c100bbd2d4342248d290636375ec2d51",
    "Created": "2023-10-05T09:07:12.085389Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "copy file2.txt to file3.txt",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CopyFile\",\n\"StepDescription\": \"Copy the content of file2.txt to file3.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"CopyFile\",\n\"StepDescription\": \"Copy the content of file2.txt to file3.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "665d81833eabd5136504bb771e0200f13296bf21bace5669615e89c3d32ff444",
    "Created": "2023-10-05T09:07:20.1660179Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: copy file2.txt to file3.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CopyFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"sourceFileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"destFileName\",\n\"Value\": \"file3.txt\"}]}"
    },
    "answer": "{\"FunctionName\": \"CopyFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"sourceFileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"destFileName\",\n\"Value\": \"file3.txt\"}]}",
    "hash": "28cd5da929114ceb242660e65bd0de2b15cbec4464efce29868d184852af69f7",
    "Created": "2023-10-05T09:07:24.6996545Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read file3.txt into %file3Content%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadFile\",\n\"StepDescription\": \"Read the content of the file named 'file3.txt' and store it into the variable 'file3Content'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"ReadFile\",\n\"StepDescription\": \"Read the content of the file named 'file3.txt' and store it into the variable 'file3Content'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "03bb50389c22d5597e481d7d6d8fc8fb02a2627ed07b3f7495581ffa2bf27fb7",
    "Created": "2023-10-05T09:07:30.7851626Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read file3.txt into %file3Content%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file3.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"file3Content\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file3.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"file3Content\"}}",
    "hash": "60daefb24883b6edc9af1c58d4f3c3f185a7e5de080e2c590b520694194c8172",
    "Created": "2023-10-05T09:07:38.5814941Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %file3Content%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"OutputFileContent\",\n\"StepDescription\": \"Write out the content of the variable 'file3Content' to the user interface.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"OutputFileContent\",\n\"StepDescription\": \"Write out the content of the variable 'file3Content' to the user interface.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "b8af1733644f4a88b5f84fbe54ea7766efdfa3cdb487e6246d847b330e14769d",
    "Created": "2023-10-05T09:07:44.1665119Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %file3Content%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nfile3Content(String), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"%file3Content%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}"
    },
    "answer": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"%file3Content%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}",
    "hash": "1218039fc39617f1068ae0bb4353aa3f0eefb4d8fd37697b3a7cef5ff909393b",
    "Created": "2023-10-05T09:07:49.889654Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "delete file file3.txt",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'file3.txt' from the file system.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'file3.txt' from the file system.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "03326a792415b883254b127b2ff74a3122744fa4e2f21f9f1a91a2c99f893879",
    "Created": "2023-10-05T09:07:56.8144378Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete file file3.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file3.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file3.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "24ee78be1746d165e81dc5bc5d07022d3b31ec67ac4043d49db6504e70ec4e10",
    "Created": "2023-10-05T09:08:00.6591594Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "get file info on Employees.xlsx. into %fileInfo%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetFileInfo\",\n\"StepDescription\": \"Retrieve the information of the file named 'Employees.xlsx' and store it into the variable 'fileInfo'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"GetFileInfo\",\n\"StepDescription\": \"Retrieve the information of the file named 'Employees.xlsx' and store it into the variable 'fileInfo'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "2854d0e156cab694f1d637bc9a4daf873a2fca3df317b9ee072f83dd41a928b3",
    "Created": "2023-10-05T09:14:31.786069Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: get file info on Employees.xlsx. into %fileInfo%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"GetFileInfo\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"Employees.xlsx\"}],\n\"ReturnValue\": {\"Type\": \"IFileInfo\",\n\"VariableName\": \"fileInfo\"}}"
    },
    "answer": "{\"FunctionName\": \"GetFileInfo\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"Employees.xlsx\"}],\n\"ReturnValue\": {\"Type\": \"IFileInfo\",\n\"VariableName\": \"fileInfo\"}}",
    "hash": "021ad552bf135efa1d8db4251b0f3f744583efe71a4cad778025e38463334df7",
    "Created": "2023-10-05T09:14:36.319669Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out 'IsArchive: %fileInfo.Attributes.Archive%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutFileAttributes\",\n\"StepDescription\": \"Write out the attributes of a file including whether it is an archive, its creation time, and the last time it was written to.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutFileAttributes\",\n\"StepDescription\": \"Write out the attributes of a file including whether it is an archive, its creation time, and the last time it was written to.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "395d66eda70016720cef60304fa2d73ba59ace2b7b648dd0f23bba952f25a72b",
    "Created": "2023-10-05T09:14:42.6244656Z"
  },
  {
    "question": {
      "type": "ErrorInfo",
      "system": "I am getting this error, can you give me user friendly error message and suggestion on how to fix it. Be Concise.You should respond in JSON, scheme {userFriendlyMessage:string, howToFix:string}",
      "question": "PLang.Exceptions.PropertyNotFoundException: Property Attributes was not found on fileInfo\r\n   at PLang.Runtime.MemoryStack.ExecuteProperty(ObjectValue objValue, String propertyDescription, String variableName) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Runtime\\MemoryStack.cs:line 553\r\n   at PLang.Runtime.MemoryStack.Get(String key, Boolean staticVariable) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Runtime\\MemoryStack.cs:line 271\r\n   at PLang.Utils.VariableHelper.GetVariables(String content, Boolean emptyIfNotFound) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Utils\\VariableHelper.cs:line 81\r\n   at PLang.Modules.BaseBuilder.GetVariablesInStep(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 211\r\n   at PLang.Modules.BaseBuilder.getDefaultAssistantText(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 187\r\n   at PLang.Modules.BaseBuilder.GetQuestion(GoalStep step, Type responseType) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 112\r\n   at PLang.Modules.BaseBuilder.Build(GoalStep step, Type responseType) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 64\r\n   at PLang.Modules.BaseBuilder.Build(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 57\r\n   at PLang.Building.InstructionBuilder.BuildInstruction(StepBuilder stepBuilder, Goal goal, GoalStep step, String module, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\InstructionBuilder.cs:line 52\r\n   at PLang.Building.StepBuilder.BuildStep(Goal goal, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\StepBuilder.cs:line 110",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"userFriendlyMessage\": \"The program encountered an error because it couldn't find the 'Attributes' property on 'fileInfo'.\",\n\"howToFix\": \"Please ensure that the 'Attributes' property exists on 'fileInfo'. If it doesn't exist, you may need to create it. If it does exist, check for typos or case-sensitivity issues in your code.\"\n}"
    },
    "answer": "{\n\"userFriendlyMessage\": \"The program encountered an error because it couldn't find the 'Attributes' property on 'fileInfo'.\",\n\"howToFix\": \"Please ensure that the 'Attributes' property exists on 'fileInfo'. If it doesn't exist, you may need to create it. If it does exist, check for typos or case-sensitivity issues in your code.\"\n}",
    "hash": "b2279cab3c6ec65861dcf4016637405c347f763f281a04c21c2b7d5b8e4dd93c",
    "Created": "2023-10-05T09:14:50.1747359Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out 'IsArchive: %fileInfo.Attributes.Archive%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%'",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"IsArchive: %fileInfo.Attributes.Archive%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}"
    },
    "answer": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"IsArchive: %fileInfo.Attributes.Archive%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}",
    "hash": "062e29bd362a4b54722fe8536cd1fe939414a250e860abe8bce7df93d79d4962",
    "Created": "2023-10-05T09:23:47.579993Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out 'IsArchive: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutFileInfo\",\n\"StepDescription\": \"Write out the information about whether the file is an archive, its creation time, and the last time it was written to.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutFileInfo\",\n\"StepDescription\": \"Write out the information about whether the file is an archive, its creation time, and the last time it was written to.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "80352d06e26d89c2b5dfd69c5c6572adce4a0b935fd75d71668db1d952973506",
    "Created": "2023-10-05T09:45:59.1812103Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out 'IsArchive: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%'",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nfileInfo(IFileInfo), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"IsArchive: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}"
    },
    "answer": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"IsArchive: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}",
    "hash": "7bd242e3ab41e9391a02b111a8491abaa2edf15074e5f0dc794443c349a763ce",
    "Created": "2023-10-05T09:46:09.407959Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out 'IsArchive: %fileInfo.ToJson()%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutFileInfo\",\n\"StepDescription\": \"Write out the information of a file including whether it is an archive, its creation time, and the last time it was written to.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutFileInfo\",\n\"StepDescription\": \"Write out the information of a file including whether it is an archive, its creation time, and the last time it was written to.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "099e7438f0988784bb7a7de36561566f9cbf921a951c2abf43efe0bcaffccd4d",
    "Created": "2023-10-05T09:47:25.1970412Z"
  },
  {
    "question": {
      "type": "ErrorInfo",
      "system": "I am getting this error, can you give me user friendly error message and suggestion on how to fix it. Be Concise.You should respond in JSON, scheme {userFriendlyMessage:string, howToFix:string}",
      "question": "PLang.Exceptions.PropertyNotFoundException: Property CreationTime was not found on fileInfo\r\n   at PLang.Runtime.MemoryStack.ExecuteProperty(ObjectValue objValue, String propertyDescription, String variableName) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Runtime\\MemoryStack.cs:line 555\r\n   at PLang.Runtime.MemoryStack.Get(String key, Boolean staticVariable) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Runtime\\MemoryStack.cs:line 271\r\n   at PLang.Utils.VariableHelper.GetVariables(String content, Boolean emptyIfNotFound) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Utils\\VariableHelper.cs:line 81\r\n   at PLang.Modules.BaseBuilder.GetVariablesInStep(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 211\r\n   at PLang.Modules.BaseBuilder.getDefaultAssistantText(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 187\r\n   at PLang.Modules.BaseBuilder.GetQuestion(GoalStep step, Type responseType) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 112\r\n   at PLang.Modules.BaseBuilder.Build(GoalStep step, Type responseType) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 64\r\n   at PLang.Modules.BaseBuilder.Build(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 57\r\n   at PLang.Building.InstructionBuilder.BuildInstruction(StepBuilder stepBuilder, Goal goal, GoalStep step, String module, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\InstructionBuilder.cs:line 52\r\n   at PLang.Building.StepBuilder.BuildStep(Goal goal, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\StepBuilder.cs:line 110",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"userFriendlyMessage\": \"The property 'CreationTime' you're trying to access on 'fileInfo' doesn't exist.\",\n\"howToFix\": \"Please check if the property 'CreationTime' is correctly spelled, exists and is accessible in the 'fileInfo' object. If the property doesn't exist, you may need to create it or use a different property.\"\n}"
    },
    "answer": "{\n\"userFriendlyMessage\": \"The property 'CreationTime' you're trying to access on 'fileInfo' doesn't exist.\",\n\"howToFix\": \"Please check if the property 'CreationTime' is correctly spelled, exists and is accessible in the 'fileInfo' object. If the property doesn't exist, you may need to create it or use a different property.\"\n}",
    "hash": "ab71aa2453c1d01d9f8d3fa2eed7538bef6824b9a81a61f0df3cf2458dd39efe",
    "Created": "2023-10-05T09:47:33.2719452Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out 'IsArchive: %fileInfo.ToJson()% , CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteFileInfo\",\n\"StepDescription\": \"Write out the archive status, creation time, and last write time of a file.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteFileInfo\",\n\"StepDescription\": \"Write out the archive status, creation time, and last write time of a file.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "815aeae2662fb29f8a32f1ebc09bc5756663def577c2c3aee697065bd263f21c",
    "Created": "2023-10-05T09:59:19.5466735Z"
  },
  {
    "question": {
      "type": "ErrorInfo",
      "system": "I am getting this error, can you give me user friendly error message and suggestion on how to fix it. Be Concise.You should respond in JSON, scheme {userFriendlyMessage:string, howToFix:string}",
      "question": "PLang.Exceptions.PropertyNotFoundException: Property CreationTime was not found on fileInfo\r\n   at PLang.Runtime.MemoryStack.ExecuteProperty(ObjectValue objValue, String propertyDescription, String variableName) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Runtime\\MemoryStack.cs:line 566\r\n   at PLang.Runtime.MemoryStack.Get(String key, Boolean staticVariable) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Runtime\\MemoryStack.cs:line 271\r\n   at PLang.Utils.VariableHelper.GetVariables(String content, Boolean emptyIfNotFound) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Utils\\VariableHelper.cs:line 81\r\n   at PLang.Modules.BaseBuilder.GetVariablesInStep(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 211\r\n   at PLang.Modules.BaseBuilder.getDefaultAssistantText(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 187\r\n   at PLang.Modules.BaseBuilder.GetQuestion(GoalStep step, Type responseType) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 112\r\n   at PLang.Modules.BaseBuilder.Build(GoalStep step, Type responseType) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 64\r\n   at PLang.Modules.BaseBuilder.Build(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 57\r\n   at PLang.Building.InstructionBuilder.BuildInstruction(StepBuilder stepBuilder, Goal goal, GoalStep step, String module, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\InstructionBuilder.cs:line 52\r\n   at PLang.Building.StepBuilder.BuildStep(Goal goal, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\StepBuilder.cs:line 110",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"userFriendlyMessage\": \"The property 'CreationTime' you're trying to access on 'fileInfo' doesn't exist.\",\n\"howToFix\": \"Please check if the property 'CreationTime' is correctly spelled, exists and is accessible in the 'fileInfo' object. If the property doesn't exist, you may need to create it or use a different property.\"\n}"
    },
    "answer": "{\n\"userFriendlyMessage\": \"The property 'CreationTime' you're trying to access on 'fileInfo' doesn't exist.\",\n\"howToFix\": \"Please check if the property 'CreationTime' is correctly spelled, exists and is accessible in the 'fileInfo' object. If the property doesn't exist, you may need to create it or use a different property.\"\n}",
    "hash": "b14177fd294d76019521d40e2a93cd2889a614df22afdc78d122fd6f9238885c",
    "Created": "2023-10-05T09:59:28.7456282Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "get file info on Employees.xlsx  into %fileInfo%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetFileInfo\",\n\"StepDescription\": \"Retrieve the information of the file named 'Employees.xlsx' and store it into the variable 'fileInfo'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"GetFileInfo\",\n\"StepDescription\": \"Retrieve the information of the file named 'Employees.xlsx' and store it into the variable 'fileInfo'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "7624009b7f2c23dc5beec4dd914f8011f169deb9c1d19c44dc1e4ff82bf5424f",
    "Created": "2023-10-05T10:00:41.0830407Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: get file info on Employees.xlsx  into %fileInfo%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"GetFileInfo\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"Employees.xlsx\"}],\n\"ReturnValue\": {\"Type\": \"IFileInfo\",\n\"VariableName\": \"fileInfo\"}}"
    },
    "answer": "{\"FunctionName\": \"GetFileInfo\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"Employees.xlsx\"}],\n\"ReturnValue\": {\"Type\": \"IFileInfo\",\n\"VariableName\": \"fileInfo\"}}",
    "hash": "0cdec48a67ba04d249586789fbbbfefa7ee7814a12cf663b135551b51819f1c1",
    "Created": "2023-10-05T10:00:49.4434255Z"
  },
  {
    "question": {
      "type": "ErrorInfo",
      "system": "I am getting this error, can you give me user friendly error message and suggestion on how to fix it. Be Concise.You should respond in JSON, scheme {userFriendlyMessage:string, howToFix:string}",
      "question": "PLang.Exceptions.PropertyNotFoundException: Property CreationTime was not found on fileInfo\r\n   at PLang.Runtime.MemoryStack.ExecuteProperty(ObjectValue objValue, String propertyDescription, String variableName) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Runtime\\MemoryStack.cs:line 588\r\n   at PLang.Runtime.MemoryStack.Get(String key, Boolean staticVariable) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Runtime\\MemoryStack.cs:line 271\r\n   at PLang.Utils.VariableHelper.GetVariables(String content, Boolean emptyIfNotFound) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Utils\\VariableHelper.cs:line 81\r\n   at PLang.Modules.BaseBuilder.GetVariablesInStep(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 226\r\n   at PLang.Modules.BaseBuilder.getDefaultAssistantText(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 202\r\n   at PLang.Modules.BaseBuilder.GetQuestion(GoalStep step, Type responseType) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 127\r\n   at PLang.Modules.BaseBuilder.Build(GoalStep step, Type responseType) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 64\r\n   at PLang.Modules.BaseBuilder.Build(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 57\r\n   at PLang.Building.InstructionBuilder.BuildInstruction(StepBuilder stepBuilder, Goal goal, GoalStep step, String module, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\InstructionBuilder.cs:line 52\r\n   at PLang.Building.StepBuilder.BuildStep(Goal goal, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\StepBuilder.cs:line 110",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"userFriendlyMessage\": \"The property 'CreationTime' you're trying to access on 'fileInfo' doesn't exist.\",\n\"howToFix\": \"Please check if the property 'CreationTime' is correctly spelled, exists and is accessible in the 'fileInfo' object. If the property doesn't exist, you may need to create it or use a different property.\"\n}"
    },
    "answer": "{\n\"userFriendlyMessage\": \"The property 'CreationTime' you're trying to access on 'fileInfo' doesn't exist.\",\n\"howToFix\": \"Please check if the property 'CreationTime' is correctly spelled, exists and is accessible in the 'fileInfo' object. If the property doesn't exist, you may need to create it or use a different property.\"\n}",
    "hash": "9c0c2e3fb41bceaad5e042729d7a94dc54fa8518d87f5e311474e078e819d4a3",
    "Created": "2023-10-05T10:19:41.4528577Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "get file info on Employees.xlsx   into %fileInfo%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetFileInfo\",\n\"StepDescription\": \"Retrieve the information of the file named 'Employees.xlsx' and store it into the variable 'fileInfo'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"GetFileInfo\",\n\"StepDescription\": \"Retrieve the information of the file named 'Employees.xlsx' and store it into the variable 'fileInfo'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "c264fc03a9661093b5b7455d39f832dbdcf883da299956435222d4277fba49dd",
    "Created": "2023-10-05T10:39:55.6784258Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: get file info on Employees.xlsx   into %fileInfo%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"GetFileInfo\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"Employees.xlsx\"}],\n\"ReturnValue\": {\"Type\": \"IFileInfo\",\n\"VariableName\": \"fileInfo\"}}"
    },
    "answer": "{\"FunctionName\": \"GetFileInfo\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"Employees.xlsx\"}],\n\"ReturnValue\": {\"Type\": \"IFileInfo\",\n\"VariableName\": \"fileInfo\"}}",
    "hash": "97903f36b5c1b857aea1e0cdcd092d00964d6a07c154d71fc7bfb7537c427547",
    "Created": "2023-10-05T10:40:00.1799606Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out 'IsArchive: %fileInfo.ToJson()%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%'",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"IsArchive: %fileInfo.ToJson()%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n  ]\n}"
    },
    "answer": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"IsArchive: %fileInfo.ToJson()%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n  ]\n}",
    "hash": "f6867983f743e297a497ea129b35da0413776b3d39282132057ea786fd9d6120",
    "Created": "2023-10-05T10:57:32.5088519Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out 'fileInfo: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"OutputFileInfo\",\n\"StepDescription\": \"Write out the information of the file including its creation time and last write time.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"OutputFileInfo\",\n\"StepDescription\": \"Write out the information of the file including its creation time and last write time.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "9426e04cdc1047f4aa3d484088de60802b3ce247f208528316d2af6ded1464e9",
    "Created": "2023-10-05T11:10:20.4289011Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out 'fileInfo: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%'",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nfileInfo(System.IO.Abstractions.IFileInfo), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"fileInfo: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}"
    },
    "answer": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"fileInfo: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}",
    "hash": "731ace7e7be7984099b330518c8a88dcb71304e5069f70390293fa79ea5b1bef",
    "Created": "2023-10-05T11:10:30.5781199Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to demo.xlsx, %csvData%, overwrite file",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to the file named demo.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to the file named demo.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "81e218d32c3469cabf75792e6f340f10d0dd32ae944af1179575b543c264b774",
    "Created": "2023-10-06T10:43:43.781844Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to demo.xlsx, %csvData%, overwrite file",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo.xlsx\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": \"%csvData%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo.xlsx\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": \"%csvData%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}",
    "hash": "33650023a3c2f8cb0de602971b141cdcd2ef3b0aa1fa419a10564906eb8e5a5f",
    "Created": "2023-10-06T10:43:49.8432092Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to demo2.xlsx, data: %excelData%, %csvData%, overwrite file",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data contained in the variables %excelData% and %csvData% to the file named demo2.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data contained in the variables %excelData% and %csvData% to the file named demo2.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "9a477399f2cccf23d45bb008d4d9ca89601b0fd777a7a96428e47703b57cb404",
    "Created": "2023-10-06T10:47:24.1299902Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to demo2.xlsx, data: %excelData%, %csvData%, overwrite file",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo2.xlsx\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": [\"%excelData%\", \"%csvData%\"]},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo2.xlsx\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": [\"%excelData%\", \"%csvData%\"]},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}",
    "hash": "bdb5ecbb7513d92fdee9581df9aea73172e24c809763a30956eab6c24e8598d8",
    "Created": "2023-10-06T10:47:31.1809737Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to demo.xlsx, %csvData%,  overwrite file",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to the file named demo.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to the file named demo.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "6b1acda4a0504cb9d5efccf1ae7ad64b2c03d6ac514589b154d7a5f35ea15d1f",
    "Created": "2023-10-09T18:24:45.2512301Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to demo.xlsx, %csvData%,  overwrite file",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"demo.xlsx\"},\n{\"Type\": \"String[]\",\n\"Name\": \"variablesToWriteToExcel\",\n\"Value\": \"%csvData%\"},\n{\"Type\": \"Boolean?\",\n\"Name\": \"overwrite\",\n\"Value\": true}]}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"demo.xlsx\"},\n{\"Type\": \"String[]\",\n\"Name\": \"variablesToWriteToExcel\",\n\"Value\": \"%csvData%\"},\n{\"Type\": \"Boolean?\",\n\"Name\": \"overwrite\",\n\"Value\": true}]}",
    "hash": "1f625be978e136779dd493e1979a412e34c8daac216f2308bddaed1557bfd205",
    "Created": "2023-10-09T18:24:52.0657357Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "delete demo.xlsx",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'demo.xlsx' from the system.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'demo.xlsx' from the system.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "4868c5cfeb72af24f8779d76519206ff29a9197c71461ec704c52766c849c939",
    "Created": "2023-10-09T18:27:27.5821794Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete demo.xlsx",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "4a5a3a26aff165d04863e407346301213863e1dac4b906b72cebc6fa6c692145",
    "Created": "2023-10-09T18:27:32.7361075Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "delete demo2.xlsx",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'demo2.xlsx' from the system.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'demo2.xlsx' from the system.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "4b77d7770d4ceff387a8d8c09998ddddb8fef300f42704bc09807e76215ff1ea",
    "Created": "2023-10-09T18:27:38.0239935Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete demo2.xlsx",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo2.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo2.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "42532fa4c6ee2a415c21394a34a78826d3851814c44cc7e2dd9f15d067a51d8c",
    "Created": "2023-10-09T18:27:42.9410387Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to demo.csv, %csvData%,  overwrite file",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToCSV\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to the file named demo.csv. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToCSV\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to the file named demo.csv. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "989035cf4f3763cb329251788c0db44b9157560920f2f4382567d8f3f7c6e6c6",
    "Created": "2023-10-09T18:27:53.3916683Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to demo.csv, %csvData%,  overwrite file",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteCsvFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo.csv\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": \"%csvData%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteCsvFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo.csv\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": \"%csvData%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}",
    "hash": "25d1e1baa1a543764169844b0797e4aa269cf28fe98227bcd3b0dc7b3c9a6863",
    "Created": "2023-10-09T18:27:59.7165372Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to demo2.xlsx, data: %excelData%, %csvData%, overwrite file",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data contained in the variables %excelData% and %csvData% to the file named demo2.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data contained in the variables %excelData% and %csvData% to the file named demo2.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "6f5fb86e15b431b600346a4e889692a2ccc301676b69338f9e8d9657a9cbdaac",
    "Created": "2023-10-09T18:28:07.298616Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to demo2.xlsx, data: %excelData%, %csvData%, overwrite file",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo2.xlsx\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": [\"%excelData%\", \"%csvData%\"]},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo2.xlsx\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": [\"%excelData%\", \"%csvData%\"]},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}",
    "hash": "4be2fc9893ed9f645790a2e5484f09414fafb220a4325f8ca0979960f77019a6",
    "Created": "2023-10-09T18:28:15.6048375Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write %excelData% to Employees.xlsx, overwrite",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable 'excelData' to a file named 'Employees.xlsx'. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable 'excelData' to a file named 'Employees.xlsx'. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "152a6439e64d174e5f75ce04e63637d3e7c1454ff51333d5abb72fb3da657b3f",
    "Created": "2023-10-09T19:21:24.4945725Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write %excelData% to Employees.xlsx, overwrite",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"Employees.xlsx\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": \"%excelData%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"Employees.xlsx\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": \"%excelData%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}",
    "hash": "da482de78cfeb0b4ac3b4245074cf940e9d0759504875980d28a2d3c514dcb70",
    "Created": "2023-10-09T19:21:31.6144609Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read Test5x2.csv into %csvData%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadCSVFile\",\n\"StepDescription\": \"Read the contents of the file named 'Test5x2.csv' and store it into the variable 'csvData'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"ReadCSVFile\",\n\"StepDescription\": \"Read the contents of the file named 'Test5x2.csv' and store it into the variable 'csvData'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "b85cf8fb8c4a7c4a4cd93286513d675a0c6a3a83188816852d46638e377ee560",
    "Created": "2023-10-09T19:21:37.5938118Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read Test5x2.csv into %csvData%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadCsvFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"Test5x2.csv\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"useHeaderRow\",\n\"Value\": true},\n{\"Type\": \"Dictionary`2<String>\",\n\"Name\": \"sheetsToVariable\",\n\"Value\": {\"\": \"%csvData%\"}}]}"
    },
    "answer": "{\"FunctionName\": \"ReadCsvFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"Test5x2.csv\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"useHeaderRow\",\n\"Value\": true},\n{\"Type\": \"Dictionary`2<String>\",\n\"Name\": \"sheetsToVariable\",\n\"Value\": {\"\": \"%csvData%\"}}]}",
    "hash": "098927c7300391f4f4b6a31e8f15feb273143ca2b8111a62b38f7f5fda3d9247",
    "Created": "2023-10-09T19:21:45.1367281Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "loop through %csvData%, call !PrintOutCSV",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"LoopAndPrintCSV\",\n\"StepDescription\": \"This step involves looping through the data stored in the variable %csvData% and for each iteration, the function !PrintOutCSV is called.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"LoopAndPrintCSV\",\n\"StepDescription\": \"This step involves looping through the data stored in the variable %csvData% and for each iteration, the function !PrintOutCSV is called.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "ac8d94eaa9891e41bd1a229c22dde1390416d25a730750282d81d0b8db4277c4",
    "Created": "2023-10-09T19:21:53.1075273Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: loop through %csvData%, call !PrintOutCSV",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunLoop(String variableToLoopThrough, String goalNameToCall, Dictionary`2<String>? parameters) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"RunLoop\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"variableToLoopThrough\",\n\"Value\": \"%csvData%\"},\n{\"Type\": \"String\",\n\"Name\": \"goalNameToCall\",\n\"Value\": \"!PrintOutCSV\"},\n{\"Type\": \"Dictionary`2<String>\",\n\"Name\": \"parameters\",\n\"Value\": null}]}"
    },
    "answer": "{\"FunctionName\": \"RunLoop\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"variableToLoopThrough\",\n\"Value\": \"%csvData%\"},\n{\"Type\": \"String\",\n\"Name\": \"goalNameToCall\",\n\"Value\": \"!PrintOutCSV\"},\n{\"Type\": \"Dictionary`2<String>\",\n\"Name\": \"parameters\",\n\"Value\": null}]}",
    "hash": "aa8f22a6ebf0c79f054923dd5344bc85670c17a6f8b09e6106e8ffa6f781aa7c",
    "Created": "2023-10-09T19:21:59.1149837Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to file2.txt, 'This is a content'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToFile\",\n\"StepDescription\": \"Write the string 'This is a content' to the file named file2.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"WriteToFile\",\n\"StepDescription\": \"Write the string 'This is a content' to the file named file2.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "521e232e1881b92f1565bfe6548cc4a6a9efc7faf635a56bba49eddc9699dd06",
    "Created": "2023-10-09T19:22:06.3752645Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to file2.txt, 'This is a content'",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteToFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file2.txt\"},\n               {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \"This is a content\"},\n               {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"WriteToFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file2.txt\"},\n               {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \"This is a content\"},\n               {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": false}]}",
    "hash": "68e2e1470f3db59feca094fe39f3343b849e62ed94948b0bea86cf6513cad000",
    "Created": "2023-10-09T19:22:12.1931359Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read file2.txt, into %newContent%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadFile\",\n\"StepDescription\": \"Read the content of the file named 'file2.txt' and store it into the variable 'newContent'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"ReadFile\",\n\"StepDescription\": \"Read the content of the file named 'file2.txt' and store it into the variable 'newContent'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "d5f60b4d3be915fff3d66f3b3a384fad2ae9b34abedf4f5a811e0c41802a3bae",
    "Created": "2023-10-09T19:22:18.8603548Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read file2.txt, into %newContent%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file2.txt\"}, {\"Type\": \"String\", \"Name\": \"returnValueIfFileNotExisting\", \"Value\": \"\"}, {\"Type\": \"Boolean\", \"Name\": \"throwErrorOnNotFound\", \"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\", \"VariableName\": \"newContent\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file2.txt\"}, {\"Type\": \"String\", \"Name\": \"returnValueIfFileNotExisting\", \"Value\": \"\"}, {\"Type\": \"Boolean\", \"Name\": \"throwErrorOnNotFound\", \"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\", \"VariableName\": \"newContent\"}}",
    "hash": "97958946a1bcbb4e449a4f7aca9fc9fde713e16ec841992357846399aa85823c",
    "Created": "2023-10-09T19:22:28.2341115Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %newContent%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%newContent%(String), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutNewContent\",\n\"StepDescription\": \"This step involves outputting the value of the variable %newContent%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutNewContent\",\n\"StepDescription\": \"This step involves outputting the value of the variable %newContent%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "783aa9d19293f1f0873eef4bb754b2b15b3b8862afea34941b7827779832bfb0",
    "Created": "2023-10-09T19:22:31.7149852Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "append ', some more content' to file2.txt",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AppendToFile\",\n\"StepDescription\": \"Append the string ', some more content' to the file named file2.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"AppendToFile\",\n\"StepDescription\": \"Append the string ', some more content' to the file named file2.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "fc4eef2aa11213ebba7f38ee1bfeac8d7b983c56c9075a91c28786d75fa0f77e",
    "Created": "2023-10-09T19:22:37.8565588Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: append ', some more content' to file2.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AppendToFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file2.txt\"},\n               {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \", some more content\"},\n               {\"Type\": \"String\", \"Name\": \"seperator\", \"Value\": null}]}"
    },
    "answer": "{\"FunctionName\": \"AppendToFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file2.txt\"},\n               {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \", some more content\"},\n               {\"Type\": \"String\", \"Name\": \"seperator\", \"Value\": null}]}",
    "hash": "3b19790cec2727ce81018f939358deefd150cb65b6050a8b149c0570e3e76bf3",
    "Created": "2023-10-09T19:22:45.2411193Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "copy file2.txt to file3.txt",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CopyFile\",\n\"StepDescription\": \"Copy the content of file2.txt to file3.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"CopyFile\",\n\"StepDescription\": \"Copy the content of file2.txt to file3.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "1b5f89f9ca340a52598205aab2cbc328155eae5278ad47da9c93907879b58475",
    "Created": "2023-10-09T19:22:51.188539Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: copy file2.txt to file3.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CopyFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"sourceFileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"destFileName\",\n\"Value\": \"file3.txt\"}]}"
    },
    "answer": "{\"FunctionName\": \"CopyFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"sourceFileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"destFileName\",\n\"Value\": \"file3.txt\"}]}",
    "hash": "2dc8cf1f68f7e6bfaa523ad3b3cffbcae62a3def44be470939f2653bc2501b37",
    "Created": "2023-10-09T19:22:56.5464387Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read file3.txt into %file3Content%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadFile\",\n\"StepDescription\": \"Read the content of the file named 'file3.txt' and store it into the variable 'file3Content'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"ReadFile\",\n\"StepDescription\": \"Read the content of the file named 'file3.txt' and store it into the variable 'file3Content'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "98b7dd349627d9a7b3eabb5bf71ed1200c79983b462b042ea7bc58a36ee469c4",
    "Created": "2023-10-09T19:23:04.3842915Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read file3.txt into %file3Content%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file3.txt\"}, {\"Type\": \"String\", \"Name\": \"returnValueIfFileNotExisting\", \"Value\": \"\"}, {\"Type\": \"Boolean\", \"Name\": \"throwErrorOnNotFound\", \"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\", \"VariableName\": \"file3Content\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file3.txt\"}, {\"Type\": \"String\", \"Name\": \"returnValueIfFileNotExisting\", \"Value\": \"\"}, {\"Type\": \"Boolean\", \"Name\": \"throwErrorOnNotFound\", \"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\", \"VariableName\": \"file3Content\"}}",
    "hash": "fff9b02be484b71b76f9a677497aac754527ee8364c385f7c7d005e41c8d9032",
    "Created": "2023-10-09T19:23:12.2133025Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %file3Content%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%file3Content%(String), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutFileContent\",\n\"StepDescription\": \"This step involves writing out the content of the variable %file3Content%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutFileContent\",\n\"StepDescription\": \"This step involves writing out the content of the variable %file3Content%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "20d7612d1869545f3608afcd513aab892e7e2de1c84c2acfa905fb6dd15bc9d3",
    "Created": "2023-10-09T19:23:16.8405888Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "delete file file2.txt",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'file2.txt' from the system.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'file2.txt' from the system.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "65b6f340ecbb0fe71da2aa5d58da825133c6f0b2864d319b31ca8f055bf9d55d",
    "Created": "2023-10-09T19:23:23.5374037Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete file file2.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "4b6be1a5b21db1b7113f705344691761fb45d7efb4e30be56637fe888ca0c901",
    "Created": "2023-10-09T19:23:28.0699021Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "delete file file3.txt",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'file3.txt' from the system.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"DeleteFile\",\n\"StepDescription\": \"Delete the file named 'file3.txt' from the system.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "1fdf85ce3329c8887bf8149b8f1740ec97a51187b13ad883fcb2571f54d43441",
    "Created": "2023-10-09T19:23:32.9323834Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete file file3.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file3.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file3.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "b63c005e4ce6182839b999c7239d72afcaa8d323ba8f2e5fef8e149a1ab638db",
    "Created": "2023-10-09T19:23:36.6704689Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "get file info on Employees.xlsx   into %fileInfo%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetFileInfo\",\n\"StepDescription\": \"Retrieve the information of the file named 'Employees.xlsx' and store it into the variable %fileInfo%\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"GetFileInfo\",\n\"StepDescription\": \"Retrieve the information of the file named 'Employees.xlsx' and store it into the variable %fileInfo%\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "993137c92530554cfcb8c09aab835b55714c9d8078b78f27c6a7458bc33ec38a",
    "Created": "2023-10-09T19:23:42.6115652Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: get file info on Employees.xlsx   into %fileInfo%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"GetFileInfo\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"Employees.xlsx\"}],\n\"ReturnValue\": {\"Type\": \"IFileInfo\",\n\"VariableName\": \"fileInfo\"}}"
    },
    "answer": "{\"FunctionName\": \"GetFileInfo\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"Employees.xlsx\"}],\n\"ReturnValue\": {\"Type\": \"IFileInfo\",\n\"VariableName\": \"fileInfo\"}}",
    "hash": "60dd8dc7f59f85ff3ecfa4de44cca9639b1bcccaa00b5df0b311465842700a4b",
    "Created": "2023-10-09T19:23:48.8721123Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out 'fileInfo: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%fileInfo%(IFileInfo), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"StepName\": \"OutputFileInfo\",\n\"StepDescription\": \"Write out the information of the file including its creation time and last write time.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true\n}"
    },
    "answer": "{\n\"StepName\": \"OutputFileInfo\",\n\"StepDescription\": \"Write out the information of the file including its creation time and last write time.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true\n}",
    "hash": "963f13dae51a55956d2b1adaa7f5516cee1abfbc464b20aff73ddc60afebcfaf",
    "Created": "2023-10-09T19:23:53.0217659Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out 'fileInfo: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%'",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nfileInfo(IFileInfo), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n        \"Type\": \"string\",\n        \"Name\": \"text\",\n        \"Value\": \"fileInfo: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%\"\n    },\n    {\n        \"Type\": \"Boolean\",\n        \"Name\": \"writeToBuffer\",\n        \"Value\": false\n    }\n]\n}"
    },
    "answer": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n        \"Type\": \"string\",\n        \"Name\": \"text\",\n        \"Value\": \"fileInfo: %fileInfo%, CreationTime: %fileInfo.CreationTime%, LastWriteTime: %fileInfo.LastWriteTime%\"\n    },\n    {\n        \"Type\": \"Boolean\",\n        \"Name\": \"writeToBuffer\",\n        \"Value\": false\n    }\n]\n}",
    "hash": "cbf5051c6a716dbeda4203f81f512ee47404962b594457624cbfb960e059f73d",
    "Created": "2023-10-09T19:24:03.2188656Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read 1px.png  into %base64%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadImageToBase64\",\n\"StepDescription\": \"This step involves reading the image file '1px.png' and converting it into a base64 string. The resulting base64 string is then stored in the variable '%base64%'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"ReadImageToBase64\",\n\"StepDescription\": \"This step involves reading the image file '1px.png' and converting it into a base64 string. The resulting base64 string is then stored in the variable '%base64%'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "c12c313aae3e48a3d902083b5650772dc238b8403f7194562d6e889032d8caf2",
    "Created": "2023-10-09T19:51:36.6602195Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read 1px.png  into %base64%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadBinaryFileAndConvertToBase64\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"%1px.png%\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"base64\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadBinaryFileAndConvertToBase64\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"%1px.png%\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"base64\"}}",
    "hash": "229ea1ebf5884cbd815bff74cc33e7940867b6f8a5a7f726287f1a583333d191",
    "Created": "2023-10-09T19:51:56.4436145Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read 1px.png, into %base64%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadImageToBase64\",\n\"StepDescription\": \"This step involves reading the image file '1px.png' and converting it into a base64 string. The resulting base64 string is then stored in the variable '%base64%'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"ReadImageToBase64\",\n\"StepDescription\": \"This step involves reading the image file '1px.png' and converting it into a base64 string. The resulting base64 string is then stored in the variable '%base64%'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "b69731e033ead3fb50024ccf020f136e53a85e5b3a3709be4057aa600094362a",
    "Created": "2023-10-09T20:00:07.9834353Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read 1px.png, into %base64%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadBinaryFileAndConvertToBase64\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"%1px.png%\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"%base64%\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadBinaryFileAndConvertToBase64\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"%1px.png%\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"%base64%\"}}",
    "hash": "967daea32804ccc7288082e04e25e60ac427ac1f96c3f24f300d8f6aa697be7b",
    "Created": "2023-10-09T20:00:16.7304252Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read '1px.png', into %base64%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadFileIntoBase64\",\n\"StepDescription\": \"This step involves reading the file '1px.png' and converting it into a base64 format. The result is then stored in the variable %base64%.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"ReadFileIntoBase64\",\n\"StepDescription\": \"This step involves reading the file '1px.png' and converting it into a base64 format. The result is then stored in the variable %base64%.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "326aa8bc8b6c0304ca75ebd6adfa487e53e319dc16909ad0a0c052dce700720d",
    "Created": "2023-10-10T10:08:13.0228271Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read '1px.png', into %base64%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadBinaryFileAndConvertToBase64\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"1px.png\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"base64\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadBinaryFileAndConvertToBase64\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"1px.png\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"base64\"}}",
    "hash": "bda8d1292530b773d549ccc00ad4d0dc7fcf2d416fa05ab5b5981247deca8cfe",
    "Created": "2023-10-10T10:08:25.076562Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write %excelData% to Employees.xlsx, has header, overwrite",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable 'excelData' to a file named 'Employees.xlsx'. The data includes a header and the existing file should be overwritten if it exists.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable 'excelData' to a file named 'Employees.xlsx'. The data includes a header and the existing file should be overwritten if it exists.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "7880c446d200c2766aca9fc56555eb430eb3a03bf0c7b82c01f5ada3de760272",
    "Created": "2023-10-10T10:48:41.5655465Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write %excelData% to Employees.xlsx, has header, overwrite",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, String[] variablesToWriteToExcel, Int32? excelType = 0, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False)  // excelType=0 is XSLX, excelType=1 is CSV. \nvoid WriteCsvFile(String path, String[] variablesToWriteToExcel, Char? seperator = ,, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid ReadCsvFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"Employees.xlsx\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": \"%excelData%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"printHeader\", \"Value\": true},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"Employees.xlsx\"},\n    {\"Type\": \"String[]\", \"Name\": \"variablesToWriteToExcel\", \"Value\": \"%excelData%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"printHeader\", \"Value\": true},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}",
    "hash": "0847a21fd9e99c6f21d1fdcad65be7c837ab71555af1eebe358fbe58e4c6a548",
    "Created": "2023-10-10T10:48:50.387754Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read Employees.xlsx  into %excelData%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadExcelFile\",\n\"StepDescription\": \"This step involves reading the data from the 'Employees.xlsx' file and storing it into the variable 'excelData'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"ReadExcelFile\",\n\"StepDescription\": \"This step involves reading the data from the 'Employees.xlsx' file and storing it into the variable 'excelData'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "f02f40917fbef134073f54d3e27138f76ffafa0368072eb0404df65734743e5b",
    "Created": "2023-10-10T14:10:36.1908636Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read Employees.xlsx  into %excelData%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadExcelFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"Employees.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"useHeaderRow\",\n\"Value\": true},\n{\"Type\": \"Dictionary`2<String>\",\n\"Name\": \"sheetsToVariable\",\n\"Value\": {\"Sheet1\": \"%excelData%\"}}]}"
    },
    "answer": "{\"FunctionName\": \"ReadExcelFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"Employees.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"useHeaderRow\",\n\"Value\": true},\n{\"Type\": \"Dictionary`2<String>\",\n\"Name\": \"sheetsToVariable\",\n\"Value\": {\"Sheet1\": \"%excelData%\"}}]}",
    "hash": "f7166decaaf0674c6c86efbcf16288a5469bccfabca8583284a0cf3478124aca",
    "Created": "2023-10-10T14:10:46.9502535Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write %excelData% to  Employees.xlsx, has header, overwrite",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable 'excelData' to a file named 'Employees.xlsx'. The data includes a header and the file should be overwritten if it already exists.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable 'excelData' to a file named 'Employees.xlsx'. The data includes a header and the file should be overwritten if it already exists.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "1b9335688efe0d188fe3245607e73ce6c214e07b010ab678ba1dd0c1b288b984",
    "Created": "2023-10-10T14:10:57.2249276Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write %excelData% to  Employees.xlsx, has header, overwrite",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"Employees.xlsx\"},\n    {\"Type\": \"Dictionary`2<String>\", \"Name\": \"variablesToWriteToExcel\", \"Value\": {\"Sheet1\": \"%excelData%\"}},\n    {\"Type\": \"Boolean\", \"Name\": \"printHeader\", \"Value\": true},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"Employees.xlsx\"},\n    {\"Type\": \"Dictionary`2<String>\", \"Name\": \"variablesToWriteToExcel\", \"Value\": {\"Sheet1\": \"%excelData%\"}},\n    {\"Type\": \"Boolean\", \"Name\": \"printHeader\", \"Value\": true},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}",
    "hash": "f4b918b223531225b8bc203d21e5700ed23c670926e646bc98201dbd4ec1a41b",
    "Created": "2023-10-10T14:11:08.3622573Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "read  Test5x2.csv into %csvData%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ReadCSVFile\",\n\"StepDescription\": \"Read the contents of the file named 'Test5x2.csv' and store it into the variable 'csvData'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"ReadCSVFile\",\n\"StepDescription\": \"Read the contents of the file named 'Test5x2.csv' and store it into the variable 'csvData'.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "5ae2c6360196219ab25eb8a7a8080cef31d8a6b0093309ddc2d367d7e579c350",
    "Created": "2023-10-10T14:11:18.6578764Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read  Test5x2.csv into %csvData%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadCsvFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"Test5x2.csv\"}],\n\"ReturnValue\": {\"Type\": \"Object\",\n\"VariableName\": \"csvData\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadCsvFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"Test5x2.csv\"}],\n\"ReturnValue\": {\"Type\": \"Object\",\n\"VariableName\": \"csvData\"}}",
    "hash": "4fcba14c09bcf96b93a0ea27d3799f554a55b9d9b17cf40729a04cd247124d78",
    "Created": "2023-10-10T14:11:23.8882552Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to Test5x2.csv, data %csvData%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%csvData%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToCSV\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to the file named Test5x2.csv\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToCSV\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to the file named Test5x2.csv\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "b170eb78acc68a5c935371eed8e1cb96851a5412a25b7f7238338a71c2eaac42",
    "Created": "2023-10-10T14:11:35.6816122Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to Test5x2.csv, data %csvData%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##\r\n## defined variables ##\r\ncsvData(Object), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteCsvFile\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"path\", \"Value\": \"Test5x2.csv\"},\n    {\"Type\": \"Object\", \"Name\": \"variableToWriteToCsv\", \"Value\": \"%csvData%\"}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteCsvFile\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"path\", \"Value\": \"Test5x2.csv\"},\n    {\"Type\": \"Object\", \"Name\": \"variableToWriteToCsv\", \"Value\": \"%csvData%\"}\n]}",
    "hash": "8460899781078a73fb13aa75905aad9acb1b2060a76df10906b5feda713bff67",
    "Created": "2023-10-10T14:11:43.2507033Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to file2.txt, 'This is a content'",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteToFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file2.txt\"},\n               {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \"This is a content\"},\n               {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"WriteToFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file2.txt\"},\n               {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \"This is a content\"},\n               {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": false}]}",
    "hash": "2329056a187a5c26dc7f3539bca6f06d636ab3f034210bda9284f732b85100cc",
    "Created": "2023-10-10T14:11:51.8199815Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read file2.txt, into %newContent%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"newContent\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"newContent\"}}",
    "hash": "cae20d63ce2047593de19dd6161ca9f7b206563fbedfa8fe0b8a1f7ab481b429",
    "Created": "2023-10-10T14:12:00.3764998Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: append ', some more content' to file2.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AppendToFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file2.txt\"},\n    {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \", some more content\"},\n    {\"Type\": \"String\", \"Name\": \"seperator\", \"Value\": \"\"}\n]}"
    },
    "answer": "{\"FunctionName\": \"AppendToFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"file2.txt\"},\n    {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \", some more content\"},\n    {\"Type\": \"String\", \"Name\": \"seperator\", \"Value\": \"\"}\n]}",
    "hash": "56c619bf0bc59babd2adae2c912c535b4fba78006a2ca008dc6d2b69657fdb2b",
    "Created": "2023-10-10T14:12:08.1225759Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: copy file2.txt to file3.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CopyFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"sourceFileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"destFileName\",\n\"Value\": \"file3.txt\"}]}"
    },
    "answer": "{\"FunctionName\": \"CopyFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"sourceFileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"destFileName\",\n\"Value\": \"file3.txt\"}]}",
    "hash": "e274161e5016dbc456344360d8d8fd49c78120a15171dec1d648979143cabcfc",
    "Created": "2023-10-10T14:12:15.9508779Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: read file3.txt into %file3Content%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file3.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"file3Content\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadTextFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"file3.txt\"},\n{\"Type\": \"String\",\n\"Name\": \"returnValueIfFileNotExisting\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"file3Content\"}}",
    "hash": "8615197fc6993557836ade4ed58c5fc9594b34a6d2e2c490e95858f98bc084ec",
    "Created": "2023-10-10T14:12:24.9066821Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete file file2.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file2.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "de46a4617d1732def6d85310cd5a9f8fbaa92de21c8e118df375df76137932ef",
    "Created": "2023-10-10T14:12:30.3837021Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete file file3.txt",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file3.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"file3.txt\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "ae7b56d6f0873ce958e31ccf23095430850e43afacb538f9e4ade5474be7e217",
    "Created": "2023-10-10T14:12:38.4064701Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: get file info on Employees.xlsx   into %fileInfo%",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"GetFileInfo\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"Employees.xlsx\"}],\n\"ReturnValue\": {\"Type\": \"IFileInfo\",\n\"VariableName\": \"fileInfo\"}}"
    },
    "answer": "{\"FunctionName\": \"GetFileInfo\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"Employees.xlsx\"}],\n\"ReturnValue\": {\"Type\": \"IFileInfo\",\n\"VariableName\": \"fileInfo\"}}",
    "hash": "0b9d8122345ab64924e2cfc4463d3c8fa6fa6f8ebbec64d6c2a63e8e18c04c9f",
    "Created": "2023-10-10T14:12:42.9663839Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to demo.xlsx, %csvData%,  overwrite file",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%csvData%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to a file named demo.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to a file named demo.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "53433d88d275ba8dd10c2ada7360e6ff07c45b31bcdd6f17a5b0bab8563d6275",
    "Created": "2023-10-10T14:12:52.1371874Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to demo.xlsx, %csvData%,  overwrite file",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##\r\n## defined variables ##\r\ncsvData(Object), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo.xlsx\"},\n    {\"Type\": \"Dictionary`2<String>\", \"Name\": \"variablesToWriteToExcel\", \"Value\": {\"Sheet1\": \"%csvData%\"}},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo.xlsx\"},\n    {\"Type\": \"Dictionary`2<String>\", \"Name\": \"variablesToWriteToExcel\", \"Value\": {\"Sheet1\": \"%csvData%\"}},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}",
    "hash": "0c4a92c1ecde61d6414cf78b5f3b77a47bb03baf8a7f685a517ef2a4898ccbef",
    "Created": "2023-10-10T14:13:02.1197525Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to demo.csv, %csvData%,  overwrite file",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%csvData%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToCSV\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to a file named demo.csv. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToCSV\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to a file named demo.csv. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "7bbae93450dc1fcf248a7f68ea1dde7e505436abef7cf58ce46f41743496cf9f",
    "Created": "2023-10-10T14:13:11.8548449Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to demo.csv, %csvData%,  overwrite file",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##\r\n## defined variables ##\r\ncsvData(Object), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteCsvFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo.csv\"},\n    {\"Type\": \"Object\", \"Name\": \"variableToWriteToCsv\", \"Value\": \"%csvData%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteCsvFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo.csv\"},\n    {\"Type\": \"Object\", \"Name\": \"variableToWriteToCsv\", \"Value\": \"%csvData%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}",
    "hash": "a995d883432d615d6ed879fefc8a0173b2ba7dff74c2ed1f034b686dddb66f04",
    "Created": "2023-10-10T14:13:21.2650534Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to demo2.xlsx, data: %excelData%, %csvData%, overwrite file",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%csvData%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data contained in the variables %excelData% and %csvData% to the file named demo2.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data contained in the variables %excelData% and %csvData% to the file named demo2.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "f40ba65ff5740f2d8af758a66da8a8341ea0f9fb0082f08e7e1af0ef6eb769b2",
    "Created": "2023-10-10T14:13:29.2780848Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to demo2.xlsx, data: %excelData%, %csvData%, overwrite file",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##\r\n## defined variables ##\r\ncsvData(Object), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo2.xlsx\"},\n    {\"Type\": \"Dictionary`2<String>\", \"Name\": \"variablesToWriteToExcel\", \"Value\": {\"Sheet1\": \"%excelData%\", \"Sheet2\": \"%csvData%\"}},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo2.xlsx\"},\n    {\"Type\": \"Dictionary`2<String>\", \"Name\": \"variablesToWriteToExcel\", \"Value\": {\"Sheet1\": \"%excelData%\", \"Sheet2\": \"%csvData%\"}},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}",
    "hash": "e6362f629cfc05625dc59e21ee82634c3750538c73c2ebf8f5ef7ad49dc650e6",
    "Created": "2023-10-10T14:13:40.9292506Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete demo.xlsx",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "ed35b37d9c3ccee400d452a257d7b37a40bf11bf3a23e016395fbb3c57cf561d",
    "Created": "2023-10-10T14:13:47.3407187Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete demo2.xlsx",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid WriteExcelFile(String path, Dictionary`2<String> variablesToWriteToExcel, Boolean? printHeader = True, Boolean? overwrite = False)  // variablesToWriteToExcel: key is sheet name, value is the variable. If no sheet is defined then it is Sheet1, Sheet2, .... \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData, Boolean? overwrite = False) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo2.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo2.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "81523b2d77a71240cfb39b69dbb55dc5dd751ef7adab8a1b06a3cbc1a830bd60",
    "Created": "2023-10-10T14:13:52.1235826Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write  %excelData% to Employees.xlsx, has header, overwrite",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable 'excelData' to a file named 'Employees.xlsx'. The data includes a header and the existing file should be overwritten if it exists.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable 'excelData' to a file named 'Employees.xlsx'. The data includes a header and the existing file should be overwritten if it exists.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "4384f7e024b8255f36ea07e2946dc45a233f5429b75ceb8aaebae97b999f01f0",
    "Created": "2023-10-10T14:44:59.2316626Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write  %excelData% to Employees.xlsx, has header, overwrite",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"Employees.xlsx\"},\n    {\"Type\": \"Object\", \"Name\": \"variableToWriteToExcel\", \"Value\": \"%excelData%\"},\n    {\"Type\": \"String\", \"Name\": \"sheetName\", \"Value\": \"Sheet1\"},\n    {\"Type\": \"Boolean\", \"Name\": \"printHeader\", \"Value\": true},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"Employees.xlsx\"},\n    {\"Type\": \"Object\", \"Name\": \"variableToWriteToExcel\", \"Value\": \"%excelData%\"},\n    {\"Type\": \"String\", \"Name\": \"sheetName\", \"Value\": \"Sheet1\"},\n    {\"Type\": \"Boolean\", \"Name\": \"printHeader\", \"Value\": true},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n]}",
    "hash": "5f12f94f406de094423097b253f2cff8d6198bb4470f72562bd4daea0e372fbc",
    "Created": "2023-10-10T14:45:11.9977108Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to  demo.xlsx, %csvData%,  overwrite file",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%csvData%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to the file named demo.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variable %csvData% to the file named demo.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "e214450a2b9138a9cbbc9d1a69377b825c52f7b1dade88219c65db96648958e7",
    "Created": "2023-10-10T14:46:30.8735104Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to  demo.xlsx, %csvData%,  overwrite file",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##\r\n## defined variables ##\r\ncsvData(Object), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"demo.xlsx\"},\n{\"Type\": \"Object\",\n\"Name\": \"variableToWriteToExcel\",\n\"Value\": \"%csvData%\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"overwrite\",\n\"Value\": true}]}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"path\",\n\"Value\": \"demo.xlsx\"},\n{\"Type\": \"Object\",\n\"Name\": \"variableToWriteToExcel\",\n\"Value\": \"%csvData%\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"overwrite\",\n\"Value\": true}]}",
    "hash": "ef7ac89a21d0b115ed4e82b59c3871dd93fa413021afb73d4795b32296ea9737",
    "Created": "2023-10-10T14:46:38.5997214Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to  demo2.xlsx, data: %excelData%, %csvData%, overwrite file",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%csvData%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variables %excelData% and %csvData% to the file named demo2.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"WriteToExcel\",\n\"StepDescription\": \"Write the data stored in the variables %excelData% and %csvData% to the file named demo2.xlsx. If the file already exists, overwrite it.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "2a57cc2b2afa0f3e64c34c30b68fdb4c42ba4f2076d4c17d4dedb6c7e6cda106",
    "Created": "2023-10-10T14:46:51.8253329Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to  demo2.xlsx, data: %excelData%, %csvData%, overwrite file",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##\r\n## defined variables ##\r\ncsvData(Object), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo2.xlsx\"},\n    {\"Type\": \"Object\", \"Name\": \"variableToWriteToExcel\", \"Value\": \"%excelData%\"},\n    {\"Type\": \"String\", \"Name\": \"sheetName\", \"Value\": \"Sheet1\"},\n    {\"Type\": \"Boolean\", \"Name\": \"printHeader\", \"Value\": true},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n],\n\"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"WriteExcelFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"demo2.xlsx\"},\n    {\"Type\": \"Object\", \"Name\": \"variableToWriteToExcel\", \"Value\": \"%excelData%\"},\n    {\"Type\": \"String\", \"Name\": \"sheetName\", \"Value\": \"Sheet1\"},\n    {\"Type\": \"Boolean\", \"Name\": \"printHeader\", \"Value\": true},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": true}\n],\n\"ReturnValue\": null}",
    "hash": "2dd8d1686cb3e778b089b52ed6e2b43d247418144343b1c3c435236ba100bf5a",
    "Created": "2023-10-10T14:47:04.7034375Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete demo.xlsx",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "4e6fbe2013cf56d86bd99bd30c74c22a3cbaf5c74006af4bcb32474b2fcbfdca",
    "Created": "2023-10-10T16:28:22.9293782Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: delete demo2.xlsx",
      "assistant": "## functions available defined in csharp ##\r\nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nList`1 ReadMultipleTextFiles(String folderPath, String filePattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFile(String sourceFileName, String destFileName) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo2.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"DeleteFile\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"fileName\",\n\"Value\": \"demo2.xlsx\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"throwErrorOnNotFound\",\n\"Value\": false}]}",
    "hash": "16eef0636b946654d779271d5e52285ebb3585e359af86f86ed5c2c05074eb18",
    "Created": "2023-10-10T16:28:29.1452278Z"
  }
]