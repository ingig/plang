{
  "Action": {
    "FunctionName": "EndTransaction",
    "Parameters": [],
    "ReturnValue": null
  },
  "Text": "end transaction",
  "Reload": false,
  "LlmQuestion": {
    "type": "PLang.Modules.BaseBuilder",
    "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
    "question": "command: end transaction",
    "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2? Parameters) \nInt32 Update(String sql, Dictionary`2? Parameters) \nInt32 Delete(String sql, Dictionary`2? Parameters) \nInt32 Insert(String sql, Dictionary`2? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n\nCreate SQL statement that works with System.Data.SQLite.SQLiteConnection.\r\nYou MUST provide Parameters if SQL has @parameter.\r\nChoose the best method to use, if the method is not provided that fits the SQL, you can use Execute to run SQL statement.\r\n",
    "model": "gpt-4",
    "caching": true,
    "Reload": false,
    "PreviousResult": null,
    "RawResponse": null
  },
  "RunOnBuild": false
}