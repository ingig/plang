{
  "Action": {
    "FunctionName": "GetBalanceInWei",
    "Parameters": [
      {
        "Type": "String",
        "Name": "address",
        "Value": "0x50041223216d8bfd392544562d70fda452df5042"
      }
    ],
    "ReturnValue": {
      "Type": "BigInteger",
      "VariableName": "maticBalance"
    }
  },
  "Text": "get wei balance of 0x50041223216d8bfd392544562d70fda452df5042, write to %maticBalance%",
  "Reload": false,
  "LlmQuestion": {
    "type": "PLang.Modules.BaseBuilder",
    "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
    "question": "command: get wei balance of 0x50041223216d8bfd392544562d70fda452df5042, write to %maticBalance%",
    "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddressOrSymbol, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject NameOfSmartContract(String contractAddressOrSymbol) \nObject TotalSupplyOnSmartContract(String contractAddressOrSymbol) \nObject GetMyBalanceOnSmartContract(String contractAddressOrSymbol) \nObject BalanceOfOnSmartContract(String contractAddressOrSymbol, String addressToCheckBalanceOf) \nObject BalanceOfBatchOnSmartContract(String contractAddressOrSymbol, String[] addresses, BigInteger[] ids) \nObject IsApprovedForAllOnSmartContract(String contractAddressOrSymbol, String accountAddress, String operatorAddress) \nObject CecimalsOnSmartContract(String contractAddressOrSymbol) \nObject AllowanceFromSmartContract(String contractAddressOrSymbol, String from, String to, BigInteger value) \nObject SymbolOnSmartContract(String contractAddressOrSymbol) \nObject SupportsInterfaceOnSmartContract(String contractAddressOrSymbol, String interfaceId) \nObject GetUriOnSmartContract(String contractAddressOrSymbol, BigInteger id) \nObject GetApprovedOnSmartContract(String contractAddressOrSymbol) \nObject ApproveSmartContract(String contractAddressOrSymbol, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject MintSmartContract(String contractAddressOrSymbol, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject BurnSmartContract(String contractAddressOrSymbol, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject TransferSmartContract(String contractAddressOrSymbol, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject TransferFromSmartContract(String contractAddressOrSymbol, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject SafeTransferFromErc721SmartContract(String contractAddressOrSymbol, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject SafeTransferFromErc1155SmartContract(String contractAddressOrSymbol, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject SafeBatchTransferFromSmartContract(String contractAddressOrSymbol, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject SetApprovalForAllOnSmartContract(String contractAddressOrSymbol, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddressOrSymbol, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddressOrSymbol, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetCurrentAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%maticBalance%\r\n## defined variables ##\n# RPC servers available #\r\n[{\"IsDefault\":true,\"Name\":\"Mumbai - Polygon testnet\",\"Url\":\"wss://polygon-mumbai-bor.publicnode.com\",\"ChainId\":80001,\"IsTestNet\":true,\"HexChainId\":\"13881\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Matic (Polygon) mainnet\",\"Url\":\"wss://polygon-bor.publicnode.com\",\"ChainId\":137,\"IsTestNet\":false,\"HexChainId\":\"89\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Ethereum mainnet\",\"Url\":\"wss://ethereum.publicnode.com\",\"ChainId\":1,\"IsTestNet\":false,\"HexChainId\":\"1\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Ethereum testnet (Goerli)\",\"Url\":\"wss://ethereum-goerli.publicnode.com\",\"ChainId\":5,\"IsTestNet\":true,\"HexChainId\":\"5\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Binance mainnet\",\"Url\":\"wss://bsc.publicnode.com\",\"ChainId\":56,\"IsTestNet\":false,\"HexChainId\":\"38\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Binance testnet\",\"Url\":\"wss://bsc-testnet.publicnode.com\",\"ChainId\":97,\"IsTestNet\":true,\"HexChainId\":\"61\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Arbitrum One mainnet\",\"Url\":\"wss://arbitrum-one.publicnode.com\",\"ChainId\":42161,\"IsTestNet\":false,\"HexChainId\":\"A4B1\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Arbitrum Goerli testnet\",\"Url\":\"wss://arbitrum-goerli.publicnode.com\",\"ChainId\":421613,\"IsTestNet\":true,\"HexChainId\":\"66EED\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Optimism (OP) mainnet\",\"Url\":\"wss://optimism.publicnode.com\",\"ChainId\":10,\"IsTestNet\":false,\"HexChainId\":\"A\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Optimism (OP) Goerli testnet\",\"Url\":\"wss://optimism-goerli.publicnode.com\",\"ChainId\":420,\"IsTestNet\":true,\"HexChainId\":\"1A4\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Avalanche C-Chain mainnet\",\"Url\":\"wss://avalanche-c-chain.publicnode.com\",\"ChainId\":43114,\"IsTestNet\":false,\"HexChainId\":\"A86A\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Avalanche Fuji testnet\",\"Url\":\"wss://avalanche-fuji-c-chain.publicnode.com\",\"ChainId\":43113,\"IsTestNet\":true,\"HexChainId\":\"A869\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Gnosis mainnet\",\"Url\":\"wss://rpc.gnosischain.com/wss\",\"ChainId\":100,\"IsTestNet\":false,\"HexChainId\":\"64\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Gnosis Chiado Testnet\",\"Url\":\"wss://rpc.chiadochain.net/wss\",\"ChainId\":10200,\"IsTestNet\":true,\"HexChainId\":\"27D8\",\"Setting\":null}]\r\n# RPC servers available #\r\n# wallet addresses #\r\n[{\"IsDefault\":false,\"IsArchived\":false,\"Addresses\":[\"0xcf2d3b69EC22678c8A9604eFef0e022fB4F90eBF\",\"0xbf503214a184EE7Dfc6cF3d2d669F013350c36B8\",\"0x835ef89ed803151a81653406491996D8c9667256\",\"0x566F107cC3edD33ddce173D0174Ef84b083ee5b7\",\"0xe16D087ecad74400270F6AEd02c0dD804b4C2C5C\",\"0x1ecDF0a093B2255AF29CA1Da5F4cc11f3D5733c7\",\"0x34BF4C9Aa6cD36f83da528248fbed666786AB422\",\"0x8e4347b003fFC19fe3E03020954f1460E5443b20\",\"0x83199F6345213cD8D4469Bd1267eF962275bF09D\",\"0xA9c973e2a93CBd213dA6F89E61bb8126e72785d3\",\"0x4952DA262F6436b080ebB7D8404Ca8D6739446A3\",\"0x829BAAe0F27401B7CC01eA82F4E4A13795414EA3\",\"0xA0E629d812C7617f8621771DA9404854E81bda9e\",\"0xe94b6eDb85b9a4c0F82c9ef22961134d06f48d39\",\"0x6EC98bfd8e8C9bDfe7c5e0f33Be1e35A7eb2063E\",\"0x943c6102243811B469c0824C5222cdD2e0F96683\",\"0x6038e333DDb7840Dc465c0e25dc8E2fb3F6A020f\",\"0x7A471CE745d7f0ADb8320DA1dE4004B7a6AebC2B\",\"0x66Df6864C6792382f15dE9542e3f25C86B573A20\",\"0x80a7C85C67CDe99b081b2f0DA74c532280066e21\"],\"Name\":\"First\",\"Seed\":\"\",\"PrivateKey\":\"\"}]\r\n# wallet addresses #",
    "model": "gpt-4",
    "caching": true,
    "Reload": false,
    "PreviousResult": null,
    "RawResponse": "{\"FunctionName\": \"GetBalanceInWei\", \n\"Parameters\": [{\"Type\": \"String\", \n\"Name\": \"address\", \n\"Value\": \"0x50041223216d8bfd392544562d70fda452df5042\"}], \n\"ReturnValue\": {\"Type\": \"BigInteger\", \n\"VariableName\": \"maticBalance\"}}"
  },
  "RunOnBuild": false
}