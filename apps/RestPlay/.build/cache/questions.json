[
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "start webserver, 9090",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"StartWebserver\",\n\"StepDescription\": \"Start a webserver on port 9090\",\n\"Modules\": [\"PLang.Modules.WebserverModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"StartWebserver\",\n\"StepDescription\": \"Start a webserver on port 9090\",\n\"Modules\": [\"PLang.Modules.WebserverModule\"],\n\"WaitForExecution\": true}",
    "hash": "b53093ab3e1d3fe92372611fb7bd264124bdba3232fffe5371c58f31239a5d77",
    "Created": "2023-10-26T18:57:33.0590702Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: start webserver, 9090",
      "assistant": "## functions available defined in csharp ##\r\nvoid StartWebserver(String? scheme = http, String? host = localhost, Int32? port = 8080, Int32? maxContentLengthInBytes = 4096, String? defaultResponseContentEncoding = utf-8, List`1<String>? publicPaths) \nvoid WriteToResponseHeader(String key, String value) \nString GetUserIp(String? headerKey)  // headerKey should be null unless specified by user. \nString GetRequestHeader(String key) \nString GetCookie(String name) \nvoid WriteCookie(String name, String value, Int32? expiresInSeconds = 604800) \nvoid DeleteCookie(String name, String value) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"StartWebserver\",\n\"Parameters\": [{\"Type\": \"Int32\", \"Name\": \"port\", \"Value\": 9090}],\n\"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"StartWebserver\",\n\"Parameters\": [{\"Type\": \"Int32\", \"Name\": \"port\", \"Value\": 9090}],\n\"ReturnValue\": null}",
    "hash": "cabe9d96c4c61ae1872dcc2694a90053ddcb0816f4f6317da6b8eb66623bfcfc",
    "Created": "2023-10-26T18:57:37.5023596Z"
  },
  {
    "question": {
      "type": "GoalApiInfo",
      "system": "Determine the Method and write description of this api, using the content of the file.\r\nMethod can be: GET, POST, DELETE, PUT, PATCH, OPTIONS, HEAD. The content will describe a function in multiple steps.\r\nFrom the first line, you should extrapolate the CacheControl if the user defines it.\r\nCacheControlPrivateOrPublic: public or private\r\nNoCacheOrNoStore: no-cache or no-store\r\n\r\nYou MUST response in JSON, scheme: {\"Method\" : string, \"Description\" : string, \"ContentEncoding\" : utf-8, \"ContentType\" : application/json, \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null, }\r\n",
      "question": "Users\nselect all users, newest first, write to %users%\nwrite out %users%",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"Method\" : \"GET\", \"Description\" : \"This API endpoint is used to retrieve all users, sorted by newest first. The results are written to a variable called 'users', which is then outputted.\", \"ContentEncoding\" : \"utf-8\", \"ContentType\" : \"application/json\", \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null}"
    },
    "answer": "{\"Method\" : \"GET\", \"Description\" : \"This API endpoint is used to retrieve all users, sorted by newest first. The results are written to a variable called 'users', which is then outputted.\", \"ContentEncoding\" : \"utf-8\", \"ContentType\" : \"application/json\", \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null}",
    "hash": "2377f33026f2df23b1717bf39457779e5598340fe457cdf4fec038691af796c9",
    "Created": "2023-10-26T18:57:50.4772412Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "select all users, newest first, write to %users%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"SelectUsers\",\n\"StepDescription\": \"Select all users from the database, ordered by newest first, and write the result to the variable %users%\",\n\"Modules\": [\"PLang.Modules.DbModule\", \"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"SelectUsers\",\n\"StepDescription\": \"Select all users from the database, ordered by newest first, and write the result to the variable %users%\",\n\"Modules\": [\"PLang.Modules.DbModule\", \"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}",
    "hash": "a3d5ac9492de665f9665a8379ecd4c663ebcbce4ec05eedf47ed2c5677609a1c",
    "Created": "2023-10-26T18:57:57.3939481Z"
  },
  {
    "question": {
      "type": "DbModule",
      "system": "",
      "question": "\r\nGive me sql statement to list all the tables and views in my database data.sqlite on System.Data.SQLite.SQLiteConnection.\r\nGive me sql statement on how to get all column names and type in a table\r\nTable name should be @TableName, database name is @Database if needed as parameters\r\n\r\nGive your response in JSON, scheme\r\n{\"SelectTablesAndViewsInMyDatabaseSqlStatement\": string,\n\"SelectColumnsFromTablesSqlStatement\": string}\r\n\r\nBe concise",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"SelectTablesAndViewsInMyDatabaseSqlStatement\": \"SELECT name FROM sqlite_master WHERE type IN ('table','view');\",\n\"SelectColumnsFromTablesSqlStatement\": \"PRAGMA table_info(@TableName);\"\n}"
    },
    "answer": "{\n\"SelectTablesAndViewsInMyDatabaseSqlStatement\": \"SELECT name FROM sqlite_master WHERE type IN ('table','view');\",\n\"SelectColumnsFromTablesSqlStatement\": \"PRAGMA table_info(@TableName);\"\n}",
    "hash": "b6fe8a733da4c5d751b481a7f14e2d43197f336f17119e7c20ae801bcd5ec759",
    "Created": "2023-10-26T18:58:03.6500658Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: select all users, newest first, write to %users%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Select\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"Select\", \"TableNames\": [\"users\"]}",
    "hash": "b040b659480021c1126df713cd222254908e5a7bc61c2c07cda37d5657266f3c",
    "Created": "2023-10-26T18:58:06.2110635Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "create table users,\n    columns: Name, Email, Created(default now)",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateUsersTable\",\n\"StepDescription\": \"Create a table named 'users' with the columns 'Name', 'Email', and 'Created'. The 'Created' column should have a default value of the current timestamp.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateUsersTable\",\n\"StepDescription\": \"Create a table named 'users' with the columns 'Name', 'Email', and 'Created'. The 'Created' column should have a default value of the current timestamp.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}",
    "hash": "da7f27effb2fb5dce97776cf25f9f33be7f7378cbf6844c71d73594624383b06",
    "Created": "2023-10-26T19:00:58.4675949Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: create table users,\n    columns: Name, Email, Created(default now)",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CreateTable\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"CreateTable\", \"TableNames\": [\"users\"]}",
    "hash": "741c4a42ee05252fff0bd8f7e9b4a7640598bbe68dbe4dfa4c4ccb3059352835",
    "Created": "2023-10-26T19:01:00.9119272Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Map user command to this c# function: \r\n\r\n## csharp function ##\r\nvoid CreateTable(String sql)  \r\n## csharp function ##\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%.\r\nYou MUST generate a valid sql statement for SQLiteConnection.\r\nYou MUST add id to create statement.\r\nIf id is not defined then add id to the create statement. \r\nThe id MUST NOT be auto incremental, but is primary key.\r\nThe id should be datatype long/bigint/.. which fits SQLiteConnection.\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: create table users,\n    columns: Name, Email, Created(default now)",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CreateTable\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"sql\",\n\"Value\": \"CREATE TABLE users (id INTEGER PRIMARY KEY, Name TEXT, Email TEXT, Created DATETIME DEFAULT CURRENT_TIMESTAMP)\"}]}"
    },
    "answer": "{\"FunctionName\": \"CreateTable\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"sql\",\n\"Value\": \"CREATE TABLE users (id INTEGER PRIMARY KEY, Name TEXT, Email TEXT, Created DATETIME DEFAULT CURRENT_TIMESTAMP)\"}]}",
    "hash": "c6dca694c0939b450ac4623df82c34d1ec472913dbdcbce51327e69467a86a73",
    "Created": "2023-10-26T19:01:08.1738486Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "Call !GenerateData",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CallGenerateData\",\n\"StepDescription\": \"This step involves calling the function 'GenerateData'.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CallGenerateData\",\n\"StepDescription\": \"This step involves calling the function 'GenerateData'.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "b88190c61f4f8271f91b12c924157717dde835231c6287c91ca6a3b950ac8b8f",
    "Created": "2023-10-26T19:01:12.8599668Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CallGoalModule.Builder",
      "system": "\r\n Parse user command, to match the parameters needed for the RunGoal function\r\n\r\nVariables are defined with starting and ending %\r\n\r\nGoalName should be prefixed with !\r\nParameters are optional, they are key value of a variable, if user does not define key, then it is same as value.\r\n\r\n== Examples starts ==\r\n!ParseText then ParseText is goalName, no parameters\r\n!Gmail.Search %query%, then Gmail.Search is goalName,  %query% is key and value in parameters\r\nFolder.Search q=%fileName%, then key is q, and value is %fileName%\r\n== Examples ends ==\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: Call !GenerateData",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunGoal(String goalName, Dictionary`2<String>? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 0) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"GenerateData\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}"
    },
    "answer": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"GenerateData\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}",
    "hash": "31b3b577c2e6111e8d6da5358edfb1e329eefca167ca9856c2064150d7eaee2a",
    "Created": "2023-10-26T19:01:21.2242371Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[code] create list with 10 users, they have Name and Email, write to %dummyUsers%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.CodeModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateDummyUsers\",\n\"StepDescription\": \"Create a list of 10 dummy users with Name and Email properties and store it in the variable %dummyUsers%\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateDummyUsers\",\n\"StepDescription\": \"Create a list of 10 dummy users with Name and Email properties and store it in the variable %dummyUsers%\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}",
    "hash": "003c608d96b528d34d3ef6a302c414f4f5e14ff292090721ddcd742bd3e95dca",
    "Created": "2023-10-26T19:01:28.7682119Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c# code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nAll strings in Implementation need be in single quote ('). The Code implementation cannot include double quote (\")\r\n\r\nBe Concise\n\nYou MUST respond in JSON, scheme:\r\n {\"Name\": string,\n\"Implementation\": string,\n\"Using\"?: string[],\n\"Assemblies\"?: string[],\n\"GoalToCallOnTrue\"?: string,\n\"GoalToCallOnFalse\"?: string}",
      "question": "command: [code] create list with 10 users, they have Name and Email, write to %dummyUsers%",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"Name\": \"CreateDummyUsers\",\n\"Implementation\": \"public static void Process(out List<User> dummyUsers) { dummyUsers = new List<User>(); for(int i = 0; i < 10; i++) { dummyUsers.Add(new User { Name = 'User' + i, Email = 'user' + i + '@example.com' }); } }\",\n\"Using\": [\"System.Collections.Generic\"],\n\"Assemblies\": [\"System.Runtime.dll\"]}"
    },
    "answer": "{\"Name\": \"CreateDummyUsers\",\n\"Implementation\": \"public static void Process(out List<User> dummyUsers) { dummyUsers = new List<User>(); for(int i = 0; i < 10; i++) { dummyUsers.Add(new User { Name = 'User' + i, Email = 'user' + i + '@example.com' }); } }\",\n\"Using\": [\"System.Collections.Generic\"],\n\"Assemblies\": [\"System.Runtime.dll\"]}",
    "hash": "0baf6724758b053ffc0374e3c389c3c70b8cf1164631643c164fec5716b51e6d",
    "Created": "2023-10-26T19:01:39.3353798Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c# code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nAll strings in Implementation need be in single quote ('). The Code implementation cannot include double quote (\")\r\n\r\nBe Concise\n\nYou MUST respond in JSON, scheme:\r\n {\"Name\": string,\n\"Implementation\": string,\n\"Using\"?: string[],\n\"Assemblies\"?: string[],\n\"GoalToCallOnTrue\"?: string,\n\"GoalToCallOnFalse\"?: string}",
      "question": "command: [code] create list with 10 users, they have Name and Email, write to %dummyUsers%",
      "assistant": "\nName cannot be: CreateDummyUsers\n== Code generated by ChatGPT in previous request, start ==\nusing System.Collections.Generic;\r\npublic static class CreateDummyUsers {\n\t public static void Process(out List<User> dummyUsers) { dummyUsers = new List<User>(); for(int i = 0; i < 10; i++) { dummyUsers.Add(new User { Name = \"User\" + i, Email = \"user\" + i + \"@example.com\" }); } } \n}\n== Code generated ends ==\nBut it had errors:\n(3,39): error CS0246: The type or namespace name 'User' could not be found (are you missing a using directive or an assembly reference?)\n(3,81): error CS0246: The type or namespace name 'User' could not be found (are you missing a using directive or an assembly reference?)\n(3,139): error CS0246: The type or namespace name 'User' could not be found (are you missing a using directive or an assembly reference?)\n\nFix the error and generate the C# code again.",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"Name\": \"CreateDummyUsers\",\n\"Implementation\": \"public static void Process(out List<User> dummyUsers) { dummyUsers = new List<User>(); for(int i = 0; i < 10; i++) { dummyUsers.Add(new User { Name = 'User' + i, Email = 'user' + i + '@example.com' }); } }\",\n\"Using\": [\"System.Collections.Generic\"],\n\"Assemblies\": [\"System.dll\"]}"
    },
    "answer": "{\"Name\": \"CreateDummyUsers\",\n\"Implementation\": \"public static void Process(out List<User> dummyUsers) { dummyUsers = new List<User>(); for(int i = 0; i < 10; i++) { dummyUsers.Add(new User { Name = 'User' + i, Email = 'user' + i + '@example.com' }); } }\",\n\"Using\": [\"System.Collections.Generic\"],\n\"Assemblies\": [\"System.dll\"]}",
    "hash": "0e80e0443e7d759c6bd9c308943f8ba37c863b4ada1596018611e4b07187fcf9",
    "Created": "2023-10-26T19:01:53.0134774Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c# code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nAll strings in Implementation need be in single quote ('). The Code implementation cannot include double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\n\r\nBe Concise\n\nYou MUST respond in JSON, scheme:\r\n {\"Name\": string,\n\"Implementation\": string,\n\"Using\"?: string[],\n\"Assemblies\"?: string[],\n\"GoalToCallOnTrue\"?: string,\n\"GoalToCallOnFalse\"?: string}",
      "question": "command: [code] create list with 10 users, they have Name and Email, write to %dummyUsers%",
      "assistant": "\nName cannot be: CreateDummyUsers\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"Name\": \"CreateDummyUsers\",\n  \"Implementation\": \"public static void Process(out dynamic dummyUsers) { dummyUsers = new List<dynamic>(); for(int i = 0; i < 10; i++) { dummyUsers.Add(new { Name = 'User' + i, Email = 'user' + i + '@example.com' }); } if(dummyUsers == null || dummyUsers.Count != 10) { throw new Exception('Failed to create dummy users.'); } }\",\n  \"Using\": [\"System\", \"System.Collections.Generic\"],\n  \"GoalToCallOnTrue\": \"DummyUsersCreated\",\n  \"GoalToCallOnFalse\": \"DummyUsersCreationFailed\"\n}"
    },
    "answer": "{\n  \"Name\": \"CreateDummyUsers\",\n  \"Implementation\": \"public static void Process(out dynamic dummyUsers) { dummyUsers = new List<dynamic>(); for(int i = 0; i < 10; i++) { dummyUsers.Add(new { Name = 'User' + i, Email = 'user' + i + '@example.com' }); } if(dummyUsers == null || dummyUsers.Count != 10) { throw new Exception('Failed to create dummy users.'); } }\",\n  \"Using\": [\"System\", \"System.Collections.Generic\"],\n  \"GoalToCallOnTrue\": \"DummyUsersCreated\",\n  \"GoalToCallOnFalse\": \"DummyUsersCreationFailed\"\n}",
    "hash": "20c12c006f835b8ea328a06eac98bb513454f4e827947e9864405807b7e7ee33",
    "Created": "2023-10-26T19:03:50.8258724Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[code] create list with 10 users,\n    they have Name and Email, Use name from the TV show Office\n    write to %dummyUsers%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.CodeModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateDummyUsers\",\n\"StepDescription\": \"Create a list of 10 dummy users with Name and Email. The names should be taken from the TV show 'Office'. The list should be written to the variable %dummyUsers%.\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateDummyUsers\",\n\"StepDescription\": \"Create a list of 10 dummy users with Name and Email. The names should be taken from the TV show 'Office'. The list should be written to the variable %dummyUsers%.\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}",
    "hash": "f61a22a295e80795c4176b88f21091a583a7e7a16cf14bccd4f5e3e4d32777eb",
    "Created": "2023-10-26T19:04:22.7835712Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[code] create list with 10 users,\n    they have Name and Email.\n    Use names from the TV show The Office\n    write to %dummyUsers%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.CodeModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateDummyUsers\",\n\"StepDescription\": \"Create a list of 10 dummy users with Name and Email fields. The names should be inspired by characters from the TV show 'The Office'. The list should be written to the variable %dummyUsers%.\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateDummyUsers\",\n\"StepDescription\": \"Create a list of 10 dummy users with Name and Email fields. The names should be inspired by characters from the TV show 'The Office'. The list should be written to the variable %dummyUsers%.\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}",
    "hash": "f4ed825ebd6b9a8f31449084e907e7b9888798bb0c451f9adcfe35c0b9afede0",
    "Created": "2023-10-26T19:04:49.9552386Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c# code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nAll strings in Implementation need be in single quote ('). The Code implementation cannot include double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\n\r\nBe Concise\n\nYou MUST respond in JSON, scheme:\r\n {\"Name\": string,\n\"Implementation\": string,\n\"Using\"?: string[],\n\"Assemblies\"?: string[],\n\"GoalToCallOnTrue\"?: string,\n\"GoalToCallOnFalse\"?: string}",
      "question": "command: [code] create list with 10 users,\n    they have Name and Email.\n    Use names from the TV show The Office\n    write to %dummyUsers%",
      "assistant": "\nName cannot be: CreateDummyUsers\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"Name\": \"CreateDummyUsers\",\n  \"Implementation\": @\"\n    public static class CreateDummyUsers\n    {\n        public static void Process(out dynamic dummyUsers)\n        {\n            dummyUsers = new List<dynamic>();\n            var names = new List<string> { 'Michael', 'Dwight', 'Jim', 'Pam', 'Ryan', 'Andy', 'Robert', 'Angela', 'Kevin', 'Oscar' };\n            for (int i = 0; i < 10; i++)\n            {\n                dummyUsers.Add(new { Name = names[i], Email = names[i] + '@dundermifflin.com' });\n            }\n        }\n    }\",\n  \"Using\": [\"System\", \"System.Collections.Generic\"]\n}"
    },
    "answer": "{\n  \"Name\": \"CreateDummyUsers\",\n  \"Implementation\": @\"\n    public static class CreateDummyUsers\n    {\n        public static void Process(out dynamic dummyUsers)\n        {\n            dummyUsers = new List<dynamic>();\n            var names = new List<string> { 'Michael', 'Dwight', 'Jim', 'Pam', 'Ryan', 'Andy', 'Robert', 'Angela', 'Kevin', 'Oscar' };\n            for (int i = 0; i < 10; i++)\n            {\n                dummyUsers.Add(new { Name = names[i], Email = names[i] + '@dundermifflin.com' });\n            }\n        }\n    }\",\n  \"Using\": [\"System\", \"System.Collections.Generic\"]\n}",
    "hash": "8a973e6625b5a637467ff7048a13ad2c642bd434c460f50cd1eae3e939930e0e",
    "Created": "2023-10-26T19:05:08.9507465Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "foreach %dummyUsers% call InsertData",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ForEachInsertData\",\n\"StepDescription\": \"For each user in the dummyUsers list, call the InsertData function.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"ForEachInsertData\",\n\"StepDescription\": \"For each user in the dummyUsers list, call the InsertData function.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "75a12d708f0b7f21e835698e62f9fb40236873a4ccad85ff243968b44d2f26cd",
    "Created": "2023-10-26T19:05:17.6962522Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: foreach %dummyUsers% call InsertData",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunLoop(String variableToLoopThrough, String goalNameToCall, Dictionary`2<String>? parameters) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"RunLoop\",\n\"Parameters\": [\n    {\n    \"Type\": \"String\",\n    \"Name\": \"variableToLoopThrough\",\n    \"Value\": \"%dummyUsers%\"\n    },\n    {\n    \"Type\": \"String\",\n    \"Name\": \"goalNameToCall\",\n    \"Value\": \"InsertData\"\n    },\n    {\n    \"Type\": \"Dictionary`2<String>\",\n    \"Name\": \"parameters\",\n    \"Value\": null\n    }\n]\n}"
    },
    "answer": "{\n\"FunctionName\": \"RunLoop\",\n\"Parameters\": [\n    {\n    \"Type\": \"String\",\n    \"Name\": \"variableToLoopThrough\",\n    \"Value\": \"%dummyUsers%\"\n    },\n    {\n    \"Type\": \"String\",\n    \"Name\": \"goalNameToCall\",\n    \"Value\": \"InsertData\"\n    },\n    {\n    \"Type\": \"Dictionary`2<String>\",\n    \"Name\": \"parameters\",\n    \"Value\": null\n    }\n]\n}",
    "hash": "b447bf443412d7b78d9d9b2184c4ddaa2d40f159f4ef573978aae136cead153e",
    "Created": "2023-10-26T19:05:30.8339612Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "insert into users %item.Name%, %item.Email%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"InsertIntoUsers\",\n\"StepDescription\": \"Insert the values of item.Name and item.Email into the 'users' table in the database.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"InsertIntoUsers\",\n\"StepDescription\": \"Insert the values of item.Name and item.Email into the 'users' table in the database.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}",
    "hash": "bd7335202a56909df3d86d5b6783d92dfb28bbbf07c9864e9b56f91eccb226c0",
    "Created": "2023-10-26T19:05:36.6299874Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: insert into users %item.Name%, %item.Email%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Insert\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"Insert\", \"TableNames\": [\"users\"]}",
    "hash": "2dae97af5d921dabe63e9db5d41813675bca15c5156b70f47aef0235e485fde1",
    "Created": "2023-10-26T19:05:39.7536603Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: insert into users %item.Name%, %item.Email%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n\n## table & views in db start ##\r\n[{\"name\":\"ble\"}]\r\n## table & view in db end ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Insert\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"Insert\", \"TableNames\": [\"users\"]}",
    "hash": "99b56642e9056f05eb4bc5f450ba2d92aa83e91a2a613e16b5cfc98f5b3c7fd6",
    "Created": "2023-10-26T19:14:21.4007241Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: select all users, newest first, write to %users%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n\n## table & views in db start ##\r\n[{\"name\":\"ble\"}]\r\n## table & view in db end ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Select\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"Select\", \"TableNames\": [\"users\"]}",
    "hash": "89bcccf4280a7b51ec89e06f68dd4ff07af5804ecc393cc89b20500b4229cde8",
    "Created": "2023-10-26T19:37:52.3680395Z"
  },
  {
    "question": {
      "type": "GoalApiInfo",
      "system": "Determine the Method and write description of this api, using the content of the file.\r\nMethod can be: GET, POST, DELETE, PUT, PATCH, OPTIONS, HEAD. The content will describe a function in multiple steps.\r\nFrom the first line, you should extrapolate the CacheControl if the user defines it.\r\nCacheControlPrivateOrPublic: public or private\r\nNoCacheOrNoStore: no-cache or no-store\r\n\r\nYou MUST response in JSON, scheme: {\"Method\" : string, \"Description\" : string, \"ContentEncoding\" : utf-8, \"ContentType\" : application/json, \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null, }\r\n",
      "question": "Users\nwrite out %users%",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"Method\" : \"POST\", \"Description\" : \"This API is used to write out users. It takes the user data as input and writes it out.\", \"ContentEncoding\" : \"utf-8\", \"ContentType\" : \"application/json\", \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null, }"
    },
    "answer": "{\"Method\" : \"POST\", \"Description\" : \"This API is used to write out users. It takes the user data as input and writes it out.\", \"ContentEncoding\" : \"utf-8\", \"ContentType\" : \"application/json\", \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null, }",
    "hash": "35b356b9a4eba1bb389fd2abce98105e605beb1d97d990e91cc3deee13395c55",
    "Created": "2023-10-26T19:38:30.294038Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %users%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutUsers\",\n\"StepDescription\": \"This step involves writing out the value of the variable 'users'.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutUsers\",\n\"StepDescription\": \"This step involves writing out the value of the variable 'users'.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "bedc11e92b007f4da92c0b7ef740f0cc540befe6b686db0ff14ce77ea3340042",
    "Created": "2023-10-26T19:38:35.6447791Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %users%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"%users%\"}],\n\"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"%users%\"}],\n\"ReturnValue\": null}",
    "hash": "419703372362f5ff381af72e8f07a59659a17414204d50d8c0a3ecad6fa2aa6b",
    "Created": "2023-10-26T19:38:40.9364182Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "get http://localhost:9090/api/Users, write to %users%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetUsers\",\n\"StepDescription\": \"Make a GET request to the URL 'http://localhost:9090/api/Users' and store the response in the variable '%users%'.\",\n\"Modules\": [\"PLang.Modules.HttpModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GetUsers\",\n\"StepDescription\": \"Make a GET request to the URL 'http://localhost:9090/api/Users' and store the response in the variable '%users%'.\",\n\"Modules\": [\"PLang.Modules.HttpModule\"],\n\"WaitForExecution\": true}",
    "hash": "a69b28427d28cfa654dc3f9f1fadd5d1f3fd43d1180691d4ec03b5711ce76d22",
    "Created": "2023-10-26T19:38:48.9191443Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HttpModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: get http://localhost:9090/api/Users, write to %users%",
      "assistant": "## functions available defined in csharp ##\r\nObject Post(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Patch(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Get(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Option(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Head(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Put(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Delete(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject PostMultipartFormData(String url, Object data, String? httpMethod = POST, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, Int32? timeoutInSeconds = 100)  // Post a FileStream to url. When a variable is defined with @ sign, it defines that it should be a FileStream.. \nObject Request(String url, String method, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \n\r\n## functions available ends ##\nUser might use JSONPath to describe how to load variable in ReturnValue, keep the $ for the ReturnValue.VariableName.\\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Get\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"url\", \"Value\": \"http://localhost:9090/api/Users\"},\n    {\"Type\": \"Object\", \"Name\": \"data\", \"Value\": null},\n    {\"Type\": \"Boolean\", \"Name\": \"signRequest\", \"Value\": false},\n    {\"Type\": \"Dictionary`2<String>\", \"Name\": \"headers\", \"Value\": null},\n    {\"Type\": \"String\", \"Name\": \"encoding\", \"Value\": \"utf-8\"},\n    {\"Type\": \"String\", \"Name\": \"contentType\", \"Value\": \"application/json\"},\n    {\"Type\": \"Int32\", \"Name\": \"timeoutInSeconds\", \"Value\": 100}\n],\n\"ReturnValue\": {\"Type\": \"Object\", \"VariableName\": \"users\"}}"
    },
    "answer": "{\"FunctionName\": \"Get\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"url\", \"Value\": \"http://localhost:9090/api/Users\"},\n    {\"Type\": \"Object\", \"Name\": \"data\", \"Value\": null},\n    {\"Type\": \"Boolean\", \"Name\": \"signRequest\", \"Value\": false},\n    {\"Type\": \"Dictionary`2<String>\", \"Name\": \"headers\", \"Value\": null},\n    {\"Type\": \"String\", \"Name\": \"encoding\", \"Value\": \"utf-8\"},\n    {\"Type\": \"String\", \"Name\": \"contentType\", \"Value\": \"application/json\"},\n    {\"Type\": \"Int32\", \"Name\": \"timeoutInSeconds\", \"Value\": 100}\n],\n\"ReturnValue\": {\"Type\": \"Object\", \"VariableName\": \"users\"}}",
    "hash": "69c83268f1589f35c47f233782f646215a839ad97eb9820d9ea1954162db630e",
    "Created": "2023-10-26T19:39:10.8969148Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %users%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutUsers\",\n\"StepDescription\": \"This step involves writing out the value of the variable %users%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutUsers\",\n\"StepDescription\": \"This step involves writing out the value of the variable %users%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "1371b64f9294291d3d1f91349ad198f2bd1dd3470edf9f41582940b6a7d5b2e1",
    "Created": "2023-10-26T19:39:15.0972513Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %users%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nusers(Object), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"%users%\"\n    }\n],\n\"ReturnValue\": null\n}"
    },
    "answer": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"%users%\"\n    }\n],\n\"ReturnValue\": null\n}",
    "hash": "93e859f2533e3163424a744e7b9a6f52190c4d805383ceac6acd7cc79a8e4c90",
    "Created": "2023-10-26T19:39:21.8593325Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: select all users, newest first, write to %users%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n\n## table & views in db start ##\r\n[{\"name\":\"ble\"},{\"name\":\"__Events__\"},{\"name\":\"users\"}]\r\n## table & view in db end ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Select\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"Select\", \"TableNames\": [\"users\"]}",
    "hash": "37ffdf5e4f7e1c35af64aab78c142c835916261be333efbf554516b783a06b54",
    "Created": "2023-10-26T19:40:03.2398408Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Map user command to this c# function: \r\n\r\n## csharp function ##\r\ndynamic Select(String sql, Dictionary`2? Parameters, bool selectOneRow_Top1OrLimit1 = false)  \r\n## csharp function ##\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%.\r\nYou MUST generate a valid sql statement for SQLiteConnection.\r\nYou MUST provide Parameters if SQL has @parameter.\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: select all users, newest first, write to %users%",
      "assistant": "# examples #\r\n\"select everything from tableX\" => sql: \"SELECT * FROM tableX\"\r\n\"select from tableB where id=%id%\" => sql: \"SELECT * FROM tableB WHERE id=@id\"\r\n# examples #\n### users table info starts ###\n[{\"cid\":0,\"name\":\"id\",\"type\":\"INTEGER\",\"notnull\":0,\"dflt_value\":null,\"pk\":1},{\"cid\":1,\"name\":\"Name\",\"type\":\"TEXT\",\"notnull\":0,\"dflt_value\":null,\"pk\":0},{\"cid\":2,\"name\":\"Email\",\"type\":\"TEXT\",\"notnull\":0,\"dflt_value\":null,\"pk\":0},{\"cid\":3,\"name\":\"Created\",\"type\":\"DATETIME\",\"notnull\":0,\"dflt_value\":\"CURRENT_TIMESTAMP\",\"pk\":0}]\n### table info ends ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Select\", \n\"Parameters\": [\n    {\"Type\": \"string\", \n    \"Name\": \"sql\", \n    \"Value\": \"SELECT * FROM users ORDER BY Created DESC\"}, \n    {\"Type\": \"Dictionary`2\", \n    \"Name\": \"Parameters\", \n    \"Value\": null}, \n    {\"Type\": \"bool\", \n    \"Name\": \"selectOneRow_Top1OrLimit1\", \n    \"Value\": false}\n], \n\"ReturnValue\": {\"Type\": \"dynamic\", \n\"VariableName\": \"users\"}}"
    },
    "answer": "{\"FunctionName\": \"Select\", \n\"Parameters\": [\n    {\"Type\": \"string\", \n    \"Name\": \"sql\", \n    \"Value\": \"SELECT * FROM users ORDER BY Created DESC\"}, \n    {\"Type\": \"Dictionary`2\", \n    \"Name\": \"Parameters\", \n    \"Value\": null}, \n    {\"Type\": \"bool\", \n    \"Name\": \"selectOneRow_Top1OrLimit1\", \n    \"Value\": false}\n], \n\"ReturnValue\": {\"Type\": \"dynamic\", \n\"VariableName\": \"users\"}}",
    "hash": "4765a714466ab3a61ad7b755c047bea36d050a5a9bc3e626d60bfe778e2308b2",
    "Created": "2023-10-26T19:40:19.6613844Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %users%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(dynamic), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutUsers\",\n\"StepDescription\": \"This step involves writing out the value of the variable %users%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutUsers\",\n\"StepDescription\": \"This step involves writing out the value of the variable %users%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "832af8f1e14dea4d67e64397bd03aa3b04469794534ad5358b619c600bc6587f",
    "Created": "2023-10-26T19:40:25.4598842Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %users%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nusers(dynamic), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"%users%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}"
    },
    "answer": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"text\",\n    \"Value\": \"%users%\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    }\n]\n}",
    "hash": "c8125480c21383fa4455c4e9a47e4a37ab057bb91e1bc4d3e2c6d2f8f164663f",
    "Created": "2023-10-26T19:40:33.3020743Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: insert into users %item.Name%, %item.Email%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n\n## table & views in db start ##\r\n[{\"name\":\"ble\"},{\"name\":\"__Events__\"},{\"name\":\"users\"}]\r\n## table & view in db end ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Insert\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"Insert\", \"TableNames\": [\"users\"]}",
    "hash": "1584dd0513b78415bd23c23d32f3ba0611e8c6d4f7d86ab59dc0e46b1950e9fd",
    "Created": "2023-10-26T19:41:57.7604515Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Map user command to this c# function: \r\n\r\n## csharp function ##\r\nInt32 Insert(String sql, Dictionary`2? Parameters)  \r\n## csharp function ##\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%.\r\nYou MUST modify the user command by adding id to the sql statement and parameter %id%.\r\nYou MUST generate a valid sql statement for SQLiteConnection.\r\nYou MUST provide Parameters if SQL has @parameter.\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: insert into users %item.Name%, %item.Email%",
      "assistant": "# examples #\r\n\"insert into users, name=%name%\" => sql: \"insert into users (id, name) values (@id, @name)\"\r\n\"insert into tableX, %phone%, write to %rows%\" => sql: \"insert into tableX (id, phone) values (@id, @phone)\"\r\n# examples #\n### users table info starts ###\n[{\"cid\":0,\"name\":\"id\",\"type\":\"INTEGER\",\"notnull\":0,\"dflt_value\":null,\"pk\":1},{\"cid\":1,\"name\":\"Name\",\"type\":\"TEXT\",\"notnull\":0,\"dflt_value\":null,\"pk\":0},{\"cid\":2,\"name\":\"Email\",\"type\":\"TEXT\",\"notnull\":0,\"dflt_value\":null,\"pk\":0},{\"cid\":3,\"name\":\"Created\",\"type\":\"DATETIME\",\"notnull\":0,\"dflt_value\":\"CURRENT_TIMESTAMP\",\"pk\":0}]\n### table info ends ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Insert\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"sql\", \"Value\": \"insert into users (id, Name, Email) values (@id, @Name, @Email)\"},\n    {\"Type\": \"Dictionary`2\", \"Name\": \"Parameters\", \"Value\": {\"@id\": \"%id%\", \"@Name\": \"%item.Name%\", \"@Email\": \"%item.Email%\"}}\n],\n\"ReturnValue\": {\"Type\": \"Int32\", \"VariableName\": \"rows\"}}"
    },
    "answer": "{\"FunctionName\": \"Insert\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"sql\", \"Value\": \"insert into users (id, Name, Email) values (@id, @Name, @Email)\"},\n    {\"Type\": \"Dictionary`2\", \"Name\": \"Parameters\", \"Value\": {\"@id\": \"%id%\", \"@Name\": \"%item.Name%\", \"@Email\": \"%item.Email%\"}}\n],\n\"ReturnValue\": {\"Type\": \"Int32\", \"VariableName\": \"rows\"}}",
    "hash": "0e7d5b9455817d7a85fae2a87c51f180fd2acc21b926431517ebcc04d6252b99",
    "Created": "2023-10-26T19:42:09.4260009Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "insert into  users %item.Name%, %item.Email%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"InsertIntoUsers\",\n\"StepDescription\": \"Insert the values of 'item.Name' and 'item.Email' into the 'users' table in the database.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"InsertIntoUsers\",\n\"StepDescription\": \"Insert the values of 'item.Name' and 'item.Email' into the 'users' table in the database.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}",
    "hash": "7b1f4178d872869c789c8ecad015a78bcd30e10b2a6e781ecd6743d907a551da",
    "Created": "2023-10-26T19:46:48.8714405Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: insert into  users %item.Name%, %item.Email%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n\n## table & views in db start ##\r\n[{\"name\":\"ble\"}]\r\n## table & view in db end ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Insert\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"Insert\", \"TableNames\": [\"users\"]}",
    "hash": "6bd9ae566107b796ce3d6841b8c09962c27a28ccb44e2de13da686aba104392c",
    "Created": "2023-10-26T19:46:50.9595747Z"
  },
  {
    "question": {
      "type": "GoalApiInfo",
      "system": "Determine the Method and write description of this api, using the content of the file.\r\nMethod can be: GET, POST, DELETE, PUT, PATCH, OPTIONS, HEAD. The content will describe a function in multiple steps.\r\nFrom the first line, you should extrapolate the CacheControl if the user defines it.\r\nCacheControlPrivateOrPublic: public or private\r\nNoCacheOrNoStore: no-cache or no-store\r\n\r\nYou MUST response in JSON, scheme: {\"Method\" : string, \"Description\" : string, \"ContentEncoding\" : utf-8, \"ContentType\" : application/json, \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null, }\r\n",
      "question": "Users - GET\nselect all users, newest first, write to %users%\nwrite out %users%",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"Method\" : \"GET\", \"Description\" : \"This API endpoint is used to retrieve all users, sorted by newest first. The results are written to a variable called 'users', which is then outputted.\", \"ContentEncoding\" : \"utf-8\", \"ContentType\" : \"application/json\", \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null}"
    },
    "answer": "{\"Method\" : \"GET\", \"Description\" : \"This API endpoint is used to retrieve all users, sorted by newest first. The results are written to a variable called 'users', which is then outputted.\", \"ContentEncoding\" : \"utf-8\", \"ContentType\" : \"application/json\", \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null}",
    "hash": "dbc2efbfc90af9f4c0c43accd0c8f7fff6e4cd8885c60842d1ea1f519234c284",
    "Created": "2023-10-26T19:50:09.3377773Z"
  },
  {
    "question": {
      "type": "Events",
      "system": "\r\nUser will provide event binding, you will be provided with c# model to map the code to. \r\n\r\nEventType is required\r\nEventScope is required\r\nGoalToBindTo is required. This can a specific Goal or more generic, such as bind to all goals in specific folder.\r\nGoalToCall is required. This should be a specific goal, should start with !. Example: !AppName.GoalName.  \r\nStepNumber & StepText reference a specific step that the user wants to bind to\r\nIncludePrivate defines if user wants to include private goals, he needs to specify this specifically to be true\r\n\r\nYou must respond in json, scheme {\"EventType\" : eventtype, \"EventScope\" : eventscope, \"GoalToBindTo\" : string, \"GoalToCall\" : string, \"IncludePrivate\" : False, \"StepNumber\" : null, \"StepText\" : null, \"WaitForExecution\" : True, \"RunOnlyInDebugMode\" : False, }",
      "question": "before each step, include private goals,call !SendDebug, only in debug mode",
      "assistant": "\t\r\nMap correct number to EventType and EventScope\r\n\r\nenum EventType { Before = 0, After = 1, OnError = 40 }\r\nenum EventScope { StartOfApp = 0, EndOfApp = 1,RunningApp = 2,\tGoal = 20, Step = 30 }\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"EventType\" : 0, \"EventScope\" : 30, \"GoalToBindTo\" : \"*\", \"GoalToCall\" : \"!SendDebug\", \"IncludePrivate\" : true, \"StepNumber\" : null, \"StepText\" : null, \"WaitForExecution\" : true, \"RunOnlyInDebugMode\" : true}"
    },
    "answer": "{\"EventType\" : 0, \"EventScope\" : 30, \"GoalToBindTo\" : \"*\", \"GoalToCall\" : \"!SendDebug\", \"IncludePrivate\" : true, \"StepNumber\" : null, \"StepText\" : null, \"WaitForExecution\" : true, \"RunOnlyInDebugMode\" : true}",
    "hash": "fb260c5b23c9894d6924ffef7f53c083e8390b29408d1cb6900bc324b94e47d0",
    "Created": "2023-10-26T20:19:30.1448462Z"
  },
  {
    "question": {
      "type": "Events",
      "system": "\r\nUser will provide event binding, you will be provided with c# model to map the code to. \r\n\r\nEventType is required\r\nEventScope is required\r\nGoalToBindTo is required. This can a specific Goal or more generic, such as bind to all goals in specific folder.\r\nGoalToCall is required. This should be a specific goal, should start with !. Example: !AppName.GoalName.  \r\nStepNumber & StepText reference a specific step that the user wants to bind to\r\nIncludePrivate defines if user wants to include private goals, he needs to specify this specifically to be true\r\n\r\nYou must respond in json, scheme {\"EventType\" : eventtype, \"EventScope\" : eventscope, \"GoalToBindTo\" : string, \"GoalToCall\" : string, \"IncludePrivate\" : False, \"StepNumber\" : null, \"StepText\" : null, \"WaitForExecution\" : True, \"RunOnlyInDebugMode\" : False, }",
      "question": "before goal ends, include private goals, call !SendDebug, only in debug mode",
      "assistant": "\t\r\nMap correct number to EventType and EventScope\r\n\r\nenum EventType { Before = 0, After = 1, OnError = 40 }\r\nenum EventScope { StartOfApp = 0, EndOfApp = 1,RunningApp = 2,\tGoal = 20, Step = 30 }\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"EventType\" : 1, \"EventScope\" : 20, \"GoalToBindTo\" : \"*\", \"GoalToCall\" : \"!SendDebug\", \"IncludePrivate\" : true, \"StepNumber\" : null, \"StepText\" : null, \"WaitForExecution\" : true, \"RunOnlyInDebugMode\" : true}"
    },
    "answer": "{\"EventType\" : 1, \"EventScope\" : 20, \"GoalToBindTo\" : \"*\", \"GoalToCall\" : \"!SendDebug\", \"IncludePrivate\" : true, \"StepNumber\" : null, \"StepText\" : null, \"WaitForExecution\" : true, \"RunOnlyInDebugMode\" : true}",
    "hash": "9d79438660f6794cc99a7c1c5163860ec15767977b4537512ae9f5f4bc3953f2",
    "Created": "2023-10-26T20:19:38.8603395Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write  out %users%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(dynamic), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutUsers\",\n\"StepDescription\": \"This step involves writing out the value of the variable %users%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutUsers\",\n\"StepDescription\": \"This step involves writing out the value of the variable %users%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "ac324398b8e33dbd8628a9e4c2a5f766a0f0f6fbd01b28ac1f8ec4d622f6c058",
    "Created": "2023-10-26T21:52:50.8234016Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write  out %users%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(Object? content, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nusers(dynamic), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"Object\",\n\"Name\": \"content\",\n\"Value\": \"%users%\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"Object\",\n\"Name\": \"content\",\n\"Value\": \"%users%\"}]}",
    "hash": "f3333802f563be2b76ae771100b2ac8052b10fae3e0528911f38f446fbad981c",
    "Created": "2023-10-26T21:52:54.3074739Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write  out %users%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutUsers\",\n\"StepDescription\": \"This step involves writing out the value of the variable %users%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutUsers\",\n\"StepDescription\": \"This step involves writing out the value of the variable %users%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "16f3ab1d32991cff732525fc76b12c503fc44c4ce2ad35e604f3218a1753016e",
    "Created": "2023-10-26T21:53:47.6923843Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write  out %users%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(Object? content, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nusers(Object), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"Object\",\n\"Name\": \"content\",\n\"Value\": \"%users%\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"Object\",\n\"Name\": \"content\",\n\"Value\": \"%users%\"}]}",
    "hash": "04cc17aa924e2ae9c25c6b96250016316d47b607bb3577e9988f1d7f37fc3703",
    "Created": "2023-10-26T21:53:51.0645391Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "center content vertical and horizontal",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CenterContent\",\n\"StepDescription\": \"Center the content both vertically and horizontally.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CenterContent\",\n\"StepDescription\": \"Center the content both vertically and horizontally.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "4045e4d4c566c169b59b60e0a9b54c465b581b9652bc352b8f1c575b465a2acd",
    "Created": "2023-10-27T11:03:26.1439467Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as global.plang.get('%variableName%').\r\n\r\nGoals are prefixed with !, they are call for calling a method, e.g. Call !NewUser. They should call the funcion global.plang.callMethod(name:string, parameters:object)\r\n\r\nif the current step has sister or sub steps, then put %step1%, %stepN% instead of the html that will be provided by sister or sub steps later. Do not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) logo.png, 150px\n- (%step3%) table,\n    header: Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome\r\n### For context ###\r\n### Razor ###\r\nvariable in plural are lists, single is an object. use the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in tasks)\r\n{\r\n    <tr>\r\n        <td>@task .Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = true;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    %step2%\n</div>\n```\n\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n```javascript\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    %step2%\n</div>\n```\n\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n```javascript\n```",
    "hash": "684b06268fc9f70a40ffdc33e4b4506a9e728e10d430fd3ad7e5fa90cc233c56",
    "Created": "2023-10-27T11:03:37.6349877Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "logo.png, 150px",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ResizeImage\",\n\"StepDescription\": \"Resize the image 'logo.png' to a width of 150 pixels.\",\n\"Modules\": [\"PLang.Modules.FileModule\", \"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"ResizeImage\",\n\"StepDescription\": \"Resize the image 'logo.png' to a width of 150 pixels.\",\n\"Modules\": [\"PLang.Modules.FileModule\", \"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}",
    "hash": "5062941d19519dfe2d13d14bdfea0cc47e306c5cfda64a9d5ebb46dfed0abea2",
    "Created": "2023-10-27T11:03:44.3659268Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: logo.png, 150px",
      "assistant": "## functions available defined in csharp ##\r\nBoolean RequestAccessToPath(String path) \nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid SaveMultipleFiles(List`1<FileInfo> files) \nList`1 ReadMultipleTextFiles(String folderPath, String searchPattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFiles(String directoryPath, String destinationPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False, Boolean? overwriteFiles = False) \nvoid CopyFile(String sourceFileName, String destFileName, Boolean? createDirectoryIfNotExisting = False, Boolean? overwriteFile = False) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String directoryPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"N/A\", \"Parameters\": [], \"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"N/A\", \"Parameters\": [], \"ReturnValue\": null}",
    "hash": "0dfb6b4181fff0f04e4a6c3614802ab4983a19ad32bb945d79ae177ab4c68dcd",
    "Created": "2023-10-27T11:03:47.3997974Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "logo.png, 150px",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ResizeImage\",\n\"StepDescription\": \"Resize the image 'logo.png' to a width of 150 pixels.\",\n\"Modules\": [\"PLang.Modules.ImageProcessingModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"ResizeImage\",\n\"StepDescription\": \"Resize the image 'logo.png' to a width of 150 pixels.\",\n\"Modules\": [\"PLang.Modules.ImageProcessingModule\"],\n\"WaitForExecution\": true}",
    "hash": "f12acc4d428d1b5cb85c9940f6eac3f4b343ed536da40e1413a355d9af01dcfa",
    "Created": "2023-10-27T11:03:52.1195492Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: logo.png, 150px",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ResizeImage\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"filePath\",\n\"Value\": \"logo.png\"},\n{\"Type\": \"int\",\n\"Name\": \"newSize\",\n\"Value\": 150}],\n\"ReturnValue\": {\"Type\": \"Image\",\n\"VariableName\": \"resizedImage\"}}"
    },
    "answer": "{\"FunctionName\": \"ResizeImage\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"filePath\",\n\"Value\": \"logo.png\"},\n{\"Type\": \"int\",\n\"Name\": \"newSize\",\n\"Value\": 150}],\n\"ReturnValue\": {\"Type\": \"Image\",\n\"VariableName\": \"resizedImage\"}}",
    "hash": "ed45e9f636a36319c42c806086d8f23f1d3f7da5b280034130e836c5b0e3debd",
    "Created": "2023-10-27T11:04:01.8019199Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "logo.png, 150px",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ResizeImage\",\n\"StepDescription\": \"Resize the image 'logo.png' to a width of 150px.\",\n\"Modules\": [\"PLang.Modules.ImageProcessingModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"ResizeImage\",\n\"StepDescription\": \"Resize the image 'logo.png' to a width of 150px.\",\n\"Modules\": [\"PLang.Modules.ImageProcessingModule\"],\n\"WaitForExecution\": true}",
    "hash": "146049e5285cfb4c8e6f6cab7d36e63bcbf2c970208755eb81f93bbd6eb908e4",
    "Created": "2023-10-27T11:05:49.4115545Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "img logo.png, 150px",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ImageResize\",\n\"StepDescription\": \"Resize the image 'logo.png' to a width of 150px\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"ImageResize\",\n\"StepDescription\": \"Resize the image 'logo.png' to a width of 150px\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "11e5c306b8957a22e309c86585a82b61a33449114e29e646d201a805821157de",
    "Created": "2023-10-27T11:06:10.334699Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as global.plang.get('%variableName%').\r\n\r\nGoals are prefixed with !, they are call for calling a method, e.g. Call !NewUser. They should call the funcion global.plang.callMethod(name:string, parameters:object)\r\n\r\nif the current step has sister or sub steps, then put %step1%, %stepN% instead of the html that will be provided by sister or sub steps later. Do not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: img logo.png, 150px",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img logo.png, 150px\n- (%step3%) table,\n    header: Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome\r\n### For context ###\r\n### Razor ###\r\nvariable in plural are lists, single is an object. use the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in tasks)\r\n{\r\n    <tr>\r\n        <td>@task .Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = true;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<img src=\"logo.png\" class=\"img-fluid\" alt=\"Logo\" style=\"width: 150px;\">\n```\n```css\n```\n```javascript\n```"
    },
    "answer": "```html\n<img src=\"logo.png\" class=\"img-fluid\" alt=\"Logo\" style=\"width: 150px;\">\n```\n```css\n```\n```javascript\n```",
    "hash": "6044899a244d65416f35659a4bdd2421b84a863301728684892ceb99da4c1664",
    "Created": "2023-10-27T11:06:15.0105873Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "table,\n    header: Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GenerateUserTable\",\n\"StepDescription\": \"Generate a table with headers 'Name', 'Email', 'Created', and 'Actions'. The body of the table will be filled with user data. The 'Created' column will display the creation date in a short date format. The 'Actions' column will have two actions, 'Edit' and 'Delete', each associated with a specific user id. Font Awesome will be used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GenerateUserTable\",\n\"StepDescription\": \"Generate a table with headers 'Name', 'Email', 'Created', and 'Actions'. The body of the table will be filled with user data. The 'Created' column will display the creation date in a short date format. The 'Actions' column will have two actions, 'Edit' and 'Delete', each associated with a specific user id. Font Awesome will be used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "6de0a5e070fdc9a209dbaac0f92d7345905e6c770905dc5ad701ae7e247e403f",
    "Created": "2023-10-27T11:06:26.7316249Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as global.plang.get('%variableName%').\r\n\r\nGoals are prefixed with !, they are call for calling a method, e.g. Call !NewUser. They should call the funcion global.plang.callMethod(name:string, parameters:object)\r\n\r\nif the current step has sister or sub steps, then put %step1%, %stepN% instead of the html that will be provided by sister or sub steps later. Do not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table,\n    header: Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img logo.png, 150px\n- (%step3%) table,\n    header: Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome\r\n### For context ###\r\n### Razor ###\r\nvariable in plural are lists, single is an object. use the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in tasks)\r\n{\r\n    <tr>\r\n        <td>@task .Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = true;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button onclick=\"global.plang.callMethod('Edit', {id: @user.id})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button onclick=\"global.plang.callMethod('Delete', {id: @user.id})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```javascript\n// No javascript needed\n```\n```css\n/* No css needed */\n```"
    },
    "answer": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button onclick=\"global.plang.callMethod('Edit', {id: @user.id})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button onclick=\"global.plang.callMethod('Delete', {id: @user.id})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```javascript\n// No javascript needed\n```\n```css\n/* No css needed */\n```",
    "hash": "7ca05278dc4f6737921f8b7d479e33f15b0f1b84d31a81f88ab50e911f09122c",
    "Created": "2023-10-27T11:06:59.6478416Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "start window app, call LoadUsers",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"StartWindowAppAndLoadUsers\",\n\"StepDescription\": \"This step involves starting a window application and then calling the function 'LoadUsers' within the application.\",\n\"Modules\": [\"PLang.Modules.WindowAppModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"StartWindowAppAndLoadUsers\",\n\"StepDescription\": \"This step involves starting a window application and then calling the function 'LoadUsers' within the application.\",\n\"Modules\": [\"PLang.Modules.WindowAppModule\"],\n\"WaitForExecution\": true}",
    "hash": "e40e98d1a08e3e0dfcdd430760fe6983dc08af4bcd7fec507b531cc8f974421d",
    "Created": "2023-10-27T11:09:24.9517686Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: start window app, call LoadUsers",
      "assistant": "## functions available defined in csharp ##\r\nvoid CreateNewWindow() \nString RunWindowApp(String goalName, Dictionary`2<String>? parameters)  // goalName is required. It is one word. Example: !CallGoal, or !Google.Search. Do not use the names in your response unless defined by user. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"RunWindowApp\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"goalName\",\n\"Value\": \"LoadUsers\"},\n{\"Type\": \"Dictionary`2<String>\",\n\"Name\": \"parameters\",\n\"Value\": null}],\n\"ReturnValue\": {\"Type\": \"string\",\n\"VariableName\": \"appResult\"}}"
    },
    "answer": "{\"FunctionName\": \"RunWindowApp\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"goalName\",\n\"Value\": \"LoadUsers\"},\n{\"Type\": \"Dictionary`2<String>\",\n\"Name\": \"parameters\",\n\"Value\": null}],\n\"ReturnValue\": {\"Type\": \"string\",\n\"VariableName\": \"appResult\"}}",
    "hash": "bae15e6b1e6f2b816729957b922fdf9755a347e94c35916623f4e2529b6e5ef5",
    "Created": "2023-10-27T11:09:34.8175853Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "call api/users",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CallApiUsers\",\n\"StepDescription\": \"Make a call to the 'users' endpoint of an API.\",\n\"Modules\": [\"PLang.Modules.HttpModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CallApiUsers\",\n\"StepDescription\": \"Make a call to the 'users' endpoint of an API.\",\n\"Modules\": [\"PLang.Modules.HttpModule\"],\n\"WaitForExecution\": true}",
    "hash": "eea70c83eacdc5e2d26fc660b47d594bfb3f8109b535092df644aff82f6856c7",
    "Created": "2023-10-27T11:09:41.5407547Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HttpModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: call api/users",
      "assistant": "## functions available defined in csharp ##\r\nObject Post(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Patch(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Get(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Option(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Head(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Put(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject Delete(String url, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \nObject PostMultipartFormData(String url, Object data, String? httpMethod = POST, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, Int32? timeoutInSeconds = 100)  // Post a FileStream to url. When a variable is defined with @ sign, it defines that it should be a FileStream.. \nObject Request(String url, String method, Object? data, Boolean? signRequest = False, Dictionary`2<String>? headers, String? encoding = utf-8, String? contentType = application/json, Int32? timeoutInSeconds = 100) \n\r\n## functions available ends ##\nUser might use JSONPath to describe how to load variable in ReturnValue, keep the $ for the ReturnValue.VariableName.\\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Get\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"url\",\n\"Value\": \"api/users\"},\n{\"Type\": \"Object\",\n\"Name\": \"data\",\n\"Value\": null},\n{\"Type\": \"Boolean\",\n\"Name\": \"signRequest\",\n\"Value\": false},\n{\"Type\": \"Dictionary`2<String>\",\n\"Name\": \"headers\",\n\"Value\": null},\n{\"Type\": \"String\",\n\"Name\": \"encoding\",\n\"Value\": \"utf-8\"},\n{\"Type\": \"String\",\n\"Name\": \"contentType\",\n\"Value\": \"application/json\"},\n{\"Type\": \"Int32\",\n\"Name\": \"timeoutInSeconds\",\n\"Value\": 100}],\n\"ReturnValue\": {\"Type\": \"Object\",\n\"VariableName\": \"$\"}}"
    },
    "answer": "{\"FunctionName\": \"Get\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"url\",\n\"Value\": \"api/users\"},\n{\"Type\": \"Object\",\n\"Name\": \"data\",\n\"Value\": null},\n{\"Type\": \"Boolean\",\n\"Name\": \"signRequest\",\n\"Value\": false},\n{\"Type\": \"Dictionary`2<String>\",\n\"Name\": \"headers\",\n\"Value\": null},\n{\"Type\": \"String\",\n\"Name\": \"encoding\",\n\"Value\": \"utf-8\"},\n{\"Type\": \"String\",\n\"Name\": \"contentType\",\n\"Value\": \"application/json\"},\n{\"Type\": \"Int32\",\n\"Name\": \"timeoutInSeconds\",\n\"Value\": 100}],\n\"ReturnValue\": {\"Type\": \"Object\",\n\"VariableName\": \"$\"}}",
    "hash": "0dc07765f434ce009311f60ebd990010ca5af710107b7cdc31ea7d63dd05e2bf",
    "Created": "2023-10-27T11:10:02.2702353Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "call !api/users",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CallApiUsers\",\n\"StepDescription\": \"Call the 'api/users' function\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CallApiUsers\",\n\"StepDescription\": \"Call the 'api/users' function\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "0924f81d8bd7e623ef3c5a6af69480e41c1035178850a5105cf51ea172cdf67f",
    "Created": "2023-10-27T11:10:11.1342036Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CallGoalModule.Builder",
      "system": "\r\n Parse user command, to match the parameters needed for the RunGoal function\r\n\r\nVariables are defined with starting and ending %\r\n\r\nGoalName should be prefixed with !\r\nParameters are optional, they are key value of a variable, if user does not define key, then it is same as value.\r\n\r\n== Examples starts ==\r\n!ParseText then ParseText is goalName, no parameters\r\n!Gmail.Search %query%, then Gmail.Search is goalName,  %query% is key and value in parameters\r\nFolder.Search q=%fileName%, then key is q, and value is %fileName%\r\n== Examples ends ==\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: call !api/users",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunGoal(String goalName, Dictionary`2<String>? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 0) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"api/users\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    },\n    {\n      \"Type\": \"Boolean\",\n      \"Name\": \"waitForExecution\",\n      \"Value\": true\n    },\n    {\n      \"Type\": \"Int32\",\n      \"Name\": \"delayWhenNotWaitingInMilliseconds\",\n      \"Value\": 0\n    }\n  ]\n}"
    },
    "answer": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"api/users\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    },\n    {\n      \"Type\": \"Boolean\",\n      \"Name\": \"waitForExecution\",\n      \"Value\": true\n    },\n    {\n      \"Type\": \"Int32\",\n      \"Name\": \"delayWhenNotWaitingInMilliseconds\",\n      \"Value\": 0\n    }\n  ]\n}",
    "hash": "acd525988d8efef192cb9ec4fb979ea3b2bda928cb852dd47deeda93b69b0726",
    "Created": "2023-10-27T11:10:26.9248653Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "call !ui/users",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CallUIUsers\",\n\"StepDescription\": \"This step involves calling the 'ui/users' function.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CallUIUsers\",\n\"StepDescription\": \"This step involves calling the 'ui/users' function.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "cc873ad37e81d6f566586024524000d89f92854c7c4ff53be04b077c95637d38",
    "Created": "2023-10-27T11:10:33.7603026Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CallGoalModule.Builder",
      "system": "\r\n Parse user command, to match the parameters needed for the RunGoal function\r\n\r\nVariables are defined with starting and ending %\r\n\r\nGoalName should be prefixed with !\r\nParameters are optional, they are key value of a variable, if user does not define key, then it is same as value.\r\n\r\n== Examples starts ==\r\n!ParseText then ParseText is goalName, no parameters\r\n!Gmail.Search %query%, then Gmail.Search is goalName,  %query% is key and value in parameters\r\nFolder.Search q=%fileName%, then key is q, and value is %fileName%\r\n== Examples ends ==\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: call !ui/users",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunGoal(String goalName, Dictionary`2<String>? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 0) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"ui/users\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    },\n    {\n      \"Type\": \"Boolean\",\n      \"Name\": \"waitForExecution\",\n      \"Value\": true\n    },\n    {\n      \"Type\": \"Int32\",\n      \"Name\": \"delayWhenNotWaitingInMilliseconds\",\n      \"Value\": 0\n    }\n  ]\n}"
    },
    "answer": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"ui/users\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    },\n    {\n      \"Type\": \"Boolean\",\n      \"Name\": \"waitForExecution\",\n      \"Value\": true\n    },\n    {\n      \"Type\": \"Int32\",\n      \"Name\": \"delayWhenNotWaitingInMilliseconds\",\n      \"Value\": 0\n    }\n  ]\n}",
    "hash": "cf57fe82b1385eda68528fd058e8ee40b6f1f73c5813c1b88bfddde94b633889",
    "Created": "2023-10-27T11:10:48.9760768Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "divider",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"DefineDivider\",\n\"StepDescription\": \"This step involves defining a divider in the code or user interface.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"DefineDivider\",\n\"StepDescription\": \"This step involves defining a divider in the code or user interface.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "1d6469f83424c0d8bea7f1d3d06fa5f14a6a2eb75207ad3d75be6cce9462b0fb",
    "Created": "2023-10-27T13:46:00.8449661Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as global.plang.get('%variableName%').\r\n\r\nGoals are prefixed with !, they are call for calling a method, e.g. Call !NewUser. They should call the funcion global.plang.callMethod(name:string, parameters:object)\r\n\r\nif the current step has sister or sub steps, then put %step1%, %stepN% instead of the html that will be provided by sister or sub steps later. Do not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: divider",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img logo.png, 150px\n- (%step3%) divider\n- (%step4%) table,\n    header: Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome\r\n### For context ###\r\n### Razor ###\r\nvariable in plural are lists, single is an object. use the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in tasks)\r\n{\r\n    <tr>\r\n        <td>@task .Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = true;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<hr class=\"my-4\">\n```\n```css\n.my-4 {\n    margin-top: 1.5rem !important;\n    margin-bottom: 1.5rem !important;\n}\n```\n```javascript\n```"
    },
    "answer": "```html\n<hr class=\"my-4\">\n```\n```css\n.my-4 {\n    margin-top: 1.5rem !important;\n    margin-bottom: 1.5rem !important;\n}\n```\n```javascript\n```",
    "hash": "fbe113a5fa8d764ef8a190b55b8c5059851944afe0d2350c77c4f8cc0a8929c3",
    "Created": "2023-10-27T13:46:07.667185Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as global.plang.get('%variableName%').\r\n\r\nGoals are prefixed with !, they are call for calling a method, e.g. Call !NewUser. They should call the funcion global.plang.callMethod(name:string, parameters:object)\r\n\r\nif the current step has sister or sub steps, then put %step1%, %stepN% instead of the html that will be provided by sister or sub steps later. Do not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table,\n    header: Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img logo.png, 150px\n- (%step3%) divider\n- (%step4%) table,\n    header: Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome\r\n### For context ###\r\n### Razor ###\r\nvariable in plural are lists, single is an object. use the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in tasks)\r\n{\r\n    <tr>\r\n        <td>@task .Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = true;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button class=\"btn btn-primary\" onclick=\"global.plang.callMethod('Edit', {id: @user.id})\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"btn btn-danger\" onclick=\"global.plang.callMethod('Delete', {id: @user.id})\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```css\n.container {\n    margin-top: 20px;\n}\n```\n```javascript\n// No javascript needed\n```"
    },
    "answer": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button class=\"btn btn-primary\" onclick=\"global.plang.callMethod('Edit', {id: @user.id})\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"btn btn-danger\" onclick=\"global.plang.callMethod('Delete', {id: @user.id})\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```css\n.container {\n    margin-top: 20px;\n}\n```\n```javascript\n// No javascript needed\n```",
    "hash": "d22294caf50b8ca6d1af42db140a31a782c42868b9442f3a7133a8395eea3c69",
    "Created": "2023-10-27T13:46:40.3123141Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "table,\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateUserTable\",\n\"StepDescription\": \"Create a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a string date. The 'Actions' column contains links to 'Edit' and 'Delete' goals for each user, using their id. Font awesome is used for styling.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateUserTable\",\n\"StepDescription\": \"Create a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a string date. The 'Actions' column contains links to 'Edit' and 'Delete' goals for each user, using their id. Font awesome is used for styling.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "e319657066039e32be9f4e7e7f2f128355d329767f9fadc9e8ff4e77ea559644",
    "Created": "2023-10-27T13:54:12.8724193Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as global.plang.get('%variableName%').\r\n\r\nGoals are prefixed with !, they are call for calling a method, e.g. Call !NewUser. They should call the funcion global.plang.callMethod(name:string, parameters:object)\r\n\r\nif the current step has sister or sub steps, then put %step1%, %stepN% instead of the html that will be provided by sister or sub steps later. Do not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table,\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img logo.png, 150px\n- (%step3%) divider\n- (%step4%) table,\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task .Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button onclick=\"global.plang.callMethod('Edit', {id: @user.id})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button onclick=\"global.plang.callMethod('Delete', {id: @user.id})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```css\n.container {\n    width: 100%;\n    padding-right: 15px;\n    padding-left: 15px;\n    margin-right: auto;\n    margin-left: auto;\n}\n```\n```javascript\ndocument.querySelectorAll('.btn').forEach(button => {\n    button.addEventListener('click', event => {\n        event.preventDefault();\n    });\n});\n```"
    },
    "answer": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button onclick=\"global.plang.callMethod('Edit', {id: @user.id})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button onclick=\"global.plang.callMethod('Delete', {id: @user.id})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```css\n.container {\n    width: 100%;\n    padding-right: 15px;\n    padding-left: 15px;\n    margin-right: auto;\n    margin-left: auto;\n}\n```\n```javascript\ndocument.querySelectorAll('.btn').forEach(button => {\n    button.addEventListener('click', event => {\n        event.preventDefault();\n    });\n});\n```",
    "hash": "ba1922dbae52eafaba9afcf369bc8d4c3f4212310717c68af8c43b3583ba3181",
    "Created": "2023-10-27T13:54:45.6161337Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are call for calling a method, e.g. Call !NewUser. They should call the funcion callMethod(name:string, parameters:object)\r\n\r\nif the current step has sister or sub steps, then put %step1%, %stepN% instead of the html that will be provided by sister or sub steps later. Do not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table,\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img logo.png, 150px\n- (%step3%) divider\n- (%step4%) table,\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task .Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button onclick=\"callMethod('Edit', {id: '@user.id'})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button onclick=\"callMethod('Delete', {id: '@user.id'})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n\n```javascript\nfunction callMethod(name, parameters) {\n    // Implement the function to call the method with the given name and parameters\n}\n```\n\n```css\n.container {\n    width: 100%;\n    padding-right: 15px;\n    padding-left: 15px;\n    margin-right: auto;\n    margin-left: auto;\n}\n```"
    },
    "answer": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button onclick=\"callMethod('Edit', {id: '@user.id'})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button onclick=\"callMethod('Delete', {id: '@user.id'})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n\n```javascript\nfunction callMethod(name, parameters) {\n    // Implement the function to call the method with the given name and parameters\n}\n```\n\n```css\n.container {\n    width: 100%;\n    padding-right: 15px;\n    padding-left: 15px;\n    margin-right: auto;\n    margin-left: auto;\n}\n```",
    "hash": "c5d045171b936026e0b0379f830d78dd06c87bcbc12ca5ba393a2363f8c566a5",
    "Created": "2023-10-27T14:12:46.7073515Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "table,\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GenerateUserTable\",\n\"StepDescription\": \"Generate a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a short date string. The 'Actions' column contains links to 'Edit' and 'Delete' goals, each with the user's id as a parameter. Font Awesome is used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GenerateUserTable\",\n\"StepDescription\": \"Generate a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a short date string. The 'Actions' column contains links to 'Edit' and 'Delete' goals, each with the user's id as a parameter. Font Awesome is used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "aef3abced9ed36153f2eedb40fa1f428733ad0fa4cc59385703702d9a53cad9d",
    "Created": "2023-10-27T14:24:17.2660524Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\nif the current step has sister or sub steps, then put %step1%, %stepN% instead of the html that will be provided by sister or sub steps later. Do not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table,\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img logo.png, 150px\n- (%step3%) divider\n- (%step4%) table,\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task .Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button onclick=\"callGoal('Edit.goal', {id: @user.id})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button onclick=\"callGoal('Delete.goal', {id: @user.id})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```css\n.container {\n    width: 100%;\n    padding-right: 15px;\n    padding-left: 15px;\n    margin-right: auto;\n    margin-left: auto;\n}\n```\n```javascript\nfunction callGoal(name, parameters) {\n    // This function will be provided\n}\n```"
    },
    "answer": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button onclick=\"callGoal('Edit.goal', {id: @user.id})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button onclick=\"callGoal('Delete.goal', {id: @user.id})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```css\n.container {\n    width: 100%;\n    padding-right: 15px;\n    padding-left: 15px;\n    margin-right: auto;\n    margin-left: auto;\n}\n```\n```javascript\nfunction callGoal(name, parameters) {\n    // This function will be provided\n}\n```",
    "hash": "e25fa0a62bb56820a8cc749c3686a8c97a9eaa6492046515607077bb43051c46",
    "Created": "2023-10-27T14:24:56.5378689Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "center content vertical and horizontal",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CenterContent\",\n\"StepDescription\": \"This step involves centering the content both vertically and horizontally.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CenterContent\",\n\"StepDescription\": \"This step involves centering the content both vertically and horizontally.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "a7813ff8e4559310abf38a188a5101c2636e39fd3444405e84720632aa4c24e9",
    "Created": "2023-10-27T14:25:35.5284538Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\nif the current step has sister or sub steps, then put %step1%, %stepN% instead of the html that will be provided by sister or sub steps later. Do not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img logo.png, 150px\n- (%step3%) divider\n- (%step4%) table,\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task .Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    %step1%\n</div>\n```\n```css\nbody, html {\n    height: 100%;\n}\n```\n```javascript\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    %step1%\n</div>\n```\n```css\nbody, html {\n    height: 100%;\n}\n```\n```javascript\n```",
    "hash": "44360b7046b2bed078328651c5bb087c5d1e7ec7303d0ab1bb9e9e3569285008",
    "Created": "2023-10-27T14:25:43.1335282Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\nif the current step has sister or sub steps, then put %step1%, %step2%,..., %stepN% instead of the html that will be provided by sister or sub steps later. \r\nDo not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img logo.png, 150px\n- (%step3%) divider\n- (%step4%) table,\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    %step1%\n</div>\n```\n```css\nbody, html {\n    height: 100%;\n}\n```\n```javascript\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    %step1%\n</div>\n```\n```css\nbody, html {\n    height: 100%;\n}\n```\n```javascript\n```",
    "hash": "c5b9ffec561ebfa976191ee663fd7c297611c49b6a9584ef64fbcc9f95572db9",
    "Created": "2023-10-27T14:27:54.9785468Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "center  content vertical and horizontal",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CenterContent\",\n\"StepDescription\": \"Center the content both vertically and horizontally\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CenterContent\",\n\"StepDescription\": \"Center the content both vertically and horizontally\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "0d255311525a5d0f10ad780bea2f3f8c53ca0f05f64cf8edc81449253ba5b447",
    "Created": "2023-10-27T14:34:45.800018Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n%step0%,  must be included in the html%step0%,  must be included in the html%step0%,  must be included in the html must be in the html. They will be later replace by html content by different system.\r\nDo not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center  content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center  content vertical and horizontal\n- (%step2%) img  logo.png, 150px\n- (%step3%) divider, hr\n- (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    %step1%\n</div>\n```\n```css\nbody, html {\n    height: 100%;\n}\n```\n```javascript\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    %step1%\n</div>\n```\n```css\nbody, html {\n    height: 100%;\n}\n```\n```javascript\n```",
    "hash": "2acc9a4fe34c09cac6fab340c78b6e417157630b15fdff5e47921ff50900a55d",
    "Created": "2023-10-27T14:36:13.2574665Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "img  logo.png, 150px",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ImageResize\",\n\"StepDescription\": \"Resize the image 'logo.png' to a width of 150px\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"ImageResize\",\n\"StepDescription\": \"Resize the image 'logo.png' to a width of 150px\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "d6dadd074f405bbd19519b6a2419e1d042a63747db583191a481b90e8cb64825",
    "Created": "2023-10-27T14:36:32.9805907Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n%step2%, %step3%, %step4%,  must be included in the html must be in the html. They will be later replace by html content by different system.\r\nDo not generate any html for sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img  logo.png, 150px\n- (%step3%) divider, hr\n- (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    %step1%\n</div>\n```\n```css\nbody, html {\n    height: 100%;\n}\n```\n```javascript\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    %step1%\n</div>\n```\n```css\nbody, html {\n    height: 100%;\n}\n```\n```javascript\n```",
    "hash": "b4c470b6cd4738dd1b98f3325cb3edf1dc1f82413fb68eef57763da49d7b8810",
    "Created": "2023-10-27T14:40:12.7906218Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n%step2%, %step3%, %step4%,  MUST be included in the ```html response. Do not generate any html for these sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center  content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center  content vertical and horizontal\n- (%step2%) img  logo.png, 150px\n- (%step3%) divider, hr\n- (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    <!-- Content goes here -->\n</div>\n```\n\n```css\nbody, html {\n    height: 100%;\n}\n```\n\n```javascript\n// No javascript needed for this command\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    <!-- Content goes here -->\n</div>\n```\n\n```css\nbody, html {\n    height: 100%;\n}\n```\n\n```javascript\n// No javascript needed for this command\n```",
    "hash": "fc750bdc905d26927820b10b99965c2d76b4b11d1dacb3d067cd51e830f0f9e7",
    "Created": "2023-10-27T14:42:09.5114494Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n%step2%, %step3%, %step4%,  MUST be included in the ```html response where Content goes here. Do not generate any html for these sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img  logo.png, 150px\n- (%step3%) divider, hr\n- (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    <!-- Content goes here -->\n</div>\n```\n\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n```javascript\n// No javascript needed for this command\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    <!-- Content goes here -->\n</div>\n```\n\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n```javascript\n// No javascript needed for this command\n```",
    "hash": "271f530498b98fbfd65045d63632241f6ef41b8cc28b5972affe70b1156a6cb2",
    "Created": "2023-10-27T14:43:11.6081299Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: img  logo.png, 150px",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center content vertical and horizontal\n- (%step2%) img  logo.png, 150px\n- (%step3%) divider, hr\n- (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<img src=\"logo.png\" class=\"img-fluid\" style=\"width: 150px;\">\n```"
    },
    "answer": "```html\n<img src=\"logo.png\" class=\"img-fluid\" style=\"width: 150px;\">\n```",
    "hash": "709cccf0ae4f6c34607181297cd43f18e5fe94275ab2b1f9e1c1bcf3505ea90d",
    "Created": "2023-10-27T14:43:16.3095945Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n%step1%, %step3%, %step4% MUST be included in the ```html response where Content goes here. Do not generate any html for these sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center  content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step1%) center  content vertical and horizontal\n- (%step2%) img  logo.png, 150px\n- (%step3%) divider, hr\n- (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    <!-- Content goes here -->\n</div>\n```\n\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n```javascript\n// No javascript needed for this command\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    <!-- Content goes here -->\n</div>\n```\n\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n```javascript\n// No javascript needed for this command\n```",
    "hash": "b6c9ced066e6f4fc9fa6271b74439441aead010645fd5c6910e064aa81f2255e",
    "Created": "2023-10-27T14:45:40.4683251Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n%step1%, %step3%, %step4% MUST be included in the ```html response where Content goes here. Do not generate any html for these sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n - (%step1%) center content vertical and horizontal\n    - (%step2%) img  logo.png, 150px\n    - (%step3%) divider, hr\n    - (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    Content goes here\n</div>\n```\n\n```css\nbody, html {\n    height: 100%;\n}\n```\n\n```javascript\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    Content goes here\n</div>\n```\n\n```css\nbody, html {\n    height: 100%;\n}\n```\n\n```javascript\n```",
    "hash": "9c305d312806b945e60598458ae8680b0b5936f15d727fafcd8516fe2073b11e",
    "Created": "2023-10-27T14:52:28.239977Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n%step1%, %step3%, %step4% MUST be included in the ```html response where Content goes here. Do not generate any html for these sub steps.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center  content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n - (%step1%) center  content vertical and horizontal\n    - (%step2%) img  logo.png, 150px\n    - (%step3%) divider, hr\n    - (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    Content goes here\n</div>\n```\n\n```css\nbody, html {\n    height: 100%;\n}\n```\n\n```javascript\n// No javascript needed for this command\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    Content goes here\n</div>\n```\n\n```css\nbody, html {\n    height: 100%;\n}\n```\n\n```javascript\n// No javascript needed for this command\n```",
    "hash": "3634e812a7ccd9089660b38ecfd69c0ddd9e301ccd14b80e335d153691a3f90d",
    "Created": "2023-10-27T14:53:40.5158087Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps where this user command is, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nvariables are defined with starting and ending %. They will be provided to the javascript as getVar('%variableName%').\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal, it should call the funcion callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n%step1%, %step3%, %step4% MUST be included in the ```html response instead of 'Content goes here', it should be %step1%, %step3%, %step4%  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n - (%step1%) center content vertical and horizontal\n    - (%step2%) img  logo.png, 150px\n    - (%step3%) divider, hr\n    - (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center vh-100\">\n    <!-- Content goes here -->\n</div>\n```\n\n```css\n.vh-100 {\n    height: 100vh;\n}\n```\n\n```javascript\n// No javascript needed for this command\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center vh-100\">\n    <!-- Content goes here -->\n</div>\n```\n\n```css\n.vh-100 {\n    height: 100vh;\n}\n```\n\n```javascript\n// No javascript needed for this command\n```",
    "hash": "63d87a80909fc433cb572126f5d0b51d23bd38165f1b89166ad0f677b35755df",
    "Created": "2023-10-27T14:55:24.7406384Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n%step1%, %step3%, %step4% MUST be included in the ```html response where the 'Content goes here' is.  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n - (%step1%) center content vertical and horizontal\n    - (%step2%) img  logo.png, 150px\n    - (%step3%) divider, hr\n    - (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center vh-100\">\n    <!-- Content goes here -->\n</div>\n```\n\n```css\n.vh-100 {\n    height: 100vh;\n}\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center vh-100\">\n    <!-- Content goes here -->\n</div>\n```\n\n```css\n.vh-100 {\n    height: 100vh;\n}\n```",
    "hash": "a9d389eb6c29d9cac5993ea504cb3f964fc9d4622a31f655b8b87dfc46cd2d92",
    "Created": "2023-10-27T14:58:06.4867767Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\nput the variable %content% where content should be  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n - (%step1%) center content vertical and horizontal\n    - (%step2%) img  logo.png, 150px\n    - (%step3%) divider, hr\n    - (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center vh-100\">\n    %content%\n</div>\n```\n```css\n.vh-100 {\n    height: 100vh;\n}\n```\n```javascript\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center vh-100\">\n    %content%\n</div>\n```\n```css\n.vh-100 {\n    height: 100vh;\n}\n```\n```javascript\n```",
    "hash": "6dd2cd02765575b3d8e7af0f1570aa32f8e7438a48750bb9b5b6b2076f968983",
    "Created": "2023-10-27T15:00:18.932979Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\nput the variable %content% where content should be  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center  content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n - (%step1%) center  content vertical and horizontal\n    - (%step2%) img  logo.png, 150px\n    - (%step3%) divider, hr\n    - (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center vh-100\">\n    %content%\n</div>\n```\n```css\n.vh-100 {\n    height: 100vh;\n}\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center vh-100\">\n    %content%\n</div>\n```\n```css\n.vh-100 {\n    height: 100vh;\n}\n```",
    "hash": "230117a9be70498126560b8a03f26ec8e36a0c2923fb2a712a6821392d7e64bc",
    "Created": "2023-10-27T15:02:20.5447059Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "divider, hr",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateDivider\",\n\"StepDescription\": \"This step involves creating a horizontal rule (hr) which serves as a divider in HTML.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateDivider\",\n\"StepDescription\": \"This step involves creating a horizontal rule (hr) which serves as a divider in HTML.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "c57187bf15ade39b86df48254a2c03bbf35de1405c96f8131ba6187e2213cb3c",
    "Created": "2023-10-27T15:02:33.5091139Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: divider, hr",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n - (%step1%) center  content vertical and horizontal\n    - (%step2%) img  logo.png, 150px\n    - (%step3%) divider, hr\n    - (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<hr class=\"my-4\">\n```"
    },
    "answer": "```html\n<hr class=\"my-4\">\n```",
    "hash": "188561c591f38c34700be96f9c8a685f32b911cd2af3b559862a7f31ed290c9d",
    "Created": "2023-10-27T15:23:04.2044602Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GenerateUserTable\",\n\"StepDescription\": \"Generate a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a short date string. The 'Actions' column contains links to 'Edit' and 'Delete' goals for each user, using their id. Font Awesome is used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GenerateUserTable\",\n\"StepDescription\": \"Generate a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a short date string. The 'Actions' column contains links to 'Edit' and 'Delete' goals for each user, using their id. Font Awesome is used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "9cecef7a7bd7e7d7be4fab7c51c04dfe197566a169b928b0ffa76c7231125ab0",
    "Created": "2023-10-27T15:03:11.2701843Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n - (%step1%) center  content vertical and horizontal\n    - (%step2%) img  logo.png, 150px\n    - (%step3%) divider, hr\n    - (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Created</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button onclick=\"callGoal('Edit.goal', {id: @user.id})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button onclick=\"callGoal('Delete.goal', {id: @user.id})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```css\n.container {\n    width: 100%;\n    padding-right: 15px;\n    padding-left: 15px;\n    margin-right: auto;\n    margin-left: auto;\n}\n```\n```javascript\n// No javascript needed\n```"
    },
    "answer": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Created</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button onclick=\"callGoal('Edit.goal', {id: @user.id})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button onclick=\"callGoal('Delete.goal', {id: @user.id})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```css\n.container {\n    width: 100%;\n    padding-right: 15px;\n    padding-left: 15px;\n    margin-right: auto;\n    margin-left: auto;\n}\n```\n```javascript\n// No javascript needed\n```",
    "hash": "2302561a8bf6c9ecea0458b8bf6a7bf594eabd1d0cf46022a0c7e33683e2b854",
    "Created": "2023-10-27T15:23:43.543889Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\nput the variable {content} where content should be  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center  content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n - (%step1%) center  content vertical and horizontal\n    - (%step2%) img  logo.png, 150px\n    - (%step3%) divider, hr\n    - (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    {content}\n</div>\n```\n```css\n```\n```javascript\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    {content}\n</div>\n```\n```css\n```\n```javascript\n```",
    "hash": "1b41b81ee0b282ea877240242219df32427f68d04a368c29f1db3169f3c63ea7",
    "Created": "2023-10-27T15:22:30.8419709Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: img  logo.png, 150px",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n - (%step1%) center  content vertical and horizontal\n    - (%step2%) img  logo.png, 150px\n    - (%step3%) divider, hr\n    - (%step4%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<img src=\"logo.png\" class=\"mx-auto d-block\" style=\"width: 150px;\">\n```\n```css\n```\n```javascript\n```"
    },
    "answer": "```html\n<img src=\"logo.png\" class=\"mx-auto d-block\" style=\"width: 150px;\">\n```\n```css\n```\n```javascript\n```",
    "hash": "a32c0bcf58c1db7b9c9e2415a4679c970a22168eb418c6758d662f5ae6a6fe9e",
    "Created": "2023-10-27T15:22:54.8500889Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\nput the variable {content} where content should be  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: center content vertical and horizontal",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step0%) center content vertical and horizontal\n- (%step1%) img  logo.png, 150px\n- (%step2%) divider, hr\n- (%step3%) table\n        header:  Name, Email, Created, Actions\n        body: %users%\n            Created.ToString(\"d\")\n            Edit.goal, %user.id%\n            Delete.goal, %user.id%\n            use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    {content}\n</div>\n```\n\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n```javascript\n```"
    },
    "answer": "```html\n<div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n    {content}\n</div>\n```\n\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n```javascript\n```",
    "hash": "15d7de16cf2a629f26776c5370b7eefb218c6f83b15798f367ce5e39904bdb32",
    "Created": "2023-10-27T15:32:05.4147245Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateTable\",\n\"StepDescription\": \"Create a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a date string. The 'Actions' column contains links to 'Edit' and 'Delete' goals for each user, using their id. Font awesome is used for styling.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateTable\",\n\"StepDescription\": \"Create a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a date string. The 'Actions' column contains links to 'Edit' and 'Delete' goals for each user, using their id. Font awesome is used for styling.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "75240bb147c4f56cd36d7da1f98fa606ff6b5869fe9f94be4e590303b38a4c6d",
    "Created": "2023-10-27T15:39:05.533438Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step0%) table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal, %user.id%\n        Delete.goal, %user.id%\n        use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Created</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        @foreach (var user in Model.users)\n        {\n            <tr>\n                <td>@user.Name</td>\n                <td>@user.Email</td>\n                <td>@user.Created.ToString(\"d\")</td>\n                <td>\n                    <button class=\"btn btn-primary\" onclick=\"callGoal('Edit.goal', {id: @user.id})\">\n                        <i class=\"fas fa-edit\"></i>\n                    </button>\n                    <button class=\"btn btn-danger\" onclick=\"callGoal('Delete.goal', {id: @user.id})\">\n                        <i class=\"fas fa-trash-alt\"></i>\n                    </button>\n                </td>\n            </tr>\n        }\n    </tbody>\n</table>\n```\n\n```css\n.table {\n    width: 100%;\n    margin-bottom: 1rem;\n    color: rgb(33, 37, 41);\n}\n\n.btn-primary {\n    color: rgb(255, 255, 255);\n    background-color: rgb(0, 123, 255);\n    border-color: rgb(0, 123, 255);\n}\n\n.btn-danger {\n    color: rgb(255, 255, 255);\n    background-color: rgb(220, 53, 69);\n    border-color: rgb(220, 53, 69);\n}\n```\n\n```javascript\n// No javascript needed\n```"
    },
    "answer": "```html\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Created</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        @foreach (var user in Model.users)\n        {\n            <tr>\n                <td>@user.Name</td>\n                <td>@user.Email</td>\n                <td>@user.Created.ToString(\"d\")</td>\n                <td>\n                    <button class=\"btn btn-primary\" onclick=\"callGoal('Edit.goal', {id: @user.id})\">\n                        <i class=\"fas fa-edit\"></i>\n                    </button>\n                    <button class=\"btn btn-danger\" onclick=\"callGoal('Delete.goal', {id: @user.id})\">\n                        <i class=\"fas fa-trash-alt\"></i>\n                    </button>\n                </td>\n            </tr>\n        }\n    </tbody>\n</table>\n```\n\n```css\n.table {\n    width: 100%;\n    margin-bottom: 1rem;\n    color: rgb(33, 37, 41);\n}\n\n.btn-primary {\n    color: rgb(255, 255, 255);\n    background-color: rgb(0, 123, 255);\n    border-color: rgb(0, 123, 255);\n}\n\n.btn-danger {\n    color: rgb(255, 255, 255);\n    background-color: rgb(220, 53, 69);\n    border-color: rgb(220, 53, 69);\n}\n```\n\n```javascript\n// No javascript needed\n```",
    "hash": "f1932992bed1fdbc64780446be90c9fed68751e292092c8a2e3c517e3b27725d",
    "Created": "2023-10-27T15:39:51.2152494Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "form, Name and Email\n    %user.name%, %user.email%, %user.id%\n    Save button, call !Save",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"FormFilling\",\n\"StepDescription\": \"Fill the form with the user's name, email, and id, then click the save button to save the information.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"FormFilling\",\n\"StepDescription\": \"Fill the form with the user's name, email, and id, then click the save button to save the information.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "51b4b67eb8e71ab5d5291732b6d063e184b19059676348083467501840043659",
    "Created": "2023-10-27T15:40:07.1427276Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: form, Name and Email\n    %user.name%, %user.email%, %user.id%\n    Save button, call !Save",
      "assistant": "\r\n### For context ###\r\n(Goal) Edit\n- (%step0%) form, Name and Email\n    %user.name%, %user.email%, %user.id%\n    Save button, call !Save\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<form id=\"userForm\">\n    <div class=\"mb-3\">\n        <label for=\"userName\" class=\"form-label\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"userName\" value=\"@Model.user.name\">\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"userEmail\" class=\"form-label\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"userEmail\" value=\"@Model.user.email\">\n    </div>\n    <input type=\"hidden\" id=\"userId\" value=\"@Model.user.id\">\n    <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n</form>\n```\n\n```javascript\ndocument.getElementById('userForm').addEventListener('submit', function(event) {\n    event.preventDefault();\n    var name = document.getElementById('userName').value;\n    var email = document.getElementById('userEmail').value;\n    var id = document.getElementById('userId').value;\n    callGoal('Save', { name: name, email: email, id: id });\n});\n```\n\n```css\n/* No custom CSS needed for this task */\n```"
    },
    "answer": "```html\n<form id=\"userForm\">\n    <div class=\"mb-3\">\n        <label for=\"userName\" class=\"form-label\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"userName\" value=\"@Model.user.name\">\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"userEmail\" class=\"form-label\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"userEmail\" value=\"@Model.user.email\">\n    </div>\n    <input type=\"hidden\" id=\"userId\" value=\"@Model.user.id\">\n    <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n</form>\n```\n\n```javascript\ndocument.getElementById('userForm').addEventListener('submit', function(event) {\n    event.preventDefault();\n    var name = document.getElementById('userName').value;\n    var email = document.getElementById('userEmail').value;\n    var id = document.getElementById('userId').value;\n    callGoal('Save', { name: name, email: email, id: id });\n});\n```\n\n```css\n/* No custom CSS needed for this task */\n```",
    "hash": "6ebd712a13967d59375b06060425c42992811d8d7346dbffcf054c9adf1741cf",
    "Created": "2023-10-27T15:40:35.3191587Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[db] select * from users where id=%id%, write to %user%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.DbModule, { \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"FetchUserFromDB\",\n\"StepDescription\": \"Select all fields from the 'users' table where the user id matches the provided id, and write the result to the 'user' variable\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"FetchUserFromDB\",\n\"StepDescription\": \"Select all fields from the 'users' table where the user id matches the provided id, and write the result to the 'user' variable\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}",
    "hash": "fbf60a828b04a9e1db46a899434cc5b2f11bc8c934083cf350a3ab3a9afdab39",
    "Created": "2023-10-27T15:57:43.8741546Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: [db] select * from users where id=%id%, write to %user%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n\n## table & views in db start ##\r\n[{\"name\":\"__Events__\"},{\"name\":\"users\"}]\r\n## table & view in db end ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Select\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"Select\", \"TableNames\": [\"users\"]}",
    "hash": "65e3c3825fba94eba5b4f586b5a0248482d4cee24b849bcf6f7ad8734f531a70",
    "Created": "2023-10-27T15:57:47.5131267Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Map user command to this c# function: \r\n\r\n## csharp function ##\r\ndynamic Select(String sql, Dictionary`2? Parameters, bool selectOneRow_Top1OrLimit1 = false)  \r\n## csharp function ##\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%.\r\nYou MUST generate a valid sql statement for SQLiteConnection.\r\nYou MUST provide Parameters if SQL has @parameter.\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [db] select * from users where id=%id%, write to %user%",
      "assistant": "# examples #\r\n\"select everything from tableX\" => sql: \"SELECT * FROM tableX\"\r\n\"select from tableB where id=%id%\" => sql: \"SELECT * FROM tableB WHERE id=@id\"\r\n# examples #\n### users table info starts ###\n[{\"cid\":0,\"name\":\"id\",\"type\":\"INTEGER\",\"notnull\":0,\"dflt_value\":null,\"pk\":1},{\"cid\":1,\"name\":\"Name\",\"type\":\"TEXT\",\"notnull\":0,\"dflt_value\":null,\"pk\":0},{\"cid\":2,\"name\":\"Email\",\"type\":\"TEXT\",\"notnull\":0,\"dflt_value\":null,\"pk\":0},{\"cid\":3,\"name\":\"Created\",\"type\":\"DATETIME\",\"notnull\":0,\"dflt_value\":\"CURRENT_TIMESTAMP\",\"pk\":0}]\n### table info ends ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Select\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"sql\", \"Value\": \"SELECT * FROM users WHERE id=@id\"},\n    {\"Type\": \"Dictionary`2\", \"Name\": \"Parameters\", \"Value\": {\"@id\": \"%id%\"}},\n    {\"Type\": \"bool\", \"Name\": \"selectOneRow_Top1OrLimit1\", \"Value\": true}\n],\n\"ReturnValue\": {\"Type\": \"dynamic\", \"VariableName\": \"%user%\"}}"
    },
    "answer": "{\"FunctionName\": \"Select\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"sql\", \"Value\": \"SELECT * FROM users WHERE id=@id\"},\n    {\"Type\": \"Dictionary`2\", \"Name\": \"Parameters\", \"Value\": {\"@id\": \"%id%\"}},\n    {\"Type\": \"bool\", \"Name\": \"selectOneRow_Top1OrLimit1\", \"Value\": true}\n],\n\"ReturnValue\": {\"Type\": \"dynamic\", \"VariableName\": \"%user%\"}}",
    "hash": "b913f59316bb876f5fff25f44147ed67bbb540e2fb3fd994eeffc682d929c750",
    "Created": "2023-10-27T15:58:00.8259624Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: form, Name and Email\n    %user.name%, %user.email%, %user.id%\n    Save button, call !Save",
      "assistant": "\r\n### For context ###\r\n(Goal) Edit\n- (%step0%) [db] select * from users where id=%id%, write to %user%\n- (%step1%) form, Name and Email\n    %user.name%, %user.email%, %user.id%\n    Save button, call !Save\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<form id=\"userForm\">\n    <div class=\"mb-3\">\n        <label for=\"userName\" class=\"form-label\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"userName\" value=\"@Model.user.name\">\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"userEmail\" class=\"form-label\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"userEmail\" value=\"@Model.user.email\">\n    </div>\n    <input type=\"hidden\" id=\"userId\" value=\"@Model.user.id\">\n    <button type=\"button\" class=\"btn btn-primary\" id=\"saveButton\">Save</button>\n</form>\n```\n\n```javascript\ndocument.getElementById('saveButton').addEventListener('click', function() {\n    var name = document.getElementById('userName').value;\n    var email = document.getElementById('userEmail').value;\n    var id = document.getElementById('userId').value;\n    callGoal('Save', { name: name, email: email, id: id });\n});\n```"
    },
    "answer": "```html\n<form id=\"userForm\">\n    <div class=\"mb-3\">\n        <label for=\"userName\" class=\"form-label\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"userName\" value=\"@Model.user.name\">\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"userEmail\" class=\"form-label\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"userEmail\" value=\"@Model.user.email\">\n    </div>\n    <input type=\"hidden\" id=\"userId\" value=\"@Model.user.id\">\n    <button type=\"button\" class=\"btn btn-primary\" id=\"saveButton\">Save</button>\n</form>\n```\n\n```javascript\ndocument.getElementById('saveButton').addEventListener('click', function() {\n    var name = document.getElementById('userName').value;\n    var email = document.getElementById('userEmail').value;\n    var id = document.getElementById('userId').value;\n    callGoal('Save', { name: name, email: email, id: id });\n});\n```",
    "hash": "aff7909d8e0ea03a6083e5f3fe8ead9b2d089646a3cfe1514e956534b891b3b6",
    "Created": "2023-10-27T15:58:32.7328659Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "form, Name and Email\n    %user.Name%, %user.Email%, %user.Id%\n    Save button, call !Save",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"FormFilling\",\n\"StepDescription\": \"Fill the form with the user's Name, Email, and Id and then click the Save button\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"FormFilling\",\n\"StepDescription\": \"Fill the form with the user's Name, Email, and Id and then click the Save button\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "86d014b69592ef2145b18a4c728c44783e95de231930998d442cd0a01359e8ff",
    "Created": "2023-10-27T16:00:16.7721619Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: form, Name and Email\n    %user.Name%, %user.Email%, %user.Id%\n    Save button, call !Save",
      "assistant": "\r\n### For context ###\r\n(Goal) Edit\n- (%step0%) [db] select * from users where id=%id%, write to %user%\n- (%step1%) form, Name and Email\n    %user.Name%, %user.Email%, %user.Id%\n    Save button, call !Save\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<form id=\"userForm\">\n    <div class=\"mb-3\">\n        <label for=\"userName\" class=\"form-label\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"userName\" value=\"@Model.user.Name\">\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"userEmail\" class=\"form-label\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"userEmail\" value=\"@Model.user.Email\">\n    </div>\n    <input type=\"hidden\" id=\"userId\" value=\"@Model.user.Id\">\n    <button type=\"button\" class=\"btn btn-primary\" id=\"saveButton\">Save</button>\n</form>\n```\n\n```javascript\ndocument.getElementById('saveButton').addEventListener('click', function() {\n    var name = document.getElementById('userName').value;\n    var email = document.getElementById('userEmail').value;\n    var id = document.getElementById('userId').value;\n    callGoal('Save', { Name: name, Email: email, Id: id });\n});\n```\n\n```css\n```"
    },
    "answer": "```html\n<form id=\"userForm\">\n    <div class=\"mb-3\">\n        <label for=\"userName\" class=\"form-label\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"userName\" value=\"@Model.user.Name\">\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"userEmail\" class=\"form-label\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"userEmail\" value=\"@Model.user.Email\">\n    </div>\n    <input type=\"hidden\" id=\"userId\" value=\"@Model.user.Id\">\n    <button type=\"button\" class=\"btn btn-primary\" id=\"saveButton\">Save</button>\n</form>\n```\n\n```javascript\ndocument.getElementById('saveButton').addEventListener('click', function() {\n    var name = document.getElementById('userName').value;\n    var email = document.getElementById('userEmail').value;\n    var id = document.getElementById('userId').value;\n    callGoal('Save', { Name: name, Email: email, Id: id });\n});\n```\n\n```css\n```",
    "hash": "4caaab123ed43de2d1b4475278f0e5ae690a795a21c01edc727b629cc4ac1c83",
    "Created": "2023-10-27T16:00:50.0163926Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateTable\",\n\"StepDescription\": \"Create a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a string date. The 'Actions' column contains links to 'Edit.goal' and 'Delete.goal' functions, each with the user's id as a parameter. Font Awesome is used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateTable\",\n\"StepDescription\": \"Create a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a string date. The 'Actions' column contains links to 'Edit.goal' and 'Delete.goal' functions, each with the user's id as a parameter. Font Awesome is used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "da7332756f7107655e79736318ea7d024d67743102255a4cd0b784cdf07873bd",
    "Created": "2023-10-27T16:22:38.5262143Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "\r\n### For context ###\r\n(Goal) Users\n- (%step0%) table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  %user.id%\n        Delete.goal, %user.id%\n        use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Created</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button class=\"btn btn-primary\" onclick=\"callGoal('Edit.goal', {id: @user.id})\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"btn btn-danger\" onclick=\"callGoal('Delete.goal', {id: @user.id})\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n\n```css\n.container {\n    margin-top: 20px;\n}\n```\n\n```javascript\n// No javascript needed\n```"
    },
    "answer": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Created</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <button class=\"btn btn-primary\" onclick=\"callGoal('Edit.goal', {id: @user.id})\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button class=\"btn btn-danger\" onclick=\"callGoal('Delete.goal', {id: @user.id})\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n\n```css\n.container {\n    margin-top: 20px;\n}\n```\n\n```javascript\n// No javascript needed\n```",
    "hash": "9b917b8239e875bcb3c5c7826353ef2700e49dd6470b4c4f397d5363c8daa2fd",
    "Created": "2023-10-27T16:23:21.3036378Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "form, Name  and Email\n    %user.Name%, %user.Email%, %user.Id%\n    Save button, call !Save",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"FormFilling\",\n\"StepDescription\": \"Fill the form with the user's Name, Email, and Id and then click the Save button\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"FormFilling\",\n\"StepDescription\": \"Fill the form with the user's Name, Email, and Id and then click the Save button\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "fc79f94b17abe828559c11e53bcd5252b0bdac41ad136da6ef64102d222735f6",
    "Created": "2023-10-27T16:23:28.3466743Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: form, Name  and Email\n    %user.Name%, %user.Email%, %user.Id%\n    Save button, call !Save",
      "assistant": "\r\n### For context ###\r\n(Goal) Edit\n- (%step0%) [db] select * from users where id=%id%, write to %user%\n- (%step1%) form, Name  and Email\n    %user.Name%, %user.Email%, %user.Id%\n    Save button, call !Save\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<form id=\"userForm\">\n    <div class=\"mb-3\">\n        <label for=\"name\" class=\"form-label\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" value=\"@Model.user.Name\">\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"email\" class=\"form-label\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"email\" value=\"@Model.user.Email\">\n    </div>\n    <input type=\"hidden\" id=\"userId\" value=\"@Model.user.Id\">\n    <button type=\"button\" class=\"btn btn-primary\" id=\"saveButton\">Save</button>\n</form>\n```\n\n```javascript\ndocument.getElementById('saveButton').addEventListener('click', function() {\n    var name = document.getElementById('name').value;\n    var email = document.getElementById('email').value;\n    var id = document.getElementById('userId').value;\n    callGoal('Save', { Name: name, Email: email, Id: id });\n});\n```"
    },
    "answer": "```html\n<form id=\"userForm\">\n    <div class=\"mb-3\">\n        <label for=\"name\" class=\"form-label\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" value=\"@Model.user.Name\">\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"email\" class=\"form-label\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"email\" value=\"@Model.user.Email\">\n    </div>\n    <input type=\"hidden\" id=\"userId\" value=\"@Model.user.Id\">\n    <button type=\"button\" class=\"btn btn-primary\" id=\"saveButton\">Save</button>\n</form>\n```\n\n```javascript\ndocument.getElementById('saveButton').addEventListener('click', function() {\n    var name = document.getElementById('name').value;\n    var email = document.getElementById('email').value;\n    var id = document.getElementById('userId').value;\n    callGoal('Save', { Name: name, Email: email, Id: id });\n});\n```",
    "hash": "6e479febe6fa258db41cc8826fe36fa3cde0f798301830293f3256aa62b0cef4",
    "Created": "2023-10-27T16:23:59.6347713Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  %user.id%\n        Delete.goal, %user.id%\n        use font  awesome",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateTable\",\n\"StepDescription\": \"Create a table with headers 'Name', 'Email', 'Created', and 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a string. The 'Actions' column contains links to 'Edit' and 'Delete' goals, each associated with a specific user id. Font awesome is used for styling.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateTable\",\n\"StepDescription\": \"Create a table with headers 'Name', 'Email', 'Created', and 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a string. The 'Actions' column contains links to 'Edit' and 'Delete' goals, each associated with a specific user id. Font awesome is used for styling.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "a70560bd802bbfb7c3578513060b4ce2e38a3b42ecb3b53b39fc8f828cb54329",
    "Created": "2023-10-27T16:27:03.5160321Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\nAll object.Id are long and needs to be wrapped with single quote(')\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  %user.id%\n        Delete.goal, %user.id%\n        use font  awesome",
      "assistant": "\r\n### variables available ###\r\n%users%(Object), \r\n### variables available ###\r\n### For context ###\r\n(Goal) Users\n- (%step0%) table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  %user.id%\n        Delete.goal, %user.id%\n        use font  awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n\t\t<td><a href=\"javascript:callGoal('edit.goal', {id:'@task.Id'})\">Edit</a></td>\r\n\t\t<td><button onclick=\"callGoal('delete.goal', {id:'@task.Id'})\">Delete</button></td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Created</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        @foreach (var user in Model.users)\n        {\n            <tr>\n                <td>@user.Name</td>\n                <td>@user.Email</td>\n                <td>@user.Created.ToString(\"d\")</td>\n                <td>\n                    <a href=\"javascript:callGoal('Edit.goal', {id:'@user.Id'})\" class=\"btn btn-primary\">\n                        <i class=\"fas fa-edit\"></i>\n                    </a>\n                    <a href=\"javascript:callGoal('Delete.goal', {id:'@user.Id'})\" class=\"btn btn-danger\">\n                        <i class=\"fas fa-trash-alt\"></i>\n                    </a>\n                </td>\n            </tr>\n        }\n    </tbody>\n</table>\n```\n```css\n.table {\n    width: 100%;\n    margin-bottom: 1rem;\n    color: rgb(33, 37, 41);\n}\n\n.table th,\n.table td {\n    padding: 0.75rem;\n    vertical-align: top;\n    border-top: 1px solid rgb(242, 242, 242);\n}\n\n.table thead th {\n    vertical-align: bottom;\n    border-bottom: 2px solid rgb(242, 242, 242);\n}\n\n.table tbody + tbody {\n    border-top: 2px solid rgb(242, 242, 242);\n}\n\n.table .btn {\n    margin-right: 0.5rem;\n}\n```\n```javascript\n// No javascript needed\n```"
    },
    "answer": "```html\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Created</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        @foreach (var user in Model.users)\n        {\n            <tr>\n                <td>@user.Name</td>\n                <td>@user.Email</td>\n                <td>@user.Created.ToString(\"d\")</td>\n                <td>\n                    <a href=\"javascript:callGoal('Edit.goal', {id:'@user.Id'})\" class=\"btn btn-primary\">\n                        <i class=\"fas fa-edit\"></i>\n                    </a>\n                    <a href=\"javascript:callGoal('Delete.goal', {id:'@user.Id'})\" class=\"btn btn-danger\">\n                        <i class=\"fas fa-trash-alt\"></i>\n                    </a>\n                </td>\n            </tr>\n        }\n    </tbody>\n</table>\n```\n```css\n.table {\n    width: 100%;\n    margin-bottom: 1rem;\n    color: rgb(33, 37, 41);\n}\n\n.table th,\n.table td {\n    padding: 0.75rem;\n    vertical-align: top;\n    border-top: 1px solid rgb(242, 242, 242);\n}\n\n.table thead th {\n    vertical-align: bottom;\n    border-bottom: 2px solid rgb(242, 242, 242);\n}\n\n.table tbody + tbody {\n    border-top: 2px solid rgb(242, 242, 242);\n}\n\n.table .btn {\n    margin-right: 0.5rem;\n}\n```\n```javascript\n// No javascript needed\n```",
    "hash": "29975c65b9e8d2fc3996771dfe6f192782b758a69411ddb9a87ab357a404ed6b",
    "Created": "2023-10-27T16:30:22.1815739Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\nAll object.Id or object.id are long and needs to be wrapped with single quote(')\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "\r\n### variables available ###\r\n%users%(Object), \r\n### variables available ###\r\n### For context ###\r\n(Goal) Users\n- (%step0%) table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  %user.id%\n        Delete.goal, %user.id%\n        use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n\t\t<td><a href=\"javascript:callGoal('edit.goal', {id:'@task.Id'})\">Edit</a></td>\r\n\t\t<td><button onclick=\"callGoal('delete.goal', {id:'@task.Id'})\">Delete</button></td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Created</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        @foreach (var user in Model.users)\n        {\n            <tr>\n                <td>@user.Name</td>\n                <td>@user.Email</td>\n                <td>@user.Created.ToString(\"d\")</td>\n                <td>\n                    <a href=\"javascript:callGoal('Edit.goal', {id:'@user.Id'})\" class=\"btn btn-primary\">\n                        <i class=\"fas fa-edit\"></i>\n                    </a>\n                    <a href=\"javascript:callGoal('Delete.goal', {id:'@user.Id'})\" class=\"btn btn-danger\">\n                        <i class=\"fas fa-trash-alt\"></i>\n                    </a>\n                </td>\n            </tr>\n        }\n    </tbody>\n</table>\n```\n```css\n.table {\n    width: 100%;\n    margin-bottom: 1rem;\n    color: rgb(33, 37, 41);\n}\n\n.btn-primary {\n    color: rgb(255, 255, 255);\n    background-color: rgb(0, 123, 255);\n    border-color: rgb(0, 123, 255);\n}\n\n.btn-danger {\n    color: rgb(255, 255, 255);\n    background-color: rgb(220, 53, 69);\n    border-color: rgb(220, 53, 69);\n}\n```\n```javascript\n// No javascript needed\n```"
    },
    "answer": "```html\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Created</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        @foreach (var user in Model.users)\n        {\n            <tr>\n                <td>@user.Name</td>\n                <td>@user.Email</td>\n                <td>@user.Created.ToString(\"d\")</td>\n                <td>\n                    <a href=\"javascript:callGoal('Edit.goal', {id:'@user.Id'})\" class=\"btn btn-primary\">\n                        <i class=\"fas fa-edit\"></i>\n                    </a>\n                    <a href=\"javascript:callGoal('Delete.goal', {id:'@user.Id'})\" class=\"btn btn-danger\">\n                        <i class=\"fas fa-trash-alt\"></i>\n                    </a>\n                </td>\n            </tr>\n        }\n    </tbody>\n</table>\n```\n```css\n.table {\n    width: 100%;\n    margin-bottom: 1rem;\n    color: rgb(33, 37, 41);\n}\n\n.btn-primary {\n    color: rgb(255, 255, 255);\n    background-color: rgb(0, 123, 255);\n    border-color: rgb(0, 123, 255);\n}\n\n.btn-danger {\n    color: rgb(255, 255, 255);\n    background-color: rgb(220, 53, 69);\n    border-color: rgb(220, 53, 69);\n}\n```\n```javascript\n// No javascript needed\n```",
    "hash": "cd2eeed732ddb472590cd70cf76f2ee5788f5cd12b2afbbf3e83d5a14eecffaa",
    "Created": "2023-10-27T16:35:18.5061483Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "form, Name  and Email\n    %user.Name%, %user.Email%, %user.id%\n    Save button, call !Save",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"FormFilling\",\n\"StepDescription\": \"Fill the form with the user's Name, Email, and ID, then click the Save button\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"FormFilling\",\n\"StepDescription\": \"Fill the form with the user's Name, Email, and ID, then click the Save button\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "5662ea13d21432db47df9473b9cdd113e729250f90c78e914a5daf597993739b",
    "Created": "2023-10-27T16:35:24.6956766Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %.\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\nAll object.Id or object.id are long and needs to be wrapped with single quote(')\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: form, Name  and Email\n    %user.Name%, %user.Email%, %user.id%\n    Save button, call !Save",
      "assistant": "\r\n### variables available ###\r\n\r\n### variables available ###\r\n### For context ###\r\n(Goal) Edit\n- (%step0%) [db] select * from users where id=%id%, write to %user%\n- (%step1%) form, Name  and Email\n    %user.Name%, %user.Email%, %user.id%\n    Save button, call !Save\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n\t\t<td><a href=\"javascript:callGoal('edit.goal', {id:'@task.Id'})\">Edit</a></td>\r\n\t\t<td><button onclick=\"callGoal('delete.goal', {id:'@task.Id'})\">Delete</button></td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<form>\n  <div class=\"mb-3\">\n    <label for=\"name\" class=\"form-label\">Name</label>\n    <input type=\"text\" class=\"form-control\" id=\"name\" value=\"@Model.user.Name\">\n  </div>\n  <div class=\"mb-3\">\n    <label for=\"email\" class=\"form-label\">Email</label>\n    <input type=\"email\" class=\"form-control\" id=\"email\" value=\"@Model.user.Email\">\n  </div>\n  <input type=\"hidden\" id=\"userId\" value=\"@Model.user.id\">\n  <button type=\"button\" class=\"btn btn-primary\" onclick=\"callGoal('Save', {id: document.getElementById('userId').value, name: document.getElementById('name').value, email: document.getElementById('email').value})\">Save</button>\n</form>\n```\n\n```css\n```\n\n```javascript\n```"
    },
    "answer": "```html\n<form>\n  <div class=\"mb-3\">\n    <label for=\"name\" class=\"form-label\">Name</label>\n    <input type=\"text\" class=\"form-control\" id=\"name\" value=\"@Model.user.Name\">\n  </div>\n  <div class=\"mb-3\">\n    <label for=\"email\" class=\"form-label\">Email</label>\n    <input type=\"email\" class=\"form-control\" id=\"email\" value=\"@Model.user.Email\">\n  </div>\n  <input type=\"hidden\" id=\"userId\" value=\"@Model.user.id\">\n  <button type=\"button\" class=\"btn btn-primary\" onclick=\"callGoal('Save', {id: document.getElementById('userId').value, name: document.getElementById('name').value, email: document.getElementById('email').value})\">Save</button>\n</form>\n```\n\n```css\n```\n\n```javascript\n```",
    "hash": "f51e608ed4d807b711e36c76f4488360e199a05390b6870aa44d748f5da38ad0",
    "Created": "2023-10-27T16:35:47.8319952Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %. They are case sensitive so keep them as defined\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\nAll object.Id or object.id are long and needs to be wrapped with single quote(')\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  %user.id%\n        Delete.goal, %user.id%\n        use font awesome",
      "assistant": "\r\n### variables available ###\r\n%users%(Object), \r\n### variables available ###\r\n### For context ###\r\n(Goal) Users\n- (%step0%) table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  %user.id%\n        Delete.goal, %user.id%\n        use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n\t\t<td><a href=\"javascript:callGoal('edit.goal', {id:'@task.Id'})\">Edit</a></td>\r\n\t\t<td><button onclick=\"callGoal('delete.goal', {id:'@task.Id'})\">Delete</button></td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Created</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <a href=\"javascript:callGoal('Edit.goal', {id:'@user.Id'})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </a>\n                        <a href=\"javascript:callGoal('Delete.goal', {id:'@user.Id'})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </a>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n\n```css\n.table {\n    width: 100%;\n    margin-top: 20px;\n}\n\n.btn {\n    margin-right: 5px;\n}\n```\n\n```javascript\n// No javascript needed\n```"
    },
    "answer": "```html\n<div class=\"container\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Created</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <a href=\"javascript:callGoal('Edit.goal', {id:'@user.Id'})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </a>\n                        <a href=\"javascript:callGoal('Delete.goal', {id:'@user.Id'})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </a>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n\n```css\n.table {\n    width: 100%;\n    margin-top: 20px;\n}\n\n.btn {\n    margin-right: 5px;\n}\n```\n\n```javascript\n// No javascript needed\n```",
    "hash": "08e6297f4962d0d2888472e4bf435688cad75225566ff67666147c88fe1e3b66",
    "Created": "2023-10-27T16:39:07.515148Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  '%user.id%'\n        Delete.goal, '%user.id%'\n        use font awesome",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateTable\",\n\"StepDescription\": \"Create a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a string date. The 'Actions' column contains links to 'Edit.goal' and 'Delete.goal' functions, each with the user's id as a parameter. Font Awesome is used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateTable\",\n\"StepDescription\": \"Create a table with headers 'Name', 'Email', 'Created', 'Actions'. The body of the table is filled with user data. The 'Created' column is formatted to a string date. The 'Actions' column contains links to 'Edit.goal' and 'Delete.goal' functions, each with the user's id as a parameter. Font Awesome is used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "de7408a3337c9eb096668763070f1685778fa15503eb4e218b56bb21a3b684f3",
    "Created": "2023-10-27T16:40:32.7139321Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %. They are case sensitive so keep them as defined\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\nAll object.Id or object.id are long and needs to be wrapped with single quote(')\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  '%user.id%'\n        Delete.goal, '%user.id%'\n        use font awesome",
      "assistant": "\r\n### variables available ###\r\n%users%(Object), \r\n### variables available ###\r\n### For context ###\r\n(Goal) Users\n- (%step0%) table\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  '%user.id%'\n        Delete.goal, '%user.id%'\n        use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n\t\t<td><a href=\"javascript:callGoal('edit.goal', {id:'@task.Id'})\">Edit</a></td>\r\n\t\t<td><button onclick=\"callGoal('delete.goal', {id:'@task.Id'})\">Delete</button></td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Created</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        @foreach (var user in Model.users)\n        {\n            <tr>\n                <td>@user.Name</td>\n                <td>@user.Email</td>\n                <td>@user.Created.ToString(\"d\")</td>\n                <td>\n                    <a href=\"javascript:callGoal('Edit.goal', {id:'@user.id'})\" class=\"btn btn-primary\">\n                        <i class=\"fas fa-edit\"></i>\n                    </a>\n                    <a href=\"javascript:callGoal('Delete.goal', {id:'@user.id'})\" class=\"btn btn-danger\">\n                        <i class=\"fas fa-trash-alt\"></i>\n                    </a>\n                </td>\n            </tr>\n        }\n    </tbody>\n</table>\n```\n```css\n.table {\n    width: 100%;\n    margin-bottom: 1rem;\n    color: #212529;\n}\n\n.table th,\n.table td {\n    padding: 0.75rem;\n    vertical-align: top;\n    border-top: 1px solid #dee2e6;\n}\n\n.table thead th {\n    vertical-align: bottom;\n    border-bottom: 2px solid #dee2e6;\n}\n\n.table tbody + tbody {\n    border-top: 2px solid #dee2e6;\n}\n\n.table .btn {\n    margin-right: 0.5rem;\n}\n```\n```javascript\n// No javascript needed\n```"
    },
    "answer": "```html\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Created</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        @foreach (var user in Model.users)\n        {\n            <tr>\n                <td>@user.Name</td>\n                <td>@user.Email</td>\n                <td>@user.Created.ToString(\"d\")</td>\n                <td>\n                    <a href=\"javascript:callGoal('Edit.goal', {id:'@user.id'})\" class=\"btn btn-primary\">\n                        <i class=\"fas fa-edit\"></i>\n                    </a>\n                    <a href=\"javascript:callGoal('Delete.goal', {id:'@user.id'})\" class=\"btn btn-danger\">\n                        <i class=\"fas fa-trash-alt\"></i>\n                    </a>\n                </td>\n            </tr>\n        }\n    </tbody>\n</table>\n```\n```css\n.table {\n    width: 100%;\n    margin-bottom: 1rem;\n    color: #212529;\n}\n\n.table th,\n.table td {\n    padding: 0.75rem;\n    vertical-align: top;\n    border-top: 1px solid #dee2e6;\n}\n\n.table thead th {\n    vertical-align: bottom;\n    border-bottom: 2px solid #dee2e6;\n}\n\n.table tbody + tbody {\n    border-top: 2px solid #dee2e6;\n}\n\n.table .btn {\n    margin-right: 0.5rem;\n}\n```\n```javascript\n// No javascript needed\n```",
    "hash": "e32de3346be672560a8fa6c7dfe4801f98eef75ef18a6442dcd97d19bba40a27",
    "Created": "2023-10-27T16:41:20.4882154Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "form, Name  and Email\n    %user.Name%, %user.Email%, '%user.id%'\n    Save button, call !Save",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"FormFilling\",\n\"StepDescription\": \"Fill the form with the user's Name and Email, and then call the Save function\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"FormFilling\",\n\"StepDescription\": \"Fill the form with the user's Name and Email, and then call the Save function\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "48cee24e60cbe76856141dab69becf771d9fa652709d835fc3680cf603ac0b0a",
    "Created": "2023-10-27T16:49:15.2558487Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %. They are case sensitive so keep them as defined\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\nAll object.Id or object.id are long and needs to be wrapped with single quote(')\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: form, Name  and Email\n    %user.Name%, %user.Email%, '%user.id%'\n    Save button, call !Save",
      "assistant": "\r\n### variables available ###\r\n\r\n### variables available ###\r\n### For context ###\r\n(Goal) Edit\n- (%step0%) [db] select * from users where id=%id%, write to %user%\n- (%step1%) form, Name  and Email\n    %user.Name%, %user.Email%, '%user.id%'\n    Save button, call !Save\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n\t\t<td><a href=\"javascript:callGoal('edit.goal', {id:'@task.Id'})\">Edit</a></td>\r\n\t\t<td><button onclick=\"callGoal('delete.goal', {id:'@task.Id'})\">Delete</button></td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<form>\n  <div class=\"mb-3\">\n    <label for=\"name\" class=\"form-label\">Name</label>\n    <input type=\"text\" class=\"form-control\" id=\"name\" value=\"@Model.user.Name\">\n  </div>\n  <div class=\"mb-3\">\n    <label for=\"email\" class=\"form-label\">Email</label>\n    <input type=\"email\" class=\"form-control\" id=\"email\" value=\"@Model.user.Email\">\n  </div>\n  <input type=\"hidden\" id=\"userId\" value='@Model.user.id'>\n  <button type=\"button\" class=\"btn btn-primary\" onclick=\"callGoal('Save', {id: document.getElementById('userId').value, name: document.getElementById('name').value, email: document.getElementById('email').value})\">Save</button>\n</form>\n```\n```css\n```\n```javascript\n```"
    },
    "answer": "```html\n<form>\n  <div class=\"mb-3\">\n    <label for=\"name\" class=\"form-label\">Name</label>\n    <input type=\"text\" class=\"form-control\" id=\"name\" value=\"@Model.user.Name\">\n  </div>\n  <div class=\"mb-3\">\n    <label for=\"email\" class=\"form-label\">Email</label>\n    <input type=\"email\" class=\"form-control\" id=\"email\" value=\"@Model.user.Email\">\n  </div>\n  <input type=\"hidden\" id=\"userId\" value='@Model.user.id'>\n  <button type=\"button\" class=\"btn btn-primary\" onclick=\"callGoal('Save', {id: document.getElementById('userId').value, name: document.getElementById('name').value, email: document.getElementById('email').value})\">Save</button>\n</form>\n```\n```css\n```\n```javascript\n```",
    "hash": "38c1094496600cd98561d0ad27709b0c36ddd358ec65cfc73e4b38892bfbe019",
    "Created": "2023-10-27T16:49:39.5074489Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "table, 2rem margin\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  '%user.id%'\n        Delete.goal, '%user.id%'\n        use font awesome",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%users%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateTableWithMargin\",\n\"StepDescription\": \"Create a table with a 2rem margin. The table header includes 'Name', 'Email', 'Created', and 'Actions'. The body of the table is populated with user data. The 'Created' column is formatted to a string date. The 'Actions' column includes 'Edit' and 'Delete' goals, each associated with a unique user id. Font Awesome is used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateTableWithMargin\",\n\"StepDescription\": \"Create a table with a 2rem margin. The table header includes 'Name', 'Email', 'Created', and 'Actions'. The body of the table is populated with user data. The 'Created' column is formatted to a string date. The 'Actions' column includes 'Edit' and 'Delete' goals, each associated with a unique user id. Font Awesome is used for icons.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "1e97db11a578c9d5c68f8efefd205d71fec499a68059ea60bf64796c948bbd16",
    "Created": "2023-10-27T16:51:00.2838966Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %. They are case sensitive so keep them as defined\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\nAll object.Id or object.id are long and needs to be wrapped with single quote(')\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: table, 2rem margin\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  '%user.id%'\n        Delete.goal, '%user.id%'\n        use font awesome",
      "assistant": "\r\n### variables available ###\r\n%users%(Object), \r\n### variables available ###\r\n### For context ###\r\n(Goal) Users\n- (%step0%) table, 2rem margin\n    header:  Name, Email, Created, Actions\n    body: %users%\n        Created.ToString(\"d\")\n        Edit.goal,  '%user.id%'\n        Delete.goal, '%user.id%'\n        use font awesome\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n\t\t<td><a href=\"javascript:callGoal('edit.goal', {id:'@task.Id'})\">Edit</a></td>\r\n\t\t<td><button onclick=\"callGoal('delete.goal', {id:'@task.Id'})\">Delete</button></td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"container\" style=\"margin: 2rem;\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <a href=\"javascript:callGoal('Edit.goal', {id:'@user.id'})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </a>\n                        <a href=\"javascript:callGoal('Delete.goal', {id:'@user.id'})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </a>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```css\n.container {\n    margin: 2rem;\n}\n```\n```javascript\n// No javascript needed\n```"
    },
    "answer": "```html\n<div class=\"container\" style=\"margin: 2rem;\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Created</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var user in Model.users)\n            {\n                <tr>\n                    <td>@user.Name</td>\n                    <td>@user.Email</td>\n                    <td>@user.Created.ToString(\"d\")</td>\n                    <td>\n                        <a href=\"javascript:callGoal('Edit.goal', {id:'@user.id'})\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-edit\"></i>\n                        </a>\n                        <a href=\"javascript:callGoal('Delete.goal', {id:'@user.id'})\" class=\"btn btn-danger\">\n                            <i class=\"fas fa-trash-alt\"></i>\n                        </a>\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n</div>\n```\n```css\n.container {\n    margin: 2rem;\n}\n```\n```javascript\n// No javascript needed\n```",
    "hash": "2491121960b64036f3c9c8cacd76394359455424323fcaa0ce699e8ff8b1d0b0",
    "Created": "2023-10-27T16:54:44.7895772Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "form, Name  and Email, 2rem margin\n    %user.Name%, %user.Email%, '%user.id%'\n    Save button, call !Save",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateForm\",\n\"StepDescription\": \"Create a form with fields for Name and Email, each with a 2rem margin. The fields are pre-filled with the user's Name, Email, and ID. There is also a Save button that calls the Save function when clicked.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateForm\",\n\"StepDescription\": \"Create a form with fields for Name and Email, each with a 2rem margin. The fields are pre-filled with the user's Name, Email, and ID. There is also a Save button that calls the Save function when clicked.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "7b7544281705d6d3060ca7a4e604131fcc9f179779159372dac56c8a13c85464",
    "Created": "2023-10-27T16:51:42.1013537Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %. They are case sensitive so keep them as defined\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\nAll object.Id or object.id are long and needs to be wrapped with single quote(')\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: form, Name  and Email, 2rem margin\n    %user.Name%, %user.Email%, '%user.id%'\n    Save button, call !Save",
      "assistant": "\r\n### variables available ###\r\n\r\n### variables available ###\r\n### For context ###\r\n(Goal) Edit\n- (%step0%) [db] select * from users where id=%id%, write to %user%\n- (%step1%) form, Name  and Email, 2rem margin\n    %user.Name%, %user.Email%, '%user.id%'\n    Save button, call !Save\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n\t\t<td><a href=\"javascript:callGoal('edit.goal', {id:'@task.Id'})\">Edit</a></td>\r\n\t\t<td><button onclick=\"callGoal('delete.goal', {id:'@task.Id'})\">Delete</button></td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"container\" style=\"margin: 2rem;\">\n    <form id=\"userForm\">\n        <div class=\"mb-3\">\n            <label for=\"name\" class=\"form-label\">Name</label>\n            <input type=\"text\" class=\"form-control\" id=\"name\" value=\"@Model.user.Name\">\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"email\" class=\"form-label\">Email</label>\n            <input type=\"email\" class=\"form-control\" id=\"email\" value=\"@Model.user.Email\">\n        </div>\n        <input type=\"hidden\" id=\"userId\" value=\"@Model.user.id\">\n        <button type=\"button\" class=\"btn btn-primary\" id=\"saveButton\">Save</button>\n    </form>\n</div>\n```\n\n```javascript\ndocument.getElementById('saveButton').addEventListener('click', function() {\n    var name = document.getElementById('name').value;\n    var email = document.getElementById('email').value;\n    var userId = document.getElementById('userId').value;\n    callGoal('Save', {id: userId, Name: name, Email: email});\n});\n```\n\n```css\n.container {\n    margin: 2rem;\n}\n```"
    },
    "answer": "```html\n<div class=\"container\" style=\"margin: 2rem;\">\n    <form id=\"userForm\">\n        <div class=\"mb-3\">\n            <label for=\"name\" class=\"form-label\">Name</label>\n            <input type=\"text\" class=\"form-control\" id=\"name\" value=\"@Model.user.Name\">\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"email\" class=\"form-label\">Email</label>\n            <input type=\"email\" class=\"form-control\" id=\"email\" value=\"@Model.user.Email\">\n        </div>\n        <input type=\"hidden\" id=\"userId\" value=\"@Model.user.id\">\n        <button type=\"button\" class=\"btn btn-primary\" id=\"saveButton\">Save</button>\n    </form>\n</div>\n```\n\n```javascript\ndocument.getElementById('saveButton').addEventListener('click', function() {\n    var name = document.getElementById('name').value;\n    var email = document.getElementById('email').value;\n    var userId = document.getElementById('userId').value;\n    callGoal('Save', {id: userId, Name: name, Email: email});\n});\n```\n\n```css\n.container {\n    margin: 2rem;\n}\n```",
    "hash": "fd847662c0d3257109d22a78a41adbffee5e5323a64eb87863577aae81fb3ac7",
    "Created": "2023-10-27T17:24:33.2666851Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "update users, %name%, %email%, where id=%id%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"UpdateUser\",\n\"StepDescription\": \"Update the user's name and email where the user's id matches the provided id\",\n\"Modules\": [\"PLang.Modules.DatabaseModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"UpdateUser\",\n\"StepDescription\": \"Update the user's name and email where the user's id matches the provided id\",\n\"Modules\": [\"PLang.Modules.DatabaseModule\"],\n\"WaitForExecution\": true}",
    "hash": "2f7a4dbd7dab93516997af18aad267898171b159be2aca295eb8401a5c0cbad2",
    "Created": "2023-10-27T16:52:47.3181886Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: update users, %name%, %email%, where id=%id%",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"UpdateUser\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"name\", \"Value\": \"%name%\"},\n    {\"Type\": \"string\", \"Name\": \"email\", \"Value\": \"%email%\"},\n    {\"Type\": \"int\", \"Name\": \"id\", \"Value\": \"%id%\"}\n]}"
    },
    "answer": "{\"FunctionName\": \"UpdateUser\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"name\", \"Value\": \"%name%\"},\n    {\"Type\": \"string\", \"Name\": \"email\", \"Value\": \"%email%\"},\n    {\"Type\": \"int\", \"Name\": \"id\", \"Value\": \"%id%\"}\n]}",
    "hash": "cdea83d06d479eb0924a32f7d6eb962b626b35acd1d50b3c7f2b3770f3389f12",
    "Created": "2023-10-27T16:52:58.6955444Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[db] update users, %name%, %email%, where id=%id%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.DbModule, { \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"UpdateUser\",\n\"StepDescription\": \"Update the 'users' table in the database with the provided name and email where the user id matches the provided id.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"UpdateUser\",\n\"StepDescription\": \"Update the 'users' table in the database with the provided name and email where the user id matches the provided id.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}",
    "hash": "5764ab107e373c1e2bedfb5b8ed4e06fec24b8aecd79062b11ffff24cb1c3108",
    "Created": "2023-10-27T16:53:26.1580605Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: [db] update users, %name%, %email%, where id=%id%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n\n## table & views in db start ##\r\n[{\"name\":\"__Events__\"},{\"name\":\"users\"}]\r\n## table & view in db end ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Update\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"Update\", \"TableNames\": [\"users\"]}",
    "hash": "2ee7170fbaba990288cda9aa3b816df1217cf7c3849255681572192f12dc44cb",
    "Created": "2023-10-27T16:53:28.8938543Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Map user command to this c# function: \r\n\r\n## csharp function ##\r\nInt32 Update(String sql, Dictionary`2? Parameters)  \r\n## csharp function ##\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%. Do not remove %\r\nYou MUST generate a valid sql statement for SQLiteConnection.\r\nYou MUST provide Parameters if SQL has @parameter.\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"Warning\": string,\n\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [db] update users, %name%, %email%, where id=%id%",
      "assistant": "# examples #\r\n\"update tableX, street=%full_street%, %zip%\" => sql: \"UPDATE tableX SET street = @full_street, zip = @zip\", parameters:[{full_street:%full_street%, zip:%zip%}], Warning: Missing WHERE statement can affect rows that should not\r\n\"update tableB, %name%, %phone% where id=%id%\" => sql: \"UPDATE tableB SET name=@name, phone=@phone WHERE id=@id\", parameters:[{name:%name%, phone:%phone%, id=%id%}] \r\n# examples #\n### users table info starts ###\n[{\"cid\":0,\"name\":\"id\",\"type\":\"INTEGER\",\"notnull\":0,\"dflt_value\":null,\"pk\":1},{\"cid\":1,\"name\":\"Name\",\"type\":\"TEXT\",\"notnull\":0,\"dflt_value\":null,\"pk\":0},{\"cid\":2,\"name\":\"Email\",\"type\":\"TEXT\",\"notnull\":0,\"dflt_value\":null,\"pk\":0},{\"cid\":3,\"name\":\"Created\",\"type\":\"DATETIME\",\"notnull\":0,\"dflt_value\":\"CURRENT_TIMESTAMP\",\"pk\":0}]\n### table info ends ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"Warning\": \"Missing WHERE statement can affect rows that should not\",\n\"FunctionName\": \"Update\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"sql\", \"Value\": \"UPDATE users SET Name = @name, Email = @email WHERE id = @id\"},\n    {\"Type\": \"Dictionary`2\", \"Name\": \"Parameters\", \"Value\": \n        [\n            {\"Key\": \"@name\", \"Value\": \"%name%\"},\n            {\"Key\": \"@email\", \"Value\": \"%email%\"},\n            {\"Key\": \"@id\", \"Value\": \"%id%\"}\n        ]\n    }\n]}"
    },
    "answer": "{\"Warning\": \"Missing WHERE statement can affect rows that should not\",\n\"FunctionName\": \"Update\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"sql\", \"Value\": \"UPDATE users SET Name = @name, Email = @email WHERE id = @id\"},\n    {\"Type\": \"Dictionary`2\", \"Name\": \"Parameters\", \"Value\": \n        [\n            {\"Key\": \"@name\", \"Value\": \"%name%\"},\n            {\"Key\": \"@email\", \"Value\": \"%email%\"},\n            {\"Key\": \"@id\", \"Value\": \"%id%\"}\n        ]\n    }\n]}",
    "hash": "3aebd2ed599eb26fa1c0d4f2c708ebce3293d128c31b0b8a45af93851245dc9f",
    "Created": "2023-10-27T16:53:44.8478324Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "call !LoadUsers",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"LoadUsers\",\n\"StepDescription\": \"This step involves calling the function 'LoadUsers' which is likely to fetch and load user data.\",\n\"Modules\": [\"N/A\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"LoadUsers\",\n\"StepDescription\": \"This step involves calling the function 'LoadUsers' which is likely to fetch and load user data.\",\n\"Modules\": [\"N/A\"],\n\"WaitForExecution\": true}",
    "hash": "169ff02cd07f1a5cd784b3a8f67f14ab6c6447d291c120198c17669362548a2f",
    "Created": "2023-10-27T16:53:51.3424029Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[call] call !LoadUsers",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.CallGoalModule, { \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"LoadUsers\",\n\"StepDescription\": \"This step involves calling the function 'LoadUsers' which is responsible for loading user data.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"LoadUsers\",\n\"StepDescription\": \"This step involves calling the function 'LoadUsers' which is responsible for loading user data.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "032a2a81ca3bda6ccb46fef95f8d72f8a27de6e3eec7e2cf69ac48a882191f10",
    "Created": "2023-10-27T16:54:50.1843593Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CallGoalModule.Builder",
      "system": "\r\n Parse user command, to match the parameters needed for the RunGoal function\r\n\r\nVariables are defined with starting and ending %\r\n\r\nGoalName should be prefixed with !\r\nParameters are optional, they are key value of a variable, if user does not define key, then it is same as value.\r\n\r\n== Examples starts ==\r\n!ParseText then ParseText is goalName, no parameters\r\n!Gmail.Search %query%, then Gmail.Search is goalName,  %query% is key and value in parameters\r\nFolder.Search q=%fileName%, then key is q, and value is %fileName%\r\n== Examples ends ==\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [call] call !LoadUsers",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunGoal(String goalName, Dictionary`2<String>? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 0) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"String\",\n      \"Name\": \"goalName\",\n      \"Value\": \"LoadUsers\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}"
    },
    "answer": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"String\",\n      \"Name\": \"goalName\",\n      \"Value\": \"LoadUsers\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}",
    "hash": "23bbc5509939383ac7444aa16980c43e763217f63d2e4fe741c0dc1fe5838b41",
    "Created": "2023-10-27T16:54:58.8305933Z"
  },
  {
    "question": {
      "type": "GoalApiInfo",
      "system": "Determine the Method and write description of this api, using the content of the file.\r\nMethod can be: GET, POST, DELETE, PUT, PATCH, OPTIONS, HEAD. The content will describe a function in multiple steps.\r\nFrom the first line, you should extrapolate the CacheControl if the user defines it.\r\nCacheControlPrivateOrPublic: public or private\r\nNoCacheOrNoStore: no-cache or no-store\r\n\r\nYou MUST response in JSON, scheme: {\"Method\" : string, \"Description\" : string, \"ContentEncoding\" : utf-8, \"ContentType\" : application/json, \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null, }\r\n",
      "question": "Delete\n[db] delete from users where id=%id%\ncall !LoadUsers",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"Method\" : \"DELETE\", \"Description\" : \"This API endpoint deletes a user from the database using the user's ID. After the deletion, it calls the LoadUsers function to update the user list.\", \"ContentEncoding\" : \"utf-8\", \"ContentType\" : \"application/json\", \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null}"
    },
    "answer": "{\"Method\" : \"DELETE\", \"Description\" : \"This API endpoint deletes a user from the database using the user's ID. After the deletion, it calls the LoadUsers function to update the user list.\", \"ContentEncoding\" : \"utf-8\", \"ContentType\" : \"application/json\", \"MaxContentLengthInBytes\" : 4096, \"CacheControlPrivateOrPublic\" : null, \"CacheControlMaxAge\" : null, \"NoCacheOrNoStore\" : null}",
    "hash": "11abc5063dda95d23f29a608988a6706f39138bfc73055af934942e56260ed3a",
    "Created": "2023-10-27T17:02:59.4796654Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[db] delete from users where id=%id%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.DbModule, { \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"DeleteUser\",\n\"StepDescription\": \"Delete a user from the 'users' table in the database where the user's id matches the provided id.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"DeleteUser\",\n\"StepDescription\": \"Delete a user from the 'users' table in the database where the user's id matches the provided id.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}",
    "hash": "a1b7beaefc25103b7de07307ca047e4296aed191890afd343f735f974e34c1fc",
    "Created": "2023-10-27T17:03:05.7931923Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: [db] delete from users where id=%id%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, Dictionary`2<String>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, Dictionary`2<String>? Parameters) \nInt32 Delete(String sql, Dictionary`2<String>? Parameters) \nInt32 Insert(String sql, Dictionary`2<String>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, Dictionary`2<String>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n\n## table & views in db start ##\r\n[{\"name\":\"__Events__\"},{\"name\":\"users\"}]\r\n## table & view in db end ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Delete\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"Delete\", \"TableNames\": [\"users\"]}",
    "hash": "f79f00b686a0d6478e3e27e513323d173eddaddd9007a0e81515805a72524b5a",
    "Created": "2023-10-27T17:03:08.8847805Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Map user command to this c# function: \r\n\r\n## csharp function ##\r\nInt32 Delete(String sql, Dictionary`2? Parameters)  \r\n## csharp function ##\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%.\r\nYou MUST generate a valid sql statement for SQLiteConnection.\r\nYou MUST provide Parameters if SQL has @parameter.\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"Warning\": string,\n\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [db] delete from users where id=%id%",
      "assistant": "# examples #\r\n\"delete from tableX\" => sql: \"DELETE FROM tableX\", warning: Missing WHERE statement can affect rows that should not\r\n\"delete tableB where id=%id%\" => sql: \"DELETE FROM tableB WHERE id=@id\", warning: null\r\n# examples #\n### users table info starts ###\n[{\"cid\":0,\"name\":\"id\",\"type\":\"INTEGER\",\"notnull\":0,\"dflt_value\":null,\"pk\":1},{\"cid\":1,\"name\":\"Name\",\"type\":\"TEXT\",\"notnull\":0,\"dflt_value\":null,\"pk\":0},{\"cid\":2,\"name\":\"Email\",\"type\":\"TEXT\",\"notnull\":0,\"dflt_value\":null,\"pk\":0},{\"cid\":3,\"name\":\"Created\",\"type\":\"DATETIME\",\"notnull\":0,\"dflt_value\":\"CURRENT_TIMESTAMP\",\"pk\":0}]\n### table info ends ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"Warning\": null,\n\"FunctionName\": \"Delete\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"sql\",\n\"Value\": \"DELETE FROM users WHERE id=@id\"},\n{\"Type\": \"Dictionary`2\",\n\"Name\": \"Parameters\",\n\"Value\": {\"@id\": \"%id%\"}}],\n\"ReturnValue\": {\"Type\": \"Int32\",\n\"VariableName\": \"rowsAffected\"}}"
    },
    "answer": "{\"Warning\": null,\n\"FunctionName\": \"Delete\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"sql\",\n\"Value\": \"DELETE FROM users WHERE id=@id\"},\n{\"Type\": \"Dictionary`2\",\n\"Name\": \"Parameters\",\n\"Value\": {\"@id\": \"%id%\"}}],\n\"ReturnValue\": {\"Type\": \"Int32\",\n\"VariableName\": \"rowsAffected\"}}",
    "hash": "886fad9534674e97c3d90a1b1b7221bb658538e8d5bfe1ac8021a419d501e812",
    "Created": "2023-10-27T17:03:20.8900546Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "call !LoadUsers",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }, { \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"StepName\": \"LoadUsers\",\n\"StepDescription\": \"This step involves calling the 'LoadUsers' function to retrieve a list of users.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true\n}"
    },
    "answer": "{\n\"StepName\": \"LoadUsers\",\n\"StepDescription\": \"This step involves calling the 'LoadUsers' function to retrieve a list of users.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true\n}",
    "hash": "44a636b948bbc5cfea7abf625bbf6aa5e86e56731db978d5227faa2caab024a4",
    "Created": "2023-10-27T17:04:02.8809417Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CallGoalModule.Builder",
      "system": "\r\n Parse user command, to match the parameters needed for the RunGoal function\r\n\r\nVariables are defined with starting and ending %\r\n\r\nGoalName should be prefixed with !\r\nParameters are optional, they are key value of a variable, if user does not define key, then it is same as value.\r\n\r\n== Examples starts ==\r\n!ParseText then ParseText is goalName, no parameters\r\n!Gmail.Search %query%, then Gmail.Search is goalName,  %query% is key and value in parameters\r\nFolder.Search q=%fileName%, then key is q, and value is %fileName%\r\n== Examples ends ==\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: call !LoadUsers",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunGoal(String goalName, Dictionary`2<String>? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 0) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"String\",\n      \"Name\": \"goalName\",\n      \"Value\": \"LoadUsers\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}"
    },
    "answer": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"String\",\n      \"Name\": \"goalName\",\n      \"Value\": \"LoadUsers\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}",
    "hash": "8786955f8d381c7cefbf1e025106dc4134729ebcdf30246bf412edcb4b06a5b5",
    "Created": "2023-10-27T17:04:13.165263Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "start new window app",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }, { \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"StartNewWindowApp\",\n\"StepDescription\": \"This step involves starting a new window application.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"StartNewWindowApp\",\n\"StepDescription\": \"This step involves starting a new window application.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "4e92bb5af97c16a7760a07980f040de7d7720a2d997f05747082c82ce25dafe8",
    "Created": "2023-10-27T17:11:53.6352085Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CallGoalModule.Builder",
      "system": "\r\n Parse user command, to match the parameters needed for the RunGoal function\r\n\r\nVariables are defined with starting and ending %\r\n\r\nGoalName should be prefixed with !\r\nParameters are optional, they are key value of a variable, if user does not define key, then it is same as value.\r\n\r\n== Examples starts ==\r\n!ParseText then ParseText is goalName, no parameters\r\n!Gmail.Search %query%, then Gmail.Search is goalName,  %query% is key and value in parameters\r\nFolder.Search q=%fileName%, then key is q, and value is %fileName%\r\n== Examples ends ==\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: start new window app",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunGoal(String goalName, Dictionary`2<String>? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 0) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"RunGoal\", \"Parameters\": [{\"Type\": \"string\", \"Name\": \"goalName\", \"Value\": \"start new window app\"}]}"
    },
    "answer": "{\"FunctionName\": \"RunGoal\", \"Parameters\": [{\"Type\": \"string\", \"Name\": \"goalName\", \"Value\": \"start new window app\"}]}",
    "hash": "ef008647fde6b1080df8899670e27091c69f087d17fe8b355f29141fd7a8e78e",
    "Created": "2023-10-27T17:11:57.7480093Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "form, Name  and Email, 2rem margin\n    %user.Name%, %user.Email%, '%user.id%'\n    Save button, call !Save",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }, { \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"FormCreation\",\n\"StepDescription\": \"Create a form with fields for Name and Email, each with a 2rem margin. The fields are pre-filled with the user's Name, Email, and ID. There is also a Save button that, when clicked, calls the Save function.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"FormCreation\",\n\"StepDescription\": \"Create a form with fields for Name and Email, each with a 2rem margin. The fields are pre-filled with the user's Name, Email, and ID. There is also a Save button that, when clicked, calls the Save function.\",\n\"Modules\": [\"PLang.Modules.HtmlModule\"],\n\"WaitForExecution\": true}",
    "hash": "7377b34cc7d83fd6ab5dcd5fb22e39d3462df15e99d7197a763c2118a9628fa6",
    "Created": "2023-10-27T17:12:07.1463992Z"
  },
  {
    "question": {
      "type": "PLang.Modules.HtmlModule.Builder",
      "system": "Create the html, javascript and css needed from the user command using Bootstrap 5.1. \r\n\r\nGoal has series of steps, it is only to provide context. Steps start with dash(-), steps can have sub steps, they are indented\r\n\r\nVariables are defined with starting and ending %. They are case sensitive so keep them as defined\r\n\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\nAll object.Id or object.id are long and needs to be wrapped with single quote(')\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed to the user, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nYou must return ```html, ```css, ```javascript, \r\nNo extra text to explain, be concise\r\n\n\nOnly write the raw html and javascript no summary, no extra text to explain, be concise",
      "question": "command: form, Name  and Email, 2rem margin\n    %user.Name%, %user.Email%, '%user.id%'\n    Save button, call !Save",
      "assistant": "\r\n### variables available ###\r\n\r\n### variables available ###\r\n### For context ###\r\n(Goal) Edit\n- (%step0%) [db] select * from users where id=%id%, write to %user%\n- (%step1%) start new window app\n- (%step2%) form, Name  and Email, 2rem margin\n    %user.Name%, %user.Email%, '%user.id%'\n    Save button, call !Save\n\r\n### For context ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n\t\t<td><a href=\"javascript:callGoal('edit.goal', {id:'@task.Id'})\">Edit</a></td>\r\n\t\t<td><button onclick=\"callGoal('delete.goal', {id:'@task.Id'})\">Delete</button></td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```html\n<div class=\"container\" style=\"margin: 2rem;\">\n    <form id=\"userForm\">\n        <div class=\"mb-3\">\n            <label for=\"userName\" class=\"form-label\">Name</label>\n            <input type=\"text\" class=\"form-control\" id=\"userName\" value=\"@Model.user.Name\">\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"userEmail\" class=\"form-label\">Email</label>\n            <input type=\"email\" class=\"form-control\" id=\"userEmail\" value=\"@Model.user.Email\">\n        </div>\n        <input type=\"hidden\" id=\"userId\" value=\"@Model.user.id\">\n        <button type=\"button\" class=\"btn btn-primary\" onclick=\"callGoal('Save', {id: document.getElementById('userId').value, name: document.getElementById('userName').value, email: document.getElementById('userEmail').value})\">Save</button>\n    </form>\n</div>\n```\n\n```css\n.container {\n    margin: 2rem;\n}\n```\n\n```javascript\ndocument.getElementById('userForm').addEventListener('submit', function(e) {\n    e.preventDefault();\n    callGoal('Save', {\n        id: document.getElementById('userId').value,\n        name: document.getElementById('userName').value,\n        email: document.getElementById('userEmail').value\n    });\n});\n```"
    },
    "answer": "```html\n<div class=\"container\" style=\"margin: 2rem;\">\n    <form id=\"userForm\">\n        <div class=\"mb-3\">\n            <label for=\"userName\" class=\"form-label\">Name</label>\n            <input type=\"text\" class=\"form-control\" id=\"userName\" value=\"@Model.user.Name\">\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"userEmail\" class=\"form-label\">Email</label>\n            <input type=\"email\" class=\"form-control\" id=\"userEmail\" value=\"@Model.user.Email\">\n        </div>\n        <input type=\"hidden\" id=\"userId\" value=\"@Model.user.id\">\n        <button type=\"button\" class=\"btn btn-primary\" onclick=\"callGoal('Save', {id: document.getElementById('userId').value, name: document.getElementById('userName').value, email: document.getElementById('userEmail').value})\">Save</button>\n    </form>\n</div>\n```\n\n```css\n.container {\n    margin: 2rem;\n}\n```\n\n```javascript\ndocument.getElementById('userForm').addEventListener('submit', function(e) {\n    e.preventDefault();\n    callGoal('Save', {\n        id: document.getElementById('userId').value,\n        name: document.getElementById('userName').value,\n        email: document.getElementById('userEmail').value\n    });\n});\n```",
    "hash": "2b7eb5613c9c58544708f36abfd7d9c32aac0c328550ce01b7649c4fd117e23d",
    "Created": "2023-10-27T17:12:38.5145881Z"
  }
]