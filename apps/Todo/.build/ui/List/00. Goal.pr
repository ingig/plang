{
  "GoalName": "List",
  "Comment": null,
  "GoalSteps": [
    {
      "Text": "select everything from todos where not completed, order by newest, write to %todos%",
      "Comment": null,
      "ModuleType": "PLang.Modules.DbModule",
      "Name": "SelectUncompletedTodos",
      "Description": "Select all the tasks from the 'todos' table where the tasks are not completed. Order the results by the newest tasks first and write the results to the 'todos' variable.",
      "PrFileName": "01. SelectUncompletedTodos.pr",
      "RelativePrPath": ".build\\ui\\List\\01. SelectUncompletedTodos.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2023-12-23T11:27:57.2053075+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 0,
      "LineNumber": 1,
      "LlmQuestion": {
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"? : { String : String, ... }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "select everything from todos where not completed, order by newest, write to %todos%",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }, { \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile\" }, { \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database query, select, update, insert, delete and execute sql statement\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%todos%(dynamic), \r\n## variables available ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "Reload": false,
        "PreviousResult": null,
        "RawResponse": "{\r\n  \"StepName\": \"SelectUncompletedTodos\",\r\n  \"StepDescription\": \"Select all the tasks from the 'todos' table where the tasks are not completed. Order the results by the newest tasks first and write the results to the 'todos' variable.\",\r\n  \"Modules\": [\r\n    \"PLang.Modules.DbModule\"\r\n  ],\r\n  \"WaitForExecution\": true\r\n}"
      }
    },
    {
      "Text": "[html] button, \"New Task\", call !/ui/New",
      "Comment": null,
      "ModuleType": "PLang.Modules.HtmlModule",
      "Name": "CreateNewTaskButton",
      "Description": "Create a button labeled 'New Task' in HTML that, when clicked, calls the '/ui/New' function.",
      "PrFileName": "02. CreateNewTaskButton.pr",
      "RelativePrPath": ".build\\ui\\List\\02. CreateNewTaskButton.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2023-12-23T12:16:21.8609371+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 1,
      "LineNumber": 2,
      "LlmQuestion": {
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"? : { String : String, ... }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "[html] button, \"New Task\", call !/ui/New",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.HtmlModule, { \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }, { \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile\" }, { \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database query, select, update, insert, delete and execute sql statement\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "Reload": false,
        "PreviousResult": null,
        "RawResponse": "{\r\n  \"StepName\": \"CreateNewTaskButton\",\r\n  \"StepDescription\": \"Create a button labeled 'New Task' in HTML that, when clicked, calls the '/ui/New' function.\",\r\n  \"Modules\": [\r\n    \"PLang.Modules.HtmlModule\",\r\n    \"PLang.Modules.CallGoalModule\"\r\n  ],\r\n  \"WaitForExecution\": true\r\n}"
      }
    },
    {
      "Text": "table\n    header: Task, Category, Due Date, Created\n    body: text, category, due_date, created\n        action: Edit, call !Edit, parameter Id",
      "Comment": null,
      "ModuleType": "PLang.Modules.HtmlModule",
      "Name": "CreateTableWithActions",
      "Description": "Create a table with headers 'Task', 'Category', 'Due Date', 'Created'. The body of the table will contain the fields 'text', 'category', 'due_date', 'created'. Each row will have an 'Edit' action that calls the 'Edit' function with the 'Id' parameter.",
      "PrFileName": "03. CreateTableWithActions.pr",
      "RelativePrPath": ".build\\ui\\List\\03. CreateTableWithActions.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2023-12-23T12:32:54.3784351+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 2,
      "LineNumber": 3,
      "LlmQuestion": {
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"? : { String : String, ... }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "table\n    header: Task, Category, Due Date, Created\n    body: text, category, due_date, created\n        action: Edit, call !Edit, parameter Id",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }, { \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile\" }, { \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database query, select, update, insert, delete and execute sql statement\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "Reload": false,
        "PreviousResult": null,
        "RawResponse": "{\r\n  \"StepName\": \"CreateTableWithActions\",\r\n  \"StepDescription\": \"Create a table with headers 'Task', 'Category', 'Due Date', 'Created'. The body of the table will contain the fields 'text', 'category', 'due_date', 'created'. Each row will have an 'Edit' action that calls the 'Edit' function with the 'Id' parameter.\",\r\n  \"Modules\": [\r\n    \"PLang.Modules.HtmlModule\"\r\n  ],\r\n  \"WaitForExecution\": true\r\n}"
      }
    }
  ],
  "Description": null,
  "Visibility": 1,
  "GoalFileName": "List.goal",
  "RelativeGoalPath": "\\ui\\List.goal",
  "RelativeGoalFolderPath": "\\ui",
  "RelativePrPath": ".build\\ui\\List\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\ui\\List",
  "BuilderVersion": "0.1.0.0",
  "GoalApiInfo": null,
  "Injections": [],
  "Signature": "6575b024d7856db5df5142e596f6494bb5a8aca20a47e4c45692ce564a1f4527"
}