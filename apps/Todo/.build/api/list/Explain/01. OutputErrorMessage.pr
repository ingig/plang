{
  "Action": {
    "FunctionName": "Write",
    "Parameters": [
      {
        "Type": "string",
        "Name": "content",
        "Value": "There was an error"
      },
      {
        "Type": "bool",
        "Name": "writeToBuffer",
        "Value": false
      },
      {
        "Type": "string",
        "Name": "type",
        "Value": "error"
      },
      {
        "Type": "int",
        "Name": "statusCode",
        "Value": 500
      }
    ],
    "ReturnValue": null
  },
  "Text": "write out 'There was an error'",
  "Reload": false,
  "LlmQuestion": {
    "type": "PLang.Modules.GenericFunctionBuilder",
    "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
    "question": "command: write out 'There was an error'",
    "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text, Int32? statusCode = 200)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. statusCode(like http status code) should be defined by user.. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text, Int32? statusCode = 200)  // Write to the output. type can be text|warning|error|info|debug|trace. statusCode(like http status code) should be defined by user.. \n\r\n## functions available ends ##",
    "model": "gpt-4",
    "caching": true,
    "Reload": false,
    "PreviousResult": null,
    "RawResponse": "{\r\n  \"FunctionName\": \"Write\",\r\n  \"Parameters\": [\r\n    {\r\n      \"Type\": \"string\",\r\n      \"Name\": \"content\",\r\n      \"Value\": \"There was an error\"\r\n    },\r\n    {\r\n      \"Type\": \"bool\",\r\n      \"Name\": \"writeToBuffer\",\r\n      \"Value\": false\r\n    },\r\n    {\r\n      \"Type\": \"string\",\r\n      \"Name\": \"type\",\r\n      \"Value\": \"error\"\r\n    },\r\n    {\r\n      \"Type\": \"int\",\r\n      \"Name\": \"statusCode\",\r\n      \"Value\": 500\r\n    }\r\n  ]\r\n}"
  },
  "RunOnBuild": false
}