{
  "Action": {
    "FunctionName": "Select",
    "Inputs": {
      "sql": "select id from fine_tuning where hash=@hash",
      "Parameters": {
        "@hash": "%item.hash%"
      }
    },
    "Outputs": {
      "DataTable": "%id%"
    }
  },
  "Text": "select id from fine_tuning where hash=%item.hash%, write to %id%",
  "Reload": false,
  "LlmQuestion": {
    "type": "PLang.Modules.DbModule",
    "system": "\r\n\t\t\tParse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nInputs: are parameters that are required for the function and %variables% needed\r\nOutputs: Dictionary<string, string> where key is type of return, value is variable name with %, if function is not void. Use best matching defined variable, override the variable if needed\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\n\n\nYou MUST respond in JSON, scheme\r\n \"Action\": {\r\n  \"FunctionName\": \"String\",\r\n  \"Inputs\": {\r\n    \"key\": \"String\",\r\n    \"value\": \"Object\"\r\n  },\r\n  \"Outputs\": {\r\n    \"key\": \"String\",\r\n    \"value\": \"Object\"\r\n  }\r\n}",
    "question": "command: select id from fine_tuning where hash=%item.hash%, write to %id%",
    "assistant": "\r\n## functions available defined in csharp ##\r\nGetDb()\nExecute(String sql)\nBeginTransaction()\nEndTransaction()\nSelect(String sql, Dictionary`2? Parameters)\nUpdate(String sql, Dictionary`2? Parameters)\nInsert(String sql, Dictionary`2? Parameters, String? Output)\n\r\n## functions available ends ##\r\n## defined variables ##\r\n{}\r\n## defined variables ##\nCreate SQL statement that works with sqlite.\r\nYou MUST provide Parameters in Inputs if SQL has @parameter.\r\nChoose the best method to use, if the method is not provided that fits the SQL, you can use Execute to run SQL statement.\r\nIf the user is doing insert and wants the id output, make sure to include the select id after insert in the same sql statement\r\n\r\n## table & views in db start ##\r\nnull\r\n## table & view in db end ##\r\n",
    "model": "gpt-4",
    "caching": true,
    "Reload": false,
    "PreviousResult": null,
    "RawResponse": "{\n  \"Action\": {\n    \"FunctionName\": \"Select\",\n    \"Inputs\": {\n      \"sql\": \"select id from fine_tuning where hash=@hash\",\n      \"Parameters\": {\n        \"@hash\": \"%item.hash%\"\n      }\n    },\n    \"Outputs\": {\n      \"DataTable\": \"%id%\"\n    }\n  }\n}"
  },
  "Tests": null
}