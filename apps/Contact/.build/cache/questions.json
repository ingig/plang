[
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\n\r\nRead the description of each module, then determine which module to use\r\nUser wants to use PLang.Modules.LlmModule\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": String,\n\"StepDescription\": String,\n\"Modules\": string[],\n\"WaitForExecution\": Boolean,\n\"CachingHandler\": {\"TimeInMilliseconds\": Int64,\n\"CacheKey\": String,\n\"CachingType\": Int32},\n\"ErrorHandler\": {\"IgnoreErrors\": Boolean,\n\"Except\": String[] = null} = null,\n\"RetryHandler\": {\"RetryCount\": Int32,\n\"RetryDelayInMilliseconds\": Int32} = null}\r\nBe Concise\r\n",
      "question": "[llm] system: parse user input to match this json scheme,\n        {honorific_prefix : string\n        full_name : string\n        given_name : string\n        family_name : string\n        nick_name : json [{name:string, tag:string[], isDefault:bool}]\n        email : json [{ email: string, tag: string[], isDefault:bool }]\n        tel: json [{ email: string, tag: string[], isDefault:bool}]\n        nostrPublicKey : json [{ key: string, tag: string[], isDefault:bool}]\n        walletPublicKey : json [{key:string, tab:string[], isDefault:bool}]\n        address : json [{ street-address: string, postcode: string, city: string, country: string, isDefault: bool}]\n        custom: [{string: string}]\n        created (datetime, default now)\n        }\n        user: %input%\n        write to %user%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve variables to and from a list or dictionary. It can be local variable or static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentSettingsModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ContactsModule\" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ParseUserInput\",\n\"StepDescription\": \"Parse the user input to match the provided JSON scheme and write the parsed data to the variable %user%\",\n\"Modules\": [\"PLang.Modules.LlmModule\"],\n\"WaitForExecution\": true,\n\"CachingHandler\": null,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"ParseUserInput\",\n\"StepDescription\": \"Parse the user input to match the provided JSON scheme and write the parsed data to the variable %user%\",\n\"Modules\": [\"PLang.Modules.LlmModule\"],\n\"WaitForExecution\": true,\n\"CachingHandler\": null,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}",
    "hash": "5f959a327085899287f94bac3c51d7c3624d4b4555d50954f50eb37ed79f1eb2",
    "Created": "2023-09-11T21:48:32.558166Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": String,\n\"Parameters\": [{\"Type\": String,\n\"Name\": String,\n\"Value\": String}],\n\"ReturnValue\": {\"Type\": String,\n\"VariableName\": String} = null}",
      "question": "command: [llm] system: parse user input to match this json scheme,\n        {honorific_prefix : string\n        full_name : string\n        given_name : string\n        family_name : string\n        nick_name : json [{name:string, tag:string[], isDefault:bool}]\n        email : json [{ email: string, tag: string[], isDefault:bool }]\n        tel: json [{ email: string, tag: string[], isDefault:bool}]\n        nostrPublicKey : json [{ key: string, tag: string[], isDefault:bool}]\n        walletPublicKey : json [{key:string, tab:string[], isDefault:bool}]\n        address : json [{ street-address: string, postcode: string, city: string, country: string, isDefault: bool}]\n        custom: [{string: string}]\n        created (datetime, default now)\n        }\n        user: %input%\n        write to %user%",
      "assistant": "## functions available defined in csharp ##\r\nvoid AskLlm(String system, String assistant, String user, String scheme, String? model = gpt-4, Double? tempature = 0, Double? topP = 0, Double? frequencyPenalty = 0, Double? presencePenalty = 0, Boolean? cacheResponse = True) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%input%, %user%\r\n## defined variables ##\nThe following user request is for for constructing a message to LLM engine\r\n\r\nDetermine what part is system, assistant and user properties. If you cannot map it, the whole user request should be on user property\r\nDetermine the scheme, it is the json scheme that the llm is expected to return, this is required and cannot be empty string. Default scheme is {Result:string}\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AskLlm\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"system\", \"Value\": \"parse user input to match this json scheme\"},\n    {\"Type\": \"String\", \"Name\": \"assistant\", \"Value\": \"\"},\n    {\"Type\": \"String\", \"Name\": \"user\", \"Value\": \"%input%\"},\n    {\"Type\": \"String\", \"Name\": \"scheme\", \"Value\": \"{honorific_prefix : string, full_name : string, given_name : string, family_name : string, nick_name : json [{name:string, tag:string[], isDefault:bool}], email : json [{ email: string, tag: string[], isDefault:bool }], tel: json [{ email: string, tag: string[], isDefault:bool}], nostrPublicKey : json [{ key: string, tag: string[], isDefault:bool}], walletPublicKey : json [{key:string, tab:string[], isDefault:bool}], address : json [{ street-address: string, postcode: string, city: string, country: string, isDefault: bool}], custom: [{string: string}], created (datetime, default now)}\"}\n],\n\"ReturnValue\": {\"Type\": \"String\", \"VariableName\": \"%user%\"}}"
    },
    "answer": "{\"FunctionName\": \"AskLlm\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"system\", \"Value\": \"parse user input to match this json scheme\"},\n    {\"Type\": \"String\", \"Name\": \"assistant\", \"Value\": \"\"},\n    {\"Type\": \"String\", \"Name\": \"user\", \"Value\": \"%input%\"},\n    {\"Type\": \"String\", \"Name\": \"scheme\", \"Value\": \"{honorific_prefix : string, full_name : string, given_name : string, family_name : string, nick_name : json [{name:string, tag:string[], isDefault:bool}], email : json [{ email: string, tag: string[], isDefault:bool }], tel: json [{ email: string, tag: string[], isDefault:bool}], nostrPublicKey : json [{ key: string, tag: string[], isDefault:bool}], walletPublicKey : json [{key:string, tab:string[], isDefault:bool}], address : json [{ street-address: string, postcode: string, city: string, country: string, isDefault: bool}], custom: [{string: string}], created (datetime, default now)}\"}\n],\n\"ReturnValue\": {\"Type\": \"String\", \"VariableName\": \"%user%\"}}",
    "hash": "bfdd3a2d49a1da32d5771a06022b3cf1da1fdcce007acf0e297567b08753b0ee",
    "Created": "2023-09-11T21:48:52.2441621Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\n\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": String,\n\"StepDescription\": String,\n\"Modules\": string[],\n\"WaitForExecution\": Boolean,\n\"CachingHandler\": {\"TimeInMilliseconds\": Int64,\n\"CacheKey\": String,\n\"CachingType\": Int32},\n\"ErrorHandler\": {\"IgnoreErrors\": Boolean,\n\"Except\": String[] = null} = null,\n\"RetryHandler\": {\"RetryCount\": Int32,\n\"RetryDelayInMilliseconds\": Int32} = null}\r\nBe Concise\r\n",
      "question": "insert %user% into Contact table",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve variables to and from a list or dictionary. It can be local variable or static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentSettingsModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ContactsModule\" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": true,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"InsertUserIntoContactTable\",\n\"StepDescription\": \"This step involves inserting the value of the variable %user% into the Contact table in the database.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true,\n\"CachingHandler\": null,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"InsertUserIntoContactTable\",\n\"StepDescription\": \"This step involves inserting the value of the variable %user% into the Contact table in the database.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true,\n\"CachingHandler\": null,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}",
    "hash": "1b8e57e1f23d787e52a983f817b69c7de5adfc55d73781562db86e9d32ab6c03",
    "Created": "2023-09-11T21:57:37.2622262Z"
  },
  {
    "question": {
      "type": "ErrorInfo",
      "system": "I am getting this error, can you give me user friendly error message and suggestion on how to fix it. Be Concise.You should respond in JSON, scheme {userFriendlyMessage:string, howToFix:string}",
      "question": "System.Collections.Generic.KeyNotFoundException: The given key '__CurrentDataSourceName__' was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at PLang.Modules.DbModule.ModuleSettings.GetCurrentDatasource() in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\DbModule\\ModuleSettings.cs:line 128\r\n   at PLang.Modules.DbModule.Builder.Build(GoalStep goalStep) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\DbModule\\Builder.cs:line 30\r\n   at PLang.Building.InstructionBuilder.BuildInstruction(StepBuilder stepBuilder, Goal goal, GoalStep step, String module, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\InstructionBuilder.cs:line 52\r\n   at PLang.Building.StepBuilder.BuildStep(Goal goal, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\StepBuilder.cs:line 102",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"userFriendlyMessage\": \"The key '__CurrentDataSourceName__' was not found in the dictionary.\",\n\"howToFix\": \"Please ensure that the key '__CurrentDataSourceName__' is correctly added to the dictionary before trying to retrieve it. If you're using a configuration file, check if the key is correctly defined there.\"\n}"
    },
    "answer": "{\n\"userFriendlyMessage\": \"The key '__CurrentDataSourceName__' was not found in the dictionary.\",\n\"howToFix\": \"Please ensure that the key '__CurrentDataSourceName__' is correctly added to the dictionary before trying to retrieve it. If you're using a configuration file, check if the key is correctly defined there.\"\n}",
    "hash": "3c60b9eac0c602aa29419b310605e35509734894e70b1ba466d87c6099d6d567",
    "Created": "2023-09-11T21:49:04.5071381Z"
  },
  {
    "question": {
      "type": "ErrorInfo",
      "system": "I am getting this error, can you give me user friendly error message and suggestion on how to fix it. Be Concise.You should respond in JSON, scheme {userFriendlyMessage:string, howToFix:string}",
      "question": "System.Collections.Generic.KeyNotFoundException: The given key '__CurrentDataSourceName__' was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at PLang.Modules.DbModule.ModuleSettings.GetCurrentDatasource() in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\DbModule\\ModuleSettings.cs:line 121\r\n   at PLang.Modules.DbModule.Builder.Build(GoalStep goalStep) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\DbModule\\Builder.cs:line 30\r\n   at PLang.Building.InstructionBuilder.BuildInstruction(StepBuilder stepBuilder, Goal goal, GoalStep step, String module, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\InstructionBuilder.cs:line 52\r\n   at PLang.Building.StepBuilder.BuildStep(Goal goal, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\StepBuilder.cs:line 102",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"userFriendlyMessage\": \"The key '__CurrentDataSourceName__' was not found in the dictionary.\",\n\"howToFix\": \"Please ensure that the key '__CurrentDataSourceName__' is correctly added to the dictionary before trying to retrieve it. If you're using a database, make sure the database connection is properly set up and the '__CurrentDataSourceName__' is correctly defined.\"\n}"
    },
    "answer": "{\n\"userFriendlyMessage\": \"The key '__CurrentDataSourceName__' was not found in the dictionary.\",\n\"howToFix\": \"Please ensure that the key '__CurrentDataSourceName__' is correctly added to the dictionary before trying to retrieve it. If you're using a database, make sure the database connection is properly set up and the '__CurrentDataSourceName__' is correctly defined.\"\n}",
    "hash": "8f940e43d79482984f45243f1c0dc11371651dc6ca87df6b7a5d580b1546e8b3",
    "Created": "2023-09-11T21:50:26.5846801Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\n\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": String,\n\"StepDescription\": String,\n\"Modules\": string[],\n\"WaitForExecution\": Boolean,\n\"CachingHandler\": {\"TimeInMilliseconds\": Int64,\n\"CacheKey\": String,\n\"CachingType\": Int32},\n\"ErrorHandler\": {\"IgnoreErrors\": Boolean,\n\"Except\": String[] = null} = null,\n\"RetryHandler\": {\"RetryCount\": Int32,\n\"RetryDelayInMilliseconds\": Int32} = null}\r\nBe Concise\r\n",
      "question": "create table Contact columns\n        honorific_prefix : string\n        full_name : string\n        given_name : string\n        family_name : string\n        nick_name : json [{name:string, tag:string[], isDefault:bool}]\n        email : json [{ email: string, tag: string[], isDefault:bool }]\n        tel: json [{ email: string, tag: string[], isDefault:bool}]\n        nostrPublicKey : json [{ key: string, tag: string[], isDefault:bool}]\n        walletPublicKey : json [{key:string, tab:string[], isDefault:bool}]\n        address : json [{ street-address: string, postcode: string, city: string, country: string, isDefault: bool}]\n        custom: [{string: string}]\n        created (datetime, default now)",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve variables to and from a list or dictionary. It can be local variable or static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentSettingsModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ContactsModule\" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateContactTable\",\n\"StepDescription\": \"Create a table named 'Contact' with the specified columns and data types. The columns include 'honorific_prefix', 'full_name', 'given_name', 'family_name', 'nick_name', 'email', 'tel', 'nostrPublicKey', 'walletPublicKey', 'address', 'custom', and 'created'. The 'nick_name', 'email', 'tel', 'nostrPublicKey', 'walletPublicKey', and 'address' columns are of JSON data type and contain specific fields. The 'created' column is of datetime type and its default value is the current date and time.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true,\n\"CachingHandler\": null,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"CreateContactTable\",\n\"StepDescription\": \"Create a table named 'Contact' with the specified columns and data types. The columns include 'honorific_prefix', 'full_name', 'given_name', 'family_name', 'nick_name', 'email', 'tel', 'nostrPublicKey', 'walletPublicKey', 'address', 'custom', and 'created'. The 'nick_name', 'email', 'tel', 'nostrPublicKey', 'walletPublicKey', and 'address' columns are of JSON data type and contain specific fields. The 'created' column is of datetime type and its default value is the current date and time.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true,\n\"CachingHandler\": null,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}",
    "hash": "01c92c3028fc486db675cc22e2206e80c459802d2ec7d5881cc71385b75df302",
    "Created": "2023-09-11T21:56:07.8134955Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\n\r\nRead the description of each module, then determine which module to use\r\nUser wants to use PLang.Modules.LlmModule\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": String,\n\"StepDescription\": String,\n\"Modules\": string[],\n\"WaitForExecution\": Boolean,\n\"CachingHandler\": {\"TimeInMilliseconds\": Int64,\n\"CacheKey\": String,\n\"CachingType\": Int32},\n\"ErrorHandler\": {\"IgnoreErrors\": Boolean,\n\"Except\": String[] = null} = null,\n\"RetryHandler\": {\"RetryCount\": Int32,\n\"RetryDelayInMilliseconds\": Int32} = null}\r\nBe Concise\r\n",
      "question": "[llm] system: parse user input to match this database scheme into a INSERT or UPDATE statment if Id is provided ,\n        {honorific_prefix : string\n        full_name : string\n        given_name : string\n        family_name : string\n        nick_name : json [{name:string, tag:string[], isDefault:bool}]\n        email : json [{ email: string, tag: string[], isDefault:bool }]\n        tel: json [{ email: string, tag: string[], isDefault:bool}]\n        nostrPublicKey : json [{ key: string, tag: string[], isDefault:bool}]\n        walletPublicKey : json [{key:string, tab:string[], isDefault:bool}]\n        address : json [{ street-address: string, postcode: string, city: string, country: string, isDefault: bool}]\n        custom: [{string: string}]\n        created (datetime, default now)\n        }\n        user: %input%\n        write to %user%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve variables to and from a list or dictionary. It can be local variable or static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentSettingsModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ContactsModule\" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ParseUserInput\",\n\"StepDescription\": \"Parse the user input to match the provided database schema and generate an INSERT or UPDATE SQL statement. If an Id is provided, an UPDATE statement will be generated, otherwise an INSERT statement will be generated. The user input is stored in the %input% variable and the result will be written to the %user% variable.\",\n\"Modules\": [\"PLang.Modules.LlmModule\", \"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true,\n\"CachingHandler\": null,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"ParseUserInput\",\n\"StepDescription\": \"Parse the user input to match the provided database schema and generate an INSERT or UPDATE SQL statement. If an Id is provided, an UPDATE statement will be generated, otherwise an INSERT statement will be generated. The user input is stored in the %input% variable and the result will be written to the %user% variable.\",\n\"Modules\": [\"PLang.Modules.LlmModule\", \"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true,\n\"CachingHandler\": null,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}",
    "hash": "209d73dec51a752e735f2ebe4c6cb3172bf8306068fb9aa48eb3acf593909a42",
    "Created": "2023-09-11T21:55:26.0485944Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": String,\n\"Parameters\": [{\"Type\": String,\n\"Name\": String,\n\"Value\": String}],\n\"ReturnValue\": {\"Type\": String,\n\"VariableName\": String} = null}",
      "question": "command: [llm] system: parse user input to match this database scheme into a INSERT or UPDATE statment if Id is provided ,\n        {honorific_prefix : string\n        full_name : string\n        given_name : string\n        family_name : string\n        nick_name : json [{name:string, tag:string[], isDefault:bool}]\n        email : json [{ email: string, tag: string[], isDefault:bool }]\n        tel: json [{ email: string, tag: string[], isDefault:bool}]\n        nostrPublicKey : json [{ key: string, tag: string[], isDefault:bool}]\n        walletPublicKey : json [{key:string, tab:string[], isDefault:bool}]\n        address : json [{ street-address: string, postcode: string, city: string, country: string, isDefault: bool}]\n        custom: [{string: string}]\n        created (datetime, default now)\n        }\n        user: %input%\n        write to %user%",
      "assistant": "## functions available defined in csharp ##\r\nvoid AskLlm(String system, String assistant, String user, String scheme, String? model = gpt-4, Double? tempature = 0, Double? topP = 0, Double? frequencyPenalty = 0, Double? presencePenalty = 0, Boolean? cacheResponse = True) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%input%, %user%\r\n## defined variables ##\nThe following user request is for for constructing a message to LLM engine\r\n\r\nDetermine what part is system, assistant and user properties. If you cannot map it, the whole user request should be on user property\r\nDetermine the scheme, it is the json scheme that the llm is expected to return, this is required and cannot be empty string. Default scheme is {Result:string}\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AskLlm\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"system\", \"Value\": \"parse user input to match this database scheme into a INSERT or UPDATE statment if Id is provided\"},\n    {\"Type\": \"String\", \"Name\": \"assistant\", \"Value\": \"\"},\n    {\"Type\": \"String\", \"Name\": \"user\", \"Value\": \"%input%\"},\n    {\"Type\": \"String\", \"Name\": \"scheme\", \"Value\": \"{honorific_prefix : string, full_name : string, given_name : string, family_name : string, nick_name : json [{name:string, tag:string[], isDefault:bool}], email : json [{ email: string, tag: string[], isDefault:bool }], tel: json [{ email: string, tag: string[], isDefault:bool}], nostrPublicKey : json [{ key: string, tag: string[], isDefault:bool}], walletPublicKey : json [{key:string, tab:string[], isDefault:bool}], address : json [{ street-address: string, postcode: string, city: string, country: string, isDefault: bool}], custom: [{string: string}], created (datetime, default now)}\"}\n],\n\"ReturnValue\": {\"Type\": \"String\", \"VariableName\": \"%user%\"}}"
    },
    "answer": "{\"FunctionName\": \"AskLlm\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"system\", \"Value\": \"parse user input to match this database scheme into a INSERT or UPDATE statment if Id is provided\"},\n    {\"Type\": \"String\", \"Name\": \"assistant\", \"Value\": \"\"},\n    {\"Type\": \"String\", \"Name\": \"user\", \"Value\": \"%input%\"},\n    {\"Type\": \"String\", \"Name\": \"scheme\", \"Value\": \"{honorific_prefix : string, full_name : string, given_name : string, family_name : string, nick_name : json [{name:string, tag:string[], isDefault:bool}], email : json [{ email: string, tag: string[], isDefault:bool }], tel: json [{ email: string, tag: string[], isDefault:bool}], nostrPublicKey : json [{ key: string, tag: string[], isDefault:bool}], walletPublicKey : json [{key:string, tab:string[], isDefault:bool}], address : json [{ street-address: string, postcode: string, city: string, country: string, isDefault: bool}], custom: [{string: string}], created (datetime, default now)}\"}\n],\n\"ReturnValue\": {\"Type\": \"String\", \"VariableName\": \"%user%\"}}",
    "hash": "372fb646718e839a6b6e3de6e6a97bde794ed254a774586fc07e4e43fe5d5f3f",
    "Created": "2023-09-11T21:55:48.4900803Z"
  }
]