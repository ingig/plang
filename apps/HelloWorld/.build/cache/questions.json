[
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": String,\n\"StepDescription\": String,\n\"Modules\": string[],\n\"WaitForExecution\": Boolean,\n\"ErrorHandler\": {\"IgnoreErrors\": Boolean,\n\"Except\": String[] = null} = null,\n\"RetryHandler\": {\"RetryCount\": Int32,\n\"RetryDelayInMilliseconds\": Int32} = null}\r\nBe Concise\r\n",
      "question": "set var %text% to \"Hello plang\"",
      "assistant": "This is a list of modules you can choose from\r\n## modules starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve variables to and from a list or dictionary. It can be local variable or static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentSettingsModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules ends ##\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"SetVariable\",\n\"StepDescription\": \"Set the variable 'text' to the string 'Hello plang'\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"SetVariable\",\n\"StepDescription\": \"Set the variable 'text' to the string 'Hello plang'\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}",
    "hash": "d8239ce9d931a7849a4709a87bf3e8f90164527396cd3b6168fedeced0f2e45a",
    "Created": "2023-09-11T09:25:23.6316899Z"
  },
  {
    "question": {
      "type": "ErrorInfo",
      "system": "I am getting this error, can you give me user friendly error message and suggestion on how to fix it. Be Concise.You should respond in JSON, scheme {userFriendlyMessage:string, howToFix:string}",
      "question": "System.InvalidOperationException: Unable to resolve type: PLang.Building.IBuilder, service name: \r\n ---> System.InvalidOperationException: Unresolved dependency [Target Type: PLang.Building.Builder], [Parameter: goalBuilder(PLang.Building.IGoalBuilder)], [Requested dependency: ServiceType:PLang.Building.IGoalBuilder, ServiceName:]\r\n ---> System.InvalidOperationException: Unresolved dependency [Target Type: PLang.Building.GoalBuilder], [Parameter: stepBuilder(PLang.Building.IStepBuilder)], [Requested dependency: ServiceType:PLang.Building.IStepBuilder, ServiceName:]\r\n ---> System.InvalidOperationException: Unresolved dependency [Target Type: PLang.Building.StepBuilder], [Parameter: instructionBuilder(PLang.Building.IInstructionBuilder)], [Requested dependency: ServiceType:PLang.Building.IInstructionBuilder, ServiceName:]\r\n ---> System.InvalidOperationException: Unresolved dependency [Target Type: PLang.Building.InstructionBuilder], [Parameter: variableHelper(PLang.Utils.VariableHelper)], [Requested dependency: ServiceType:PLang.Utils.VariableHelper, ServiceName:]\r\n   at LightInject.ServiceContainer.GetEmitMethodForDependency(Dependency dependency)\r\n   at LightInject.ServiceContainer.EmitConstructorDependency(IEmitter emitter, Dependency dependency)\r\n   at LightInject.ServiceContainer.EmitConstructorDependencies(ConstructionInfo constructionInfo, IEmitter emitter, Action`1 decoratorTargetEmitter)\r\n   at LightInject.ServiceContainer.EmitNewInstanceUsingImplementingType(IEmitter emitter, ConstructionInfo constructionInfo, Action`1 decoratorTargetEmitMethod)\r\n   at LightInject.ServiceContainer.EmitNewInstance(ServiceRegistration serviceRegistration, IEmitter emitter)\r\n   at LightInject.ServiceContainer.EmitNewInstanceWithDecorators(ServiceRegistration serviceRegistration, IEmitter emitter)\r\n   at LightInject.ServiceContainer.<>c__DisplayClass207_0.<ResolveEmitMethod>b__0(IEmitter emitter)\r\n   at LightInject.ServiceContainer.<>c__DisplayClass165_0.<CreateEmitMethodWrapper>b__0(IEmitter ms)\r\n   at LightInject.ServiceContainer.EmitConstructorDependency(IEmitter emitter, Dependency dependency)\r\n   --- End of inner exception stack trace ---\r\n   at LightInject.ServiceContainer.EmitConstructorDependency(IEmitter emitter, Dependency dependency)\r\n   at LightInject.ServiceContainer.EmitConstructorDependencies(ConstructionInfo constructionInfo, IEmitter emitter, Action`1 decoratorTargetEmitter)\r\n   at LightInject.ServiceContainer.EmitNewInstanceUsingImplementingType(IEmitter emitter, ConstructionInfo constructionInfo, Action`1 decoratorTargetEmitMethod)\r\n   at LightInject.ServiceContainer.EmitNewInstance(ServiceRegistration serviceRegistration, IEmitter emitter)\r\n   at LightInject.ServiceContainer.EmitNewInstanceWithDecorators(ServiceRegistration serviceRegistration, IEmitter emitter)\r\n   at LightInject.ServiceContainer.<>c__DisplayClass207_0.<ResolveEmitMethod>b__0(IEmitter emitter)\r\n   at LightInject.ServiceContainer.<>c__DisplayClass165_0.<CreateEmitMethodWrapper>b__0(IEmitter ms)\r\n   at LightInject.ServiceContainer.EmitConstructorDependency(IEmitter emitter, Dependency dependency)\r\n   --- End of inner exception stack trace ---\r\n   at LightInject.ServiceContainer.EmitConstructorDependency(IEmitter emitter, Dependency dependency)\r\n   at LightInject.ServiceContainer.EmitConstructorDependencies(ConstructionInfo constructionInfo, IEmitter emitter, Action`1 decoratorTargetEmitter)\r\n   at LightInject.ServiceContainer.EmitNewInstanceUsingImplementingType(IEmitter emitter, ConstructionInfo constructionInfo, Action`1 decoratorTargetEmitMethod)\r\n   at LightInject.ServiceContainer.EmitNewInstance(ServiceRegistration serviceRegistration, IEmitter emitter)\r\n   at LightInject.ServiceContainer.EmitNewInstanceWithDecorators(ServiceRegistration serviceRegistration, IEmitter emitter)\r\n   at LightInject.ServiceContainer.<>c__DisplayClass207_0.<ResolveEmitMethod>b__0(IEmitter emitter)\r\n   at LightInject.ServiceContainer.<>c__DisplayClass165_0.<CreateEmitMethodWrapper>b__0(IEmitter ms)\r\n   at LightInject.ServiceContainer.EmitConstructorDependency(IEmitter emitter, Dependency dependency)\r\n   --- End of inner exception stack trace ---\r\n   at LightInject.ServiceContainer.EmitConstructorDependency(IEmitter emitter, Dependency dependency)\r\n   at LightInject.ServiceContainer.EmitConstructorDependencies(ConstructionInfo constructionInfo, IEmitter emitter, Action`1 decoratorTargetEmitter)\r\n   at LightInject.ServiceContainer.EmitNewInstanceUsingImplementingType(IEmitter emitter, ConstructionInfo constructionInfo, Action`1 decoratorTargetEmitMethod)\r\n   at LightInject.ServiceContainer.EmitNewInstance(ServiceRegistration serviceRegistration, IEmitter emitter)\r\n   at LightInject.ServiceContainer.EmitNewInstanceWithDecorators(ServiceRegistration serviceRegistration, IEmitter emitter)\r\n   at LightInject.ServiceContainer.<>c__DisplayClass207_0.<ResolveEmitMethod>b__3(IEmitter e)\r\n   at LightInject.ServiceContainer.CreateDynamicMethodDelegate(Action`1 serviceEmitter)\r\n   at LightInject.ServiceContainer.CreateInstanceDelegateIndex(Action`1 emitMethod)\r\n   at LightInject.ServiceContainer.<>c__DisplayClass210_0.<EmitLifetime>b__3(ServiceRegistration _)\r\n   at LightInject.LazyConcurrentDictionary`2.<>c__DisplayClass2_1.<GetOrAdd>b__1()\r\n   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.get_Value()\r\n   at LightInject.LazyConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at LightInject.ServiceContainer.EmitLifetime(ServiceRegistration serviceRegistration, Action`1 emitMethod, IEmitter emitter)\r\n   at LightInject.ServiceContainer.<>c__DisplayClass207_0.<ResolveEmitMethod>b__0(IEmitter emitter)\r\n   at LightInject.ServiceContainer.<>c__DisplayClass165_0.<CreateEmitMethodWrapper>b__0(IEmitter ms)\r\n   at LightInject.ServiceContainer.CreateDynamicMethodDelegate(Action`1 serviceEmitter)\r\n   at LightInject.ServiceContainer.CreateDelegate(Type serviceType, String serviceName, Boolean throwError)\r\n   --- End of inner exception stack trace ---\r\n   at LightInject.ServiceContainer.CreateDelegate(Type serviceType, String serviceName, Boolean throwError)\r\n   at LightInject.ServiceContainer.CreateDefaultDelegate(Type serviceType, Boolean throwError)\r\n   at LightInject.ServiceContainer.GetInstance(Type serviceType)\r\n   at LightInject.ServiceFactoryExtensions.GetInstance[TService](IServiceFactory factory)\r\n   at PLang.Executor.Build() in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Program.cs:line 158",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"userFriendlyMessage\": \"The system is unable to resolve certain dependencies in your code. This is causing an InvalidOperationException error.\",\n\"howToFix\": \"Check your code to ensure that all dependencies are correctly registered and that there are no circular dependencies. The error message indicates that the system is having trouble resolving the following types: PLang.Building.IBuilder, PLang.Building.IGoalBuilder, PLang.Building.IStepBuilder, PLang.Building.IInstructionBuilder, and PLang.Utils.VariableHelper. Make sure these types are properly defined and registered in your code.\"\n}"
    },
    "answer": "{\n\"userFriendlyMessage\": \"The system is unable to resolve certain dependencies in your code. This is causing an InvalidOperationException error.\",\n\"howToFix\": \"Check your code to ensure that all dependencies are correctly registered and that there are no circular dependencies. The error message indicates that the system is having trouble resolving the following types: PLang.Building.IBuilder, PLang.Building.IGoalBuilder, PLang.Building.IStepBuilder, PLang.Building.IInstructionBuilder, and PLang.Utils.VariableHelper. Make sure these types are properly defined and registered in your code.\"\n}",
    "hash": "6cafef93008aa27d147ba0f5345303609ab21a5746359a02f00935b50d17ba4c",
    "Created": "2023-09-10T17:33:34.0409348Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme\r\n \"Action\": {\"FunctionName\": String,\n\"Parameters\": [{\"Type\": String,\n\"Name\": String,\n\"Value\": String}],\n\"ReturnValue\": {\"Type\": String,\n\"VariableName\": String} = null}",
      "question": "command: set var %text% to \"Hello plang\"",
      "assistant": "## functions available defined in csharp ##\r\nvoid OnAddVariableListener(String key, String goalName, String appName, Dictionary`2 parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50) \nvoid OnChangeVariableListener(String key, String goalName, String appName, Dictionary`2 parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50) \nvoid OnRemoveVariableListener(String key, String goalName, String appName, Dictionary`2 parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50) \nvoid SetVariable(String key, Object value)  // Set local variable.. \nObject GetVariable(String key) \nvoid SetStaticVariable(String key, Object value) \nObject GetStaticVariable(String key) \nvoid RemoveVariable(String key) \nvoid RemoveStaticVariable(String key) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%text%\r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"Action\": {\n    \"FunctionName\": \"SetVariable\",\n    \"Parameters\": [\n      {\n        \"Type\": \"String\",\n        \"Name\": \"key\",\n        \"Value\": \"%text%\"\n      },\n      {\n        \"Type\": \"Object\",\n        \"Name\": \"value\",\n        \"Value\": \"Hello plang\"\n      }\n    ],\n    \"ReturnValue\": null\n  }\n}"
    },
    "answer": "{\n  \"Action\": {\n    \"FunctionName\": \"SetVariable\",\n    \"Parameters\": [\n      {\n        \"Type\": \"String\",\n        \"Name\": \"key\",\n        \"Value\": \"%text%\"\n      },\n      {\n        \"Type\": \"Object\",\n        \"Name\": \"value\",\n        \"Value\": \"Hello plang\"\n      }\n    ],\n    \"ReturnValue\": null\n  }\n}",
    "hash": "13e6d8340b0a77ac334a1a847ce7505a39e042bfacf2e72825b9c1d597516160",
    "Created": "2023-09-11T09:24:41.3991893Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": String,\n\"Parameters\": [{\"Type\": String,\n\"Name\": String,\n\"Value\": String}],\n\"ReturnValue\": {\"Type\": String,\n\"VariableName\": String} = null}",
      "question": "command: set var %text% to \"Hello plang\"",
      "assistant": "## functions available defined in csharp ##\r\nvoid OnAddVariableListener(String key, String goalName, String appName, Dictionary`2 parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50) \nvoid OnChangeVariableListener(String key, String goalName, String appName, Dictionary`2 parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50) \nvoid OnRemoveVariableListener(String key, String goalName, String appName, Dictionary`2 parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50) \nvoid SetVariable(String key, Object value)  // Set local variable.. \nObject GetVariable(String key) \nvoid SetStaticVariable(String key, Object value) \nObject GetStaticVariable(String key) \nvoid RemoveVariable(String key) \nvoid RemoveStaticVariable(String key) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%text%\r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"SetVariable\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"key\",\n\"Value\": \"%text%\"},\n{\"Type\": \"Object\",\n\"Name\": \"value\",\n\"Value\": \"Hello plang\"}],\n\"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"SetVariable\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"key\",\n\"Value\": \"%text%\"},\n{\"Type\": \"Object\",\n\"Name\": \"value\",\n\"Value\": \"Hello plang\"}],\n\"ReturnValue\": null}",
    "hash": "02d937fe1c0a1797d06ac1851abf9775461c3a0f20d19bb38926a992e1be57f9",
    "Created": "2023-09-11T09:32:22.7146616Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": String,\n\"StepDescription\": String,\n\"Modules\": string[],\n\"WaitForExecution\": Boolean,\n\"ErrorHandler\": {\"IgnoreErrors\": Boolean,\n\"Except\": String[] = null} = null,\n\"RetryHandler\": {\"RetryCount\": Int32,\n\"RetryDelayInMilliseconds\": Int32} = null}\r\nBe Concise\r\n",
      "question": "write out %text%",
      "assistant": "This is a list of modules you can choose from\r\n## modules starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve variables to and from a list or dictionary. It can be local variable or static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentSettingsModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules ends ##\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutText\",\n\"StepDescription\": \"Write out the value of the variable %text%\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"WriteOutText\",\n\"StepDescription\": \"Write out the value of the variable %text%\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": null,\n\"RetryHandler\": null}",
    "hash": "4a71902b9169f892cc547e6bf21c8f4bff70908c6d160091a33d1dc1259220ca",
    "Created": "2023-09-11T09:33:04.6843879Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": String,\n\"Parameters\": [{\"Type\": String,\n\"Name\": String,\n\"Value\": String}],\n\"ReturnValue\": {\"Type\": String,\n\"VariableName\": String} = null}",
      "question": "command: write out %text%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text) \nvoid Write(String? text, Boolean? writeToBuffer = False) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%text%\r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"text\",\n\"Value\": \"%text%\"}],\n\"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"text\",\n\"Value\": \"%text%\"}],\n\"ReturnValue\": null}",
    "hash": "f16aafd1332ea39b76a3503b63115c51af46e464db6f6a997815da4ece8bfa77",
    "Created": "2023-09-11T09:33:13.7823047Z"
  }
]