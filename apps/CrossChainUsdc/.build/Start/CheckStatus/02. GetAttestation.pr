{
  "Action": {
    "FunctionName": "Get",
    "Parameters": [
      {
        "Type": "string",
        "Name": "url",
        "Value": "https://iris-api-sandbox.circle.com/attestations/%hash%"
      },
      {
        "Type": "object",
        "Name": "data",
        "Value": null
      },
      {
        "Type": "boolean",
        "Name": "signRequest",
        "Value": false
      },
      {
        "Type": "Dictionary`2",
        "Name": "headers",
        "Value": null
      },
      {
        "Type": "string",
        "Name": "encoding",
        "Value": "utf-8"
      },
      {
        "Type": "string",
        "Name": "contentType",
        "Value": "application/json"
      }
    ],
    "ReturnValue": {
      "Type": "object",
      "VariableName": "%response%"
    }
  },
  "Text": "GET https://iris-api-sandbox.circle.com/attestations/%hash%, write %response%",
  "Reload": false,
  "LlmQuestion": {
    "type": "PLang.Modules.BaseBuilder",
    "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
    "question": "command: GET https://iris-api-sandbox.circle.com/attestations/%hash%, write %response%",
    "assistant": "## functions available defined in csharp ##\r\nObject Post(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Patch(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Get(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Option(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Head(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Put(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Delete(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject PostMultipartFormData(String url, Object data, String? httpMethod = POST, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8)  // Post a FileStream to url. When a variable is defined with @ sign, it defines that it should be a FileStream.. \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%hash%, %response%\r\n## defined variables ##\nUser might use JSONPath to describe how to load variable in ReturnValue, keep the $ for the ReturnValue.VariableName.\\n",
    "model": "gpt-4",
    "caching": true,
    "Reload": false,
    "PreviousResult": null,
    "RawResponse": null
  }
}