{
  "Action": {
    "FunctionName": "ListenToEventOnSmartContract",
    "Parameters": [
      {
        "Type": "String",
        "Name": "contractAddress",
        "Value": "0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352"
      },
      {
        "Type": "String",
        "Name": "abi",
        "Value": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"}]"
      },
      {
        "Type": "String",
        "Name": "goalToCall",
        "Value": "!CheckStatus"
      }
    ],
    "ReturnValue": null
  },
  "Text": "[blockchain] list `MessageSent` event on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\n    abi: [{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"}]\n    call !CheckStatus",
  "Reload": false,
  "LlmQuestion": {
    "type": "PLang.Modules.BaseBuilder",
    "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
    "question": "command: [blockchain] list `MessageSent` event on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\n    abi: [{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"}]\n    call !CheckStatus",
    "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddress, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject nameOfSmartContract(String contractAddress) \nObject totalSupplyOnSmartContract(String contractAddress) \nObject getMyBalanceOnSmartContract(String contractAddress) \nObject balanceOfOnSmartContract(String contractAddress, String addressToCheckBalanceOf) \nObject balanceOfBatchOnSmartContract(String contractAddress, String[] addresses, BigInteger[] ids) \nObject isApprovedForAllOnSmartContract(String contractAddress, String accountAddress, String operatorAddress) \nObject decimalsOnSmartContract(String contractAddress) \nObject allowanceFromSmartContract(String contractAddress, String from, String to, BigInteger value) \nObject symbolOnSmartContract(String contractAddress) \nObject supportsInterfaceOnSmartContract(String contractAddress, String interfaceId) \nObject getUriOnSmartContract(String contractAddress, BigInteger id) \nObject getApprovedOnSmartContract(String contractAddress) \nObject approveSmartContract(String contractAddress, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject mintSmartContract(String contractAddress, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject burnSmartContract(String contractAddress, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject transferSmartContract(String contractAddress, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject transferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject safeTransferFromErc721SmartContract(String contractAddress, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject safeTransferFromErc1155SmartContract(String contractAddress, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject safeBatchTransferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject setApprovalForAllOnSmartContract(String contractAddress, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddress, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddress, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString TransferErc20(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferErc20WaitForReceipt(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\n# RPC servers available #\r\n[]\r\n# RPC servers available #\r\n# wallets with addresses #\r\n[]\r\n# wallets with addresses #\r\n# Tokens #\r\n[{\"symbol\":\"USDC\",\"name\":\"USDC Coin\",\"decimal\":8,\"contractAddress\":\"0x9999f7fea5938fd3b1e26a12c3f2fb024e194f97\",\"chainId\":137}]\r\n# Tokens #\r\n\r\n",
    "model": "gpt-4",
    "caching": true,
    "Reload": false,
    "PreviousResult": null,
    "RawResponse": null
  }
}