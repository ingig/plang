[
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "set chain as Arbitrum Goerli",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"SetBlockchainChain\",\n\"StepDescription\": \"Set the blockchain chain to Arbitrum Goerli\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}"
    },
    "answer": "{\"StepName\": \"SetBlockchainChain\",\n\"StepDescription\": \"Set the blockchain chain to Arbitrum Goerli\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": null,\n\"CachingHandler\": null,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null}",
    "hash": "932df959484754ce8257b793895ec351169660678dad26658b00824012e61059",
    "Created": "2023-09-29T22:26:30.2751279Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: set chain as Arbitrum Goerli",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddress, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject nameOfSmartContract(String contractAddress) \nObject totalSupplyOnSmartContract(String contractAddress) \nObject getMyBalanceOnSmartContract(String contractAddress) \nObject balanceOfOnSmartContract(String contractAddress, String addressToCheckBalanceOf) \nObject balanceOfBatchOnSmartContract(String contractAddress, String[] addresses, BigInteger[] ids) \nObject isApprovedForAllOnSmartContract(String contractAddress, String accountAddress, String operatorAddress) \nObject decimalsOnSmartContract(String contractAddress) \nObject allowanceFromSmartContract(String contractAddress, String from, String to, BigInteger value) \nObject symbolOnSmartContract(String contractAddress) \nObject supportsInterfaceOnSmartContract(String contractAddress, String interfaceId) \nObject getUriOnSmartContract(String contractAddress, BigInteger id) \nObject getApprovedOnSmartContract(String contractAddress) \nObject approveSmartContract(String contractAddress, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject mintSmartContract(String contractAddress, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject burnSmartContract(String contractAddress, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject transferSmartContract(String contractAddress, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject transferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject safeTransferFromErc721SmartContract(String contractAddress, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject safeTransferFromErc1155SmartContract(String contractAddress, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject safeBatchTransferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject setApprovalForAllOnSmartContract(String contractAddress, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddress, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddress, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString TransferErc20(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferErc20WaitForReceipt(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\n# RPC servers available #\r\n[]\r\n# RPC servers available #\r\n# wallets with addresses #\r\n[]\r\n# wallets with addresses #\r\n# Tokens #\r\n[{\"symbol\":\"USDC\",\"name\":\"USDC Coin\",\"decimal\":8,\"contractAddress\":\"0x5425890298aed601595a70ab815c96711a31bc65\",\"chainId\":43113}]\r\n# Tokens #\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"SetCurrentRpcServer\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"nameOrUrl\",\n\"Value\": \"Arbitrum Goerli\"}]}"
    },
    "answer": "{\"FunctionName\": \"SetCurrentRpcServer\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"nameOrUrl\",\n\"Value\": \"Arbitrum Goerli\"}]}",
    "hash": "9c655899d9ca99619e05c69f5a68a601710aa105ee79d90724a1352f35311e6b",
    "Created": "2023-09-29T22:26:34.0494573Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\nATTN: User wants to use PLang.Modules.BlockchainModule\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[blockchain] Call `approve` on 0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63. Params: 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352, %amount%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ApproveBlockchainTransaction\",\n\"StepDescription\": \"Call the 'approve' function on the blockchain address 0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63 with parameters: 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 and the variable %amount%\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"ApproveBlockchainTransaction\",\n\"StepDescription\": \"Call the 'approve' function on the blockchain address 0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63 with parameters: 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 and the variable %amount%\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true}",
    "hash": "b6a8154d7df7896927b862c930338a147b18e2424514e7ca9460bf644d01e119",
    "Created": "2023-09-29T22:26:41.6006372Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [blockchain] Call `approve` on 0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63. Params: 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352, %amount%",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddress, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject nameOfSmartContract(String contractAddress) \nObject totalSupplyOnSmartContract(String contractAddress) \nObject getMyBalanceOnSmartContract(String contractAddress) \nObject balanceOfOnSmartContract(String contractAddress, String addressToCheckBalanceOf) \nObject balanceOfBatchOnSmartContract(String contractAddress, String[] addresses, BigInteger[] ids) \nObject isApprovedForAllOnSmartContract(String contractAddress, String accountAddress, String operatorAddress) \nObject decimalsOnSmartContract(String contractAddress) \nObject allowanceFromSmartContract(String contractAddress, String from, String to, BigInteger value) \nObject symbolOnSmartContract(String contractAddress) \nObject supportsInterfaceOnSmartContract(String contractAddress, String interfaceId) \nObject getUriOnSmartContract(String contractAddress, BigInteger id) \nObject getApprovedOnSmartContract(String contractAddress) \nObject approveSmartContract(String contractAddress, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject mintSmartContract(String contractAddress, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject burnSmartContract(String contractAddress, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject transferSmartContract(String contractAddress, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject transferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject safeTransferFromErc721SmartContract(String contractAddress, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject safeTransferFromErc1155SmartContract(String contractAddress, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject safeBatchTransferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject setApprovalForAllOnSmartContract(String contractAddress, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddress, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddress, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString TransferErc20(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferErc20WaitForReceipt(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%amount%\r\n## defined variables ##\n# RPC servers available #\r\n[]\r\n# RPC servers available #\r\n# wallets with addresses #\r\n[]\r\n# wallets with addresses #\r\n# Tokens #\r\n[{\"symbol\":\"USDC\",\"name\":\"USDC Coin\",\"decimal\":8,\"contractAddress\":\"0x5425890298aed601595a70ab815c96711a31bc65\",\"chainId\":43113}]\r\n# Tokens #\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"approveSmartContract\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63\"},\n    {\"Type\": \"String\", \"Name\": \"spender\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"BigInteger\", \"Name\": \"value\", \"Value\": \"%amount%\"}\n],\n\"ReturnValue\": {\"Type\": \"Object\", \"VariableName\": \"approveResult\"}}"
    },
    "answer": "{\"FunctionName\": \"approveSmartContract\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63\"},\n    {\"Type\": \"String\", \"Name\": \"spender\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"BigInteger\", \"Name\": \"value\", \"Value\": \"%amount%\"}\n],\n\"ReturnValue\": {\"Type\": \"Object\", \"VariableName\": \"approveResult\"}}",
    "hash": "550747d018d2f5aaa6959d260b8230ffce44707ace338e17d501db54bb829e62",
    "Created": "2023-09-29T22:26:49.8506374Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\nATTN: User wants to use PLang.Modules.BlockchainModule\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[blockchain] Execute `depositForBurn` on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352. Params: %amount%, 1, %destinationAddress%, 0x5425890298aed601595a70ab815c96711a31bc65",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ExecuteDepositForBurn\",\n\"StepDescription\": \"Execute the 'depositForBurn' function on the blockchain address 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 with parameters: amount, 1, destination address, and 0x5425890298aed601595a70ab815c96711a31bc65.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 5000}}"
    },
    "answer": "{\"StepName\": \"ExecuteDepositForBurn\",\n\"StepDescription\": \"Execute the 'depositForBurn' function on the blockchain address 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 with parameters: amount, 1, destination address, and 0x5425890298aed601595a70ab815c96711a31bc65.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 5000}}",
    "hash": "f70a6b0a17f3eb4f06b9d902c8bd48dbb3ccee029ded61cd32851a07345d004a",
    "Created": "2023-09-29T22:26:57.4384968Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [blockchain] Execute `depositForBurn` on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352. Params: %amount%, 1, %destinationAddress%, 0x5425890298aed601595a70ab815c96711a31bc65",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddress, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject nameOfSmartContract(String contractAddress) \nObject totalSupplyOnSmartContract(String contractAddress) \nObject getMyBalanceOnSmartContract(String contractAddress) \nObject balanceOfOnSmartContract(String contractAddress, String addressToCheckBalanceOf) \nObject balanceOfBatchOnSmartContract(String contractAddress, String[] addresses, BigInteger[] ids) \nObject isApprovedForAllOnSmartContract(String contractAddress, String accountAddress, String operatorAddress) \nObject decimalsOnSmartContract(String contractAddress) \nObject allowanceFromSmartContract(String contractAddress, String from, String to, BigInteger value) \nObject symbolOnSmartContract(String contractAddress) \nObject supportsInterfaceOnSmartContract(String contractAddress, String interfaceId) \nObject getUriOnSmartContract(String contractAddress, BigInteger id) \nObject getApprovedOnSmartContract(String contractAddress) \nObject approveSmartContract(String contractAddress, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject mintSmartContract(String contractAddress, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject burnSmartContract(String contractAddress, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject transferSmartContract(String contractAddress, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject transferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject safeTransferFromErc721SmartContract(String contractAddress, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject safeTransferFromErc1155SmartContract(String contractAddress, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject safeBatchTransferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject setApprovalForAllOnSmartContract(String contractAddress, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddress, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddress, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString TransferErc20(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferErc20WaitForReceipt(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%amount%, %destinationAddress%\r\n## defined variables ##\n# RPC servers available #\r\n[]\r\n# RPC servers available #\r\n# wallets with addresses #\r\n[]\r\n# wallets with addresses #\r\n# Tokens #\r\n[{\"symbol\":\"USDC\",\"name\":\"USDC Coin\",\"decimal\":8,\"contractAddress\":\"0x5425890298aed601595a70ab815c96711a31bc65\",\"chainId\":43113}]\r\n# Tokens #\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CallAndSignFunction\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"depositForBurn\"},\n    {\"Type\": \"Object[]\", \"Name\": \"functionInputs\", \"Value\": [\"%amount%\", 1, \"%destinationAddress%\", \"0x5425890298aed601595a70ab815c96711a31bc65\"]}\n],\n\"ReturnValue\": {\"Type\": \"Object\", \"VariableName\": \"transactionReceipt\"}}"
    },
    "answer": "{\"FunctionName\": \"CallAndSignFunction\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"depositForBurn\"},\n    {\"Type\": \"Object[]\", \"Name\": \"functionInputs\", \"Value\": [\"%amount%\", 1, \"%destinationAddress%\", \"0x5425890298aed601595a70ab815c96711a31bc65\"]}\n],\n\"ReturnValue\": {\"Type\": \"Object\", \"VariableName\": \"transactionReceipt\"}}",
    "hash": "b428df343215f956ffc2b7d9d6b92ef78f963cbefcc266adf2d8e4652d31dd05",
    "Created": "2023-09-29T22:27:05.4622263Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "Listen for `MessageSent` event, extract and hash `messageBytes`.",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ListenAndHashMessage\",\n\"StepDescription\": \"This step involves listening for the 'MessageSent' event. Once the event is triggered, the message bytes are extracted and then hashed.\",\n\"Modules\": [\"PLang.Modules.MessageModule\", \"PLang.Modules.CryptographicModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"ListenAndHashMessage\",\n\"StepDescription\": \"This step involves listening for the 'MessageSent' event. Once the event is triggered, the message bytes are extracted and then hashed.\",\n\"Modules\": [\"PLang.Modules.MessageModule\", \"PLang.Modules.CryptographicModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "a44f6e530ea17ac3f77966898cfb5bc704ac924baccc4ae7f26e627debefcfd4",
    "Created": "2023-09-29T22:27:10.8175786Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: Listen for `MessageSent` event, extract and hash `messageBytes`.",
      "assistant": "## functions available defined in csharp ##\r\nString GetPublicKey() \nvoid SetCurrentAccount(String publicKeyOrName) \nvoid Listen(String goalName, String variableName, Nullable`1? listenFromDateTime)  // goalName should be prefixed by ! and be whole word with possible dot(.). \nvoid SendPrivateMessageToMyself(String content) \nvoid SendPrivateMessage(String content, String npubReceiverPublicKey) \n\r\n## functions available ends ##\nFollowing Relay servers are available: [\"wss://relay.damus.io\",\"wss://nostr-pub.wellorder.net\",\"wss://offchain.pub\",\"wss://nos.lol\"].\r\nFollowing are Nostr accounts:[]\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Listen\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"goalName\",\n\"Value\": \"!MessageSent\"},\n{\"Type\": \"string\",\n\"Name\": \"variableName\",\n\"Value\": \"messageBytes\"},\n{\"Type\": \"Nullable`1\",\n\"Name\": \"listenFromDateTime\",\n\"Value\": null}],\n\"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"Listen\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"goalName\",\n\"Value\": \"!MessageSent\"},\n{\"Type\": \"string\",\n\"Name\": \"variableName\",\n\"Value\": \"messageBytes\"},\n{\"Type\": \"Nullable`1\",\n\"Name\": \"listenFromDateTime\",\n\"Value\": null}],\n\"ReturnValue\": null}",
    "hash": "eceb0645ad85eb1e017a1fbf280cfe748d2737a93d185c5c4a3d1474822e9948",
    "Created": "2023-09-29T22:27:15.3872633Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "hash %event.messageBytes%, write to %hash%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"HashMessageBytes\",\n\"StepDescription\": \"Hash the content of the variable 'event.messageBytes' and store the result in the variable 'hash'.\",\n\"Modules\": [\"PLang.Modules.CryptographicModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}"
    },
    "answer": "{\"StepName\": \"HashMessageBytes\",\n\"StepDescription\": \"Hash the content of the variable 'event.messageBytes' and store the result in the variable 'hash'.\",\n\"Modules\": [\"PLang.Modules.CryptographicModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 500}}",
    "hash": "030f8d27ec045cd5c785d83cd35f4f35c169deeb3049fd2e7c9a06244721a837",
    "Created": "2023-09-29T22:27:20.9915515Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: hash %event.messageBytes%, write to %hash%",
      "assistant": "## functions available defined in csharp ##\r\nString Encrypt(Object content) \nObject Decrypt(String content) \nString HashInput(String input, Boolean? useSalt = True, String? salt)  // Used for hashing, by default it uses salt. Only provide salt if user provides it in his statement. \nBoolean VerifyHashedValues(String password, String passwordHash, Boolean? useSalt = True) \nvoid SetCurrentBearerToken(String name) \nString GetBearerSecret() \nBoolean ValidateBearerToken(String token, String? issuer = PLangRuntime, String? audience = user) \nString GenerateBearerToken(String uniqueString, String? issuer = PLangRuntime, String? audience = user, Int32? expireTimeInSeconds = 604800) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%event.messageBytes%, %hash%\r\n## defined variables ##\nBearer token names are: ",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"HashInput\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"input\",\n\"Value\": \"%event.messageBytes%\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"useSalt\",\n\"Value\": true}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"%hash%\"}}"
    },
    "answer": "{\"FunctionName\": \"HashInput\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"input\",\n\"Value\": \"%event.messageBytes%\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"useSalt\",\n\"Value\": true}],\n\"ReturnValue\": {\"Type\": \"String\",\n\"VariableName\": \"%hash%\"}}",
    "hash": "a0ff0fda6cbe172faa42a9ac77dc2ca3e2878e3f9717fd7665cf542d9c731a6e",
    "Created": "2023-09-29T22:27:25.7146536Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "call !CheckStatus",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CallCheckStatus\",\n\"StepDescription\": \"This step involves calling the function 'CheckStatus'.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CallCheckStatus\",\n\"StepDescription\": \"This step involves calling the function 'CheckStatus'.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "c4ab5eb7fcf21f49eb530c70f0c5d7411913848ee74e3a340ace11f29cc0df3b",
    "Created": "2023-09-29T22:27:28.4666858Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "\r\n Parse user command, to match the parameters needed for the RunGoal function\r\n\r\nVariables are defined with starting and ending %\r\n\r\nGoalName should be prefixed with !\r\nParameters are optional, they are key value of a variable, if user does not define key, then it is same as value.\r\n\r\n== Examples starts ==\r\n!ParseText then ParseText is goalName, no parameters\r\n!Gmail.Search %query%, then Gmail.Search is goalName,  %query% is key and value in parameters\r\nFolder.Search q=%fileName%, then key is q, and value is %fileName%\r\n== Examples ends ==\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: call !CheckStatus",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunGoal(String goalName, Dictionary`2? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 0) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"CheckStatus\"\n    },\n    {\n      \"Type\": \"Dictionary`2\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}"
    },
    "answer": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"CheckStatus\"\n    },\n    {\n      \"Type\": \"Dictionary`2\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}",
    "hash": "cf29be726d521a6cb8ed874f022c59b0b1a0bc8b20bb3c00b455f24a4f732cf4",
    "Created": "2023-09-29T22:27:33.1810718Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "GET https://iris-api-sandbox.circle.com/attestations/%hash%, write %response%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetAttestation\",\n\"StepDescription\": \"Make a GET request to the URL 'https://iris-api-sandbox.circle.com/attestations/%hash%' and write the response to the variable %response%\",\n\"Modules\": [\"PLang.Modules.HttpModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": {\"GoalName\": \"GetAttestation\",\n\"Uri\": \"https://iris-api-sandbox.circle.com/attestations/%hash%\",\n\"StartCssSelector\": \"\",\n\"EndCssSelector\": \"\"},\n\"CachingHandler\": {\"TimeInMilliseconds\": 0,\n\"CacheKey\": \"\",\n\"CachingType\": 0},\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 0,\n\"RetryDelayInMilliseconds\": 0}}"
    },
    "answer": "{\"StepName\": \"GetAttestation\",\n\"StepDescription\": \"Make a GET request to the URL 'https://iris-api-sandbox.circle.com/attestations/%hash%' and write the response to the variable %response%\",\n\"Modules\": [\"PLang.Modules.HttpModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": {\"GoalName\": \"GetAttestation\",\n\"Uri\": \"https://iris-api-sandbox.circle.com/attestations/%hash%\",\n\"StartCssSelector\": \"\",\n\"EndCssSelector\": \"\"},\n\"CachingHandler\": {\"TimeInMilliseconds\": 0,\n\"CacheKey\": \"\",\n\"CachingType\": 0},\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 0,\n\"RetryDelayInMilliseconds\": 0}}",
    "hash": "fc1529e22bc1e6124027fbfdc26bb986f3675285e4130619ea7e350258388988",
    "Created": "2023-09-29T22:27:44.6914754Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: GET https://iris-api-sandbox.circle.com/attestations/%hash%, write %response%",
      "assistant": "## functions available defined in csharp ##\r\nObject Post(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Patch(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Get(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Option(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Head(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Put(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject Delete(String url, Object data, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8, String? contentType = application/json) \nObject PostMultipartFormData(String url, Object data, String? httpMethod = POST, Boolean? signRequest = False, Dictionary`2? headers, String? encoding = utf-8)  // Post a FileStream to url. When a variable is defined with @ sign, it defines that it should be a FileStream.. \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%hash%, %response%\r\n## defined variables ##\nUser might use JSONPath to describe how to load variable in ReturnValue, keep the $ for the ReturnValue.VariableName.\\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Get\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"url\", \"Value\": \"https://iris-api-sandbox.circle.com/attestations/%hash%\"},\n    {\"Type\": \"object\", \"Name\": \"data\", \"Value\": null},\n    {\"Type\": \"boolean\", \"Name\": \"signRequest\", \"Value\": false},\n    {\"Type\": \"Dictionary`2\", \"Name\": \"headers\", \"Value\": null},\n    {\"Type\": \"string\", \"Name\": \"encoding\", \"Value\": \"utf-8\"},\n    {\"Type\": \"string\", \"Name\": \"contentType\", \"Value\": \"application/json\"}\n],\n\"ReturnValue\": {\"Type\": \"object\", \"VariableName\": \"%response%\"}}"
    },
    "answer": "{\"FunctionName\": \"Get\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"url\", \"Value\": \"https://iris-api-sandbox.circle.com/attestations/%hash%\"},\n    {\"Type\": \"object\", \"Name\": \"data\", \"Value\": null},\n    {\"Type\": \"boolean\", \"Name\": \"signRequest\", \"Value\": false},\n    {\"Type\": \"Dictionary`2\", \"Name\": \"headers\", \"Value\": null},\n    {\"Type\": \"string\", \"Name\": \"encoding\", \"Value\": \"utf-8\"},\n    {\"Type\": \"string\", \"Name\": \"contentType\", \"Value\": \"application/json\"}\n],\n\"ReturnValue\": {\"Type\": \"object\", \"VariableName\": \"%response%\"}}",
    "hash": "80bf67815639f99c84ebe4026ecdd5f5b09728701a6c46f208c51b2ae9710aab",
    "Created": "2023-09-29T22:27:54.2995619Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "if %response.status == \"complete\" then",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CheckResponseStatus\",\n\"StepDescription\": \"This step checks if the status of the response is 'complete'.\",\n\"Modules\": [\"PLang.Modules.ConditionalModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null,\n\"CachingHandler\": null,\n\"ExternalServiceHandler\": null}"
    },
    "answer": "{\"StepName\": \"CheckResponseStatus\",\n\"StepDescription\": \"This step checks if the status of the response is 'complete'.\",\n\"Modules\": [\"PLang.Modules.ConditionalModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": null,\n\"CachingHandler\": null,\n\"ExternalServiceHandler\": null}",
    "hash": "19fa8996d7deb9d981dece1935db5fdc54651e9153ef615d25608aab23263a98",
    "Created": "2023-09-29T22:27:59.0189797Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Act as a senior c# developer, that converts the user statement into a c# code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The code generated should have 1 method with the static method named Process and return bool. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\nStatement should return true\r\n\r\nThe code will not be modified after it's generated.\r\nALWAYS use long or long? instead of int or int?\r\nName: is CamelCase name of class\r\n\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\n\r\n\r\nBe Concise\n\nYou MUST respond in JSON, scheme:\r\n {\"Name\": string,\n\"Implementation\": string,\n\"Using\": string[],\n\"Assemblies\": string[]}",
      "question": "command: if %response.status == \"complete\" then",
      "assistant": "## functions available defined in csharp ##\r\n\r\n## functions available ends ##\nName cannot be: \n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"Name\": \"ResponseStatusCheck\",\n  \"Implementation\": \"public static bool Process(string responseαstatus) {\\n\\treturn responseαstatus == \\\"complete\\\";\\n}\",\n  \"Using\": [\"System\"],\n  \"Assemblies\": []\n}"
    },
    "answer": "{\n  \"Name\": \"ResponseStatusCheck\",\n  \"Implementation\": \"public static bool Process(string responseαstatus) {\\n\\treturn responseαstatus == \\\"complete\\\";\\n}\",\n  \"Using\": [\"System\"],\n  \"Assemblies\": []\n}",
    "hash": "64eced8293bbdd6bfcb26c50e935f9fa39f9b87b16d08ac46152e7a71c389afe",
    "Created": "2023-09-29T22:28:02.0817753Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\nATTN: User wants to use PLang.Modules.BlockchainModule\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[blockchain] Call `receiveMessage` on 0xa9fb1b3009dcb79e2fe346c16a604b8fa8ae0a79 with %event.receivingMessageBytes%,  %event.signature%.",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CallBlockchainReceiveMessage\",\n\"StepDescription\": \"Call the 'receiveMessage' function on the blockchain address 0xa9fb1b3009dcb79e2fe346c16a604b8fa8ae0a79 with the parameters %event.receivingMessageBytes% and %event.signature%.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 5000}}"
    },
    "answer": "{\"StepName\": \"CallBlockchainReceiveMessage\",\n\"StepDescription\": \"Call the 'receiveMessage' function on the blockchain address 0xa9fb1b3009dcb79e2fe346c16a604b8fa8ae0a79 with the parameters %event.receivingMessageBytes% and %event.signature%.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 5000}}",
    "hash": "e5a8353710a6665bca160f451d5cf5d8825205fe0a3f32e03aab18b419f19c37",
    "Created": "2023-09-29T22:28:09.9688124Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [blockchain] Call `receiveMessage` on 0xa9fb1b3009dcb79e2fe346c16a604b8fa8ae0a79 with %event.receivingMessageBytes%,  %event.signature%.",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddress, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject nameOfSmartContract(String contractAddress) \nObject totalSupplyOnSmartContract(String contractAddress) \nObject getMyBalanceOnSmartContract(String contractAddress) \nObject balanceOfOnSmartContract(String contractAddress, String addressToCheckBalanceOf) \nObject balanceOfBatchOnSmartContract(String contractAddress, String[] addresses, BigInteger[] ids) \nObject isApprovedForAllOnSmartContract(String contractAddress, String accountAddress, String operatorAddress) \nObject decimalsOnSmartContract(String contractAddress) \nObject allowanceFromSmartContract(String contractAddress, String from, String to, BigInteger value) \nObject symbolOnSmartContract(String contractAddress) \nObject supportsInterfaceOnSmartContract(String contractAddress, String interfaceId) \nObject getUriOnSmartContract(String contractAddress, BigInteger id) \nObject getApprovedOnSmartContract(String contractAddress) \nObject approveSmartContract(String contractAddress, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject mintSmartContract(String contractAddress, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject burnSmartContract(String contractAddress, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject transferSmartContract(String contractAddress, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject transferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject safeTransferFromErc721SmartContract(String contractAddress, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject safeTransferFromErc1155SmartContract(String contractAddress, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject safeBatchTransferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject setApprovalForAllOnSmartContract(String contractAddress, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddress, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddress, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString TransferErc20(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferErc20WaitForReceipt(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%event.receivingMessageBytes%, %event.signature%\r\n## defined variables ##\n# RPC servers available #\r\n[]\r\n# RPC servers available #\r\n# wallets with addresses #\r\n[]\r\n# wallets with addresses #\r\n# Tokens #\r\n[{\"symbol\":\"USDC\",\"name\":\"USDC Coin\",\"decimal\":8,\"contractAddress\":\"0x5425890298aed601595a70ab815c96711a31bc65\",\"chainId\":43113}]\r\n# Tokens #\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CallAndSignFunction\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0xa9fb1b3009dcb79e2fe346c16a604b8fa8ae0a79\"},\n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"receiveMessage\"},\n    {\"Type\": \"Object[]\", \"Name\": \"functionInputs\", \"Value\": [\"%event.receivingMessageBytes%\", \"%event.signature%\"]}\n]}"
    },
    "answer": "{\"FunctionName\": \"CallAndSignFunction\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0xa9fb1b3009dcb79e2fe346c16a604b8fa8ae0a79\"},\n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"receiveMessage\"},\n    {\"Type\": \"Object[]\", \"Name\": \"functionInputs\", \"Value\": [\"%event.receivingMessageBytes%\", \"%event.signature%\"]}\n]}",
    "hash": "ee3a40ef1f2b941b4a91bd77ec137ed9d9d0ebaa50feb3e4d7c0536854dc95aa",
    "Created": "2023-09-29T22:28:17.1705289Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "Listen for `MessageSent` even on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352, call !CheckStatus",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ListenMessageSentEvent\",\n\"StepDescription\": \"The step involves listening for a 'MessageSent' event on the address '0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352'. When this event is triggered, the function 'CheckStatus' is called.\",\n\"Modules\": [\"PLang.Modules.MessageModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": {\"GoalName\": \"CheckStatus\",\n\"Uri\": \"http://example.org/api/run.goal\",\n\"StartCssSelector\": \"\",\n\"EndCssSelector\": \"\"},\n\"CachingHandler\": {\"TimeInMilliseconds\": 0,\n\"CacheKey\": \"\",\n\"CachingType\": 0},\n\"ErrorHandler\": {\"IgnoreErrors\": false,\n\"Except\": []},\n\"RetryHandler\": {\"RetryCount\": 0,\n\"RetryDelayInMilliseconds\": 0}}"
    },
    "answer": "{\"StepName\": \"ListenMessageSentEvent\",\n\"StepDescription\": \"The step involves listening for a 'MessageSent' event on the address '0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352'. When this event is triggered, the function 'CheckStatus' is called.\",\n\"Modules\": [\"PLang.Modules.MessageModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ExternalServiceHandler\": {\"GoalName\": \"CheckStatus\",\n\"Uri\": \"http://example.org/api/run.goal\",\n\"StartCssSelector\": \"\",\n\"EndCssSelector\": \"\"},\n\"CachingHandler\": {\"TimeInMilliseconds\": 0,\n\"CacheKey\": \"\",\n\"CachingType\": 0},\n\"ErrorHandler\": {\"IgnoreErrors\": false,\n\"Except\": []},\n\"RetryHandler\": {\"RetryCount\": 0,\n\"RetryDelayInMilliseconds\": 0}}",
    "hash": "af608fdb5e7a5755f4354745517920fd94124269867388993d6bfe65c58023c7",
    "Created": "2023-09-29T22:29:06.8786841Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: Listen for `MessageSent` even on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352, call !CheckStatus",
      "assistant": "## functions available defined in csharp ##\r\nString GetPublicKey() \nvoid SetCurrentAccount(String publicKeyOrName) \nvoid Listen(String goalName, String variableName, Nullable`1? listenFromDateTime)  // goalName should be prefixed by ! and be whole word with possible dot(.). \nvoid SendPrivateMessageToMyself(String content) \nvoid SendPrivateMessage(String content, String npubReceiverPublicKey) \n\r\n## functions available ends ##\nFollowing Relay servers are available: [\"wss://relay.damus.io\",\"wss://nostr-pub.wellorder.net\",\"wss://offchain.pub\",\"wss://nos.lol\"].\r\nFollowing are Nostr accounts:[]\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"SetCurrentAccount\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"publicKeyOrName\",\n\"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"}]}\n\n{\"FunctionName\": \"Listen\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"goalName\",\n\"Value\": \"!CheckStatus\"},\n{\"Type\": \"String\",\n\"Name\": \"variableName\",\n\"Value\": \"MessageSent\"},\n{\"Type\": \"Nullable`1\",\n\"Name\": \"listenFromDateTime\",\n\"Value\": null}]}"
    },
    "answer": "{\"FunctionName\": \"SetCurrentAccount\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"publicKeyOrName\",\n\"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"}]}\n\n{\"FunctionName\": \"Listen\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"goalName\",\n\"Value\": \"!CheckStatus\"},\n{\"Type\": \"String\",\n\"Name\": \"variableName\",\n\"Value\": \"MessageSent\"},\n{\"Type\": \"Nullable`1\",\n\"Name\": \"listenFromDateTime\",\n\"Value\": null}]}",
    "hash": "538b3132fc75a35f60d1cc0d7f36605f44acf2d4d1adbf45b59dace9aead67ff",
    "Created": "2023-09-29T22:32:49.7013712Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Act as a senior c# developer, that converts the user statement into a c# code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The code generated should have 1 method with the static method named Process and return bool. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\nStatement should return true\r\n\r\nThe code will not be modified after it's generated.\r\nALWAYS use long or long? instead of int or int?\r\nName: is CamelCase name of class\r\n\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\n\r\n\r\nBe Concise\n\nYou MUST respond in JSON, scheme:\r\n {\"Name\": string,\n\"Implementation\": string,\n\"Using\": string[],\n\"Assemblies\": string[]}",
      "question": "command: if %response.status == \"complete\" then",
      "assistant": "## functions available defined in csharp ##\r\n\r\n## functions available ends ##\nName cannot be: ResponseStatusCheck\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"Name\": \"ResponseStatusCheck\",\n  \"Implementation\": \"public static bool Process(string responseαstatus) {\\n\\treturn responseαstatus == \\\"complete\\\";\\n}\",\n  \"Using\": [\"System\"],\n  \"Assemblies\": []\n}"
    },
    "answer": "{\n  \"Name\": \"ResponseStatusCheck\",\n  \"Implementation\": \"public static bool Process(string responseαstatus) {\\n\\treturn responseαstatus == \\\"complete\\\";\\n}\",\n  \"Using\": [\"System\"],\n  \"Assemblies\": []\n}",
    "hash": "9a361ea3ced21fc1ad44924875c6b1ccb5f988707e5f28d692aafa0ae1243e61",
    "Created": "2023-09-29T22:29:17.9256043Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [blockchain] Call `receiveMessage` on 0xa9fb1b3009dcb79e2fe346c16a604b8fa8ae0a79 with %event.receivingMessageBytes%,  %event.signature%.",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddress, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject nameOfSmartContract(String contractAddress) \nObject totalSupplyOnSmartContract(String contractAddress) \nObject getMyBalanceOnSmartContract(String contractAddress) \nObject balanceOfOnSmartContract(String contractAddress, String addressToCheckBalanceOf) \nObject balanceOfBatchOnSmartContract(String contractAddress, String[] addresses, BigInteger[] ids) \nObject isApprovedForAllOnSmartContract(String contractAddress, String accountAddress, String operatorAddress) \nObject decimalsOnSmartContract(String contractAddress) \nObject allowanceFromSmartContract(String contractAddress, String from, String to, BigInteger value) \nObject symbolOnSmartContract(String contractAddress) \nObject supportsInterfaceOnSmartContract(String contractAddress, String interfaceId) \nObject getUriOnSmartContract(String contractAddress, BigInteger id) \nObject getApprovedOnSmartContract(String contractAddress) \nObject approveSmartContract(String contractAddress, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject mintSmartContract(String contractAddress, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject burnSmartContract(String contractAddress, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject transferSmartContract(String contractAddress, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject transferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject safeTransferFromErc721SmartContract(String contractAddress, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject safeTransferFromErc1155SmartContract(String contractAddress, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject safeBatchTransferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject setApprovalForAllOnSmartContract(String contractAddress, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddress, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddress, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString TransferErc20(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferErc20WaitForReceipt(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%event.receivingMessageBytes%, %event.signature%\r\n## defined variables ##\n# RPC servers available #\r\n[]\r\n# RPC servers available #\r\n# wallets with addresses #\r\n[]\r\n# wallets with addresses #\r\n# Tokens #\r\n[{\"symbol\":\"USDC\",\"name\":\"USDC Coin\",\"decimal\":8,\"contractAddress\":\"0x9999f7fea5938fd3b1e26a12c3f2fb024e194f97\",\"chainId\":137}]\r\n# Tokens #\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CallAndSignFunction\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0xa9fb1b3009dcb79e2fe346c16a604b8fa8ae0a79\"},\n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"receiveMessage\"},\n    {\"Type\": \"Object[]\", \"Name\": \"functionInputs\", \"Value\": [\"%event.receivingMessageBytes%\", \"%event.signature%\"]}\n]}"
    },
    "answer": "{\"FunctionName\": \"CallAndSignFunction\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0xa9fb1b3009dcb79e2fe346c16a604b8fa8ae0a79\"},\n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"receiveMessage\"},\n    {\"Type\": \"Object[]\", \"Name\": \"functionInputs\", \"Value\": [\"%event.receivingMessageBytes%\", \"%event.signature%\"]}\n]}",
    "hash": "e87f96c47427eab1e23473478692a4a6f6371215832d96eac38b3f3c93c4b487",
    "Created": "2023-09-29T22:29:25.8449563Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "if %response.status != \"complete\" then",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CheckResponseStatus\",\n\"StepDescription\": \"This step checks if the status of the response is not equal to 'complete'.\",\n\"Modules\": [\"PLang.Modules.ConditionalModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 0,\n\"RetryDelayInMilliseconds\": 0}}"
    },
    "answer": "{\"StepName\": \"CheckResponseStatus\",\n\"StepDescription\": \"This step checks if the status of the response is not equal to 'complete'.\",\n\"Modules\": [\"PLang.Modules.ConditionalModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 0,\n\"RetryDelayInMilliseconds\": 0}}",
    "hash": "8a9572af75248f0bd6744b9717b2930fe62252b8d7f16e9e7b55ba681617fa10",
    "Created": "2023-09-29T22:29:30.7204653Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Act as a senior c# developer, that converts the user statement into a c# code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The code generated should have 1 method with the static method named Process and return bool. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\nStatement should return true\r\n\r\nThe code will not be modified after it's generated.\r\nALWAYS use long or long? instead of int or int?\r\nName: is CamelCase name of class\r\n\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\n\r\n\r\nBe Concise\n\nYou MUST respond in JSON, scheme:\r\n {\"Name\": string,\n\"Implementation\": string,\n\"Using\": string[],\n\"Assemblies\": string[]}",
      "question": "command: if %response.status != \"complete\" then",
      "assistant": "## functions available defined in csharp ##\r\n\r\n## functions available ends ##\nName cannot be: ResponseStatusCheck\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"Name\": \"ResponseStatusCheck\",\n  \"Implementation\": \"public static bool Process(string responseαstatus) {\\n\\treturn responseαstatus != \\\"complete\\\" ? false : true;\\n}\",\n  \"Using\": [\"System\"],\n  \"Assemblies\": []\n}"
    },
    "answer": "{\n  \"Name\": \"ResponseStatusCheck\",\n  \"Implementation\": \"public static bool Process(string responseαstatus) {\\n\\treturn responseαstatus != \\\"complete\\\" ? false : true;\\n}\",\n  \"Using\": [\"System\"],\n  \"Assemblies\": []\n}",
    "hash": "358eb8058b1a982f1c4418887083408ef0ffdad2fadcefc8105c4149eedf3f4b",
    "Created": "2023-09-29T22:29:35.1219603Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "sleep for 5 sec",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"SleepFor5Sec\",\n\"StepDescription\": \"The function will pause its execution for a duration of 5 seconds.\",\n\"Modules\": [\"PLang.Modules.ScheduleModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"SleepFor5Sec\",\n\"StepDescription\": \"The function will pause its execution for a duration of 5 seconds.\",\n\"Modules\": [\"PLang.Modules.ScheduleModule\"],\n\"WaitForExecution\": true}",
    "hash": "b79acca15562edbdb1385a5c88240f2d29ad3106b347470410b0940b964688fb",
    "Created": "2023-09-29T22:29:38.2351613Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: sleep for 5 sec",
      "assistant": "## functions available defined in csharp ##\r\nvoid Sleep(Int32 sleepTimeInMilliseconds) \nvoid Schedule(String cronCommand, String goalName, Nullable`1? nextRun)  // goalName should be prefixed by ! and be whole word with possible dot(.). \nStart(ISettings settings, IEngine engine, PrParser prParser, ILogger logger, IPseudoRuntime pseudoRuntime, IPLangFileSystem fileSystem) \nvoid RunScheduledTasks(ISettings settings, IEngine engine, PrParser prParser, ILogger logger, IPseudoRuntime pseudoRuntime, IPLangFileSystem fileSystem) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Sleep\",\n\"Parameters\": [{\"Type\": \"Int32\",\n\"Name\": \"sleepTimeInMilliseconds\",\n\"Value\": 5000}],\n\"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"Sleep\",\n\"Parameters\": [{\"Type\": \"Int32\",\n\"Name\": \"sleepTimeInMilliseconds\",\n\"Value\": 5000}],\n\"ReturnValue\": null}",
    "hash": "4f1c1e226c704036c074dd74c95e5e5f20a8f0acaf57225c2108273e721f1513",
    "Created": "2023-09-29T22:29:41.1689909Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "Call !CheckStatus",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CallCheckStatus\",\n\"StepDescription\": \"This step involves calling the function 'CheckStatus'.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CallCheckStatus\",\n\"StepDescription\": \"This step involves calling the function 'CheckStatus'.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "4b7189d3070e0902b5e56a2a278e76f48626d9d4a8bc0ff475f799064c1ef90a",
    "Created": "2023-09-29T22:29:44.5863414Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "\r\n Parse user command, to match the parameters needed for the RunGoal function\r\n\r\nVariables are defined with starting and ending %\r\n\r\nGoalName should be prefixed with !\r\nParameters are optional, they are key value of a variable, if user does not define key, then it is same as value.\r\n\r\n== Examples starts ==\r\n!ParseText then ParseText is goalName, no parameters\r\n!Gmail.Search %query%, then Gmail.Search is goalName,  %query% is key and value in parameters\r\nFolder.Search q=%fileName%, then key is q, and value is %fileName%\r\n== Examples ends ==\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: Call !CheckStatus",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunGoal(String goalName, Dictionary`2? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 0) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"CheckStatus\"\n    },\n    {\n      \"Type\": \"Dictionary`2\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}"
    },
    "answer": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"CheckStatus\"\n    },\n    {\n      \"Type\": \"Dictionary`2\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}",
    "hash": "ab08fd74f30ab03ba9f101b4a3768584473b51895366bc040cb7a354d403a3e2",
    "Created": "2023-09-29T22:29:49.2833672Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\nATTN: User wants to use PLang.Modules.BlockchainModule\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[blockchain] list `MessageSent` event on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352, call !CheckStatus",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ListBlockchainEvent\",\n\"StepDescription\": \"List the 'MessageSent' event on the blockchain address 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 and call the function CheckStatus.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 5000}}"
    },
    "answer": "{\"StepName\": \"ListBlockchainEvent\",\n\"StepDescription\": \"List the 'MessageSent' event on the blockchain address 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 and call the function CheckStatus.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 5000}}",
    "hash": "1b44c626370b8087c1b11459eb1a04aada5309b745eea40118a4904098b97eb3",
    "Created": "2023-09-29T22:36:15.9876803Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [blockchain] list `MessageSent` event on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352, call !CheckStatus",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddress, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject nameOfSmartContract(String contractAddress) \nObject totalSupplyOnSmartContract(String contractAddress) \nObject getMyBalanceOnSmartContract(String contractAddress) \nObject balanceOfOnSmartContract(String contractAddress, String addressToCheckBalanceOf) \nObject balanceOfBatchOnSmartContract(String contractAddress, String[] addresses, BigInteger[] ids) \nObject isApprovedForAllOnSmartContract(String contractAddress, String accountAddress, String operatorAddress) \nObject decimalsOnSmartContract(String contractAddress) \nObject allowanceFromSmartContract(String contractAddress, String from, String to, BigInteger value) \nObject symbolOnSmartContract(String contractAddress) \nObject supportsInterfaceOnSmartContract(String contractAddress, String interfaceId) \nObject getUriOnSmartContract(String contractAddress, BigInteger id) \nObject getApprovedOnSmartContract(String contractAddress) \nObject approveSmartContract(String contractAddress, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject mintSmartContract(String contractAddress, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject burnSmartContract(String contractAddress, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject transferSmartContract(String contractAddress, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject transferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject safeTransferFromErc721SmartContract(String contractAddress, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject safeTransferFromErc1155SmartContract(String contractAddress, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject safeBatchTransferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject setApprovalForAllOnSmartContract(String contractAddress, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddress, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddress, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString TransferErc20(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferErc20WaitForReceipt(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\n# RPC servers available #\r\n[]\r\n# RPC servers available #\r\n# wallets with addresses #\r\n[]\r\n# wallets with addresses #\r\n# Tokens #\r\n[{\"symbol\":\"USDC\",\"name\":\"USDC Coin\",\"decimal\":8,\"contractAddress\":\"0x9999f7fea5938fd3b1e26a12c3f2fb024e194f97\",\"chainId\":137}]\r\n# Tokens #\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ListenToEventOnSmartContract\", \n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"}, \n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"MessageSent\"}, \n    {\"Type\": \"String\", \"Name\": \"goalToCall\", \"Value\": \"!CheckStatus\"}\n]}"
    },
    "answer": "{\"FunctionName\": \"ListenToEventOnSmartContract\", \n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"}, \n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"MessageSent\"}, \n    {\"Type\": \"String\", \"Name\": \"goalToCall\", \"Value\": \"!CheckStatus\"}\n]}",
    "hash": "2f15b6276ee458b2027954951dfb7b74d517028363049f91ded5f472c59af84e",
    "Created": "2023-09-29T22:36:23.0909551Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\nATTN: User wants to use PLang.Modules.BlockchainModule\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[blockchain] list `MessageSent` event on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\n    abi: [{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"}]\n    call !CheckStatus",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ListMessageSentEvent\",\n\"StepDescription\": \"List the 'MessageSent' event on the blockchain address 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 using the provided ABI. Then call the CheckStatus function.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 5000}}"
    },
    "answer": "{\"StepName\": \"ListMessageSentEvent\",\n\"StepDescription\": \"List the 'MessageSent' event on the blockchain address 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 using the provided ABI. Then call the CheckStatus function.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 5000}}",
    "hash": "e9ac0ae59a5b4c24e1dbb85209993a80dea2f0fd3b352ce7556fdd9ab1982cbd",
    "Created": "2023-09-29T22:39:49.1153889Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [blockchain] list `MessageSent` event on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\n    abi: [{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"}]\n    call !CheckStatus",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddress, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject nameOfSmartContract(String contractAddress) \nObject totalSupplyOnSmartContract(String contractAddress) \nObject getMyBalanceOnSmartContract(String contractAddress) \nObject balanceOfOnSmartContract(String contractAddress, String addressToCheckBalanceOf) \nObject balanceOfBatchOnSmartContract(String contractAddress, String[] addresses, BigInteger[] ids) \nObject isApprovedForAllOnSmartContract(String contractAddress, String accountAddress, String operatorAddress) \nObject decimalsOnSmartContract(String contractAddress) \nObject allowanceFromSmartContract(String contractAddress, String from, String to, BigInteger value) \nObject symbolOnSmartContract(String contractAddress) \nObject supportsInterfaceOnSmartContract(String contractAddress, String interfaceId) \nObject getUriOnSmartContract(String contractAddress, BigInteger id) \nObject getApprovedOnSmartContract(String contractAddress) \nObject approveSmartContract(String contractAddress, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject mintSmartContract(String contractAddress, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject burnSmartContract(String contractAddress, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject transferSmartContract(String contractAddress, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject transferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject safeTransferFromErc721SmartContract(String contractAddress, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject safeTransferFromErc1155SmartContract(String contractAddress, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject safeBatchTransferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject setApprovalForAllOnSmartContract(String contractAddress, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddress, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddress, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString TransferErc20(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferErc20WaitForReceipt(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\n# RPC servers available #\r\n[]\r\n# RPC servers available #\r\n# wallets with addresses #\r\n[]\r\n# wallets with addresses #\r\n# Tokens #\r\n[{\"symbol\":\"USDC\",\"name\":\"USDC Coin\",\"decimal\":8,\"contractAddress\":\"0x9999f7fea5938fd3b1e26a12c3f2fb024e194f97\",\"chainId\":137}]\r\n# Tokens #\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ListenToEventOnSmartContract\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"[{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"message\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"MessageSent\\\",\\\"type\\\":\\\"event\\\"}]\"},\n    {\"Type\": \"String\", \"Name\": \"goalToCall\", \"Value\": \"!CheckStatus\"}\n]}"
    },
    "answer": "{\"FunctionName\": \"ListenToEventOnSmartContract\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"[{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"message\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"MessageSent\\\",\\\"type\\\":\\\"event\\\"}]\"},\n    {\"Type\": \"String\", \"Name\": \"goalToCall\", \"Value\": \"!CheckStatus\"}\n]}",
    "hash": "94b7538234c37cd0cb08a211ec4f87dd33cc624b15325578dc5969da2aca7648",
    "Created": "2023-09-29T22:39:55.9248679Z"
  },
  {
    "question": {
      "type": "ErrorInfo",
      "system": "I am getting this error, can you give me user friendly error message and suggestion on how to fix it. Be Concise.You should respond in JSON, scheme {userFriendlyMessage:string, howToFix:string}",
      "question": "System.IO.IOException: The process cannot access the file 'C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLangExamples\\apps\\CrossChainUsdc\\.build\\cache\\questions.json' because it is being used by another process.\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\r\n   at System.IO.File.OpenHandle(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.File.WriteToFile(String path, FileMode mode, String contents, Encoding encoding)\r\n   at System.IO.Abstractions.FileWrapper.WriteAllText(String path, String contents)\r\n   at PLang.SafeFileSystem.PLangFile.WriteAllText(String path, String contents) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\SafeFileSystem\\PLangFile.cs:line 535\r\n   at PLang.Utils.CacheHelper.SetCachedQuestion(LlmQuestion question, String answer) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Utils\\CacheHelper.cs:line 79\r\n   at PLang.Services.LlmService.OpenAIService.Query(LlmQuestion question, Type responseType) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Services\\LlmService\\OpenAIService.cs:line 95\r\n   at PLang.Modules.BaseBuilder.Build(GoalStep step, Type responseType) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 67\r\n   at PLang.Modules.BaseBuilder.Build(GoalStep step) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Modules\\BaseBuilder.cs:line 57\r\n   at PLang.Building.InstructionBuilder.BuildInstruction(StepBuilder stepBuilder, Goal goal, GoalStep step, String module, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\InstructionBuilder.cs:line 52\r\n   at PLang.Building.StepBuilder.BuildStep(Goal goal, Int32 stepIndex, List`1 excludeModules, Int32 errorCount) in C:\\Users\\Ingi Gauti\\source\\repos\\ingig\\PLang\\Building\\StepBuilder.cs:line 106",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"userFriendlyMessage\": \"The file 'questions.json' cannot be accessed because it is being used by another process.\",\n\"howToFix\": \"Please close any other programs or processes that might be using the file 'questions.json' and try again. If the problem persists, you may need to restart your computer to ensure that the file is not being used.\"\n}"
    },
    "answer": "{\n\"userFriendlyMessage\": \"The file 'questions.json' cannot be accessed because it is being used by another process.\",\n\"howToFix\": \"Please close any other programs or processes that might be using the file 'questions.json' and try again. If the problem persists, you may need to restart your computer to ensure that the file is not being used.\"\n}",
    "hash": "7215dcc48f2df9446b022a070006f67f52a54c7b7be09aac8c9777aac4b92b23",
    "Created": "2023-09-29T22:40:01.480728Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\nATTN: User wants to use PLang.Modules.BlockchainModule\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[blockchain] Execute `depositForBurn` on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352.\n    abi: [{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"name\":\"mintRecipient\",\"type\":\"bytes32\"},{\"name\":\"burnToken\",\"type\":\"address\"}],\"name\":\"depositForBurn\",\"outputs\":[{\"name\":\"_nonce\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    Params: %amount%, 1, %destinationAddress%, 0x5425890298aed601595a70ab815c96711a31bc65",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"StepName\": \"ExecuteDepositForBurn\",\n\"StepDescription\": \"Execute the 'depositForBurn' function on the blockchain contract at address 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352. The function takes four parameters: amount, destinationDomain, mintRecipient, and burnToken. The values for these parameters are %amount%, 1, %destinationAddress%, and 0x5425890298aed601595a70ab815c96711a31bc65 respectively.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 5000}\n}"
    },
    "answer": "{\n\"StepName\": \"ExecuteDepositForBurn\",\n\"StepDescription\": \"Execute the 'depositForBurn' function on the blockchain contract at address 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352. The function takes four parameters: amount, destinationDomain, mintRecipient, and burnToken. The values for these parameters are %amount%, 1, %destinationAddress%, and 0x5425890298aed601595a70ab815c96711a31bc65 respectively.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false},\n\"RetryHandler\": {\"RetryCount\": 3, \"RetryDelayInMilliseconds\": 5000}\n}",
    "hash": "62e4f8656f9b188432dd3d382b1c91d7508ccc7338d04de51af9ab5c003f941f",
    "Created": "2023-09-29T22:41:09.4502585Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [blockchain] Execute `depositForBurn` on 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352.\n    abi: [{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"name\":\"mintRecipient\",\"type\":\"bytes32\"},{\"name\":\"burnToken\",\"type\":\"address\"}],\"name\":\"depositForBurn\",\"outputs\":[{\"name\":\"_nonce\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    Params: %amount%, 1, %destinationAddress%, 0x5425890298aed601595a70ab815c96711a31bc65",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddress, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject nameOfSmartContract(String contractAddress) \nObject totalSupplyOnSmartContract(String contractAddress) \nObject getMyBalanceOnSmartContract(String contractAddress) \nObject balanceOfOnSmartContract(String contractAddress, String addressToCheckBalanceOf) \nObject balanceOfBatchOnSmartContract(String contractAddress, String[] addresses, BigInteger[] ids) \nObject isApprovedForAllOnSmartContract(String contractAddress, String accountAddress, String operatorAddress) \nObject decimalsOnSmartContract(String contractAddress) \nObject allowanceFromSmartContract(String contractAddress, String from, String to, BigInteger value) \nObject symbolOnSmartContract(String contractAddress) \nObject supportsInterfaceOnSmartContract(String contractAddress, String interfaceId) \nObject getUriOnSmartContract(String contractAddress, BigInteger id) \nObject getApprovedOnSmartContract(String contractAddress) \nObject approveSmartContract(String contractAddress, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject mintSmartContract(String contractAddress, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject burnSmartContract(String contractAddress, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject transferSmartContract(String contractAddress, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject transferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject safeTransferFromErc721SmartContract(String contractAddress, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject safeTransferFromErc1155SmartContract(String contractAddress, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject safeBatchTransferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject setApprovalForAllOnSmartContract(String contractAddress, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddress, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddress, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString TransferErc20(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferErc20WaitForReceipt(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%amount%, %destinationAddress%\r\n## defined variables ##\n# RPC servers available #\r\n[]\r\n# RPC servers available #\r\n# wallets with addresses #\r\n[]\r\n# wallets with addresses #\r\n# Tokens #\r\n[{\"symbol\":\"USDC\",\"name\":\"USDC Coin\",\"decimal\":8,\"contractAddress\":\"0x9999f7fea5938fd3b1e26a12c3f2fb024e194f97\",\"chainId\":137}]\r\n# Tokens #\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CallAndSignFunction\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"destinationDomain\\\",\\\"type\\\":\\\"uint32\\\"},{\\\"name\\\":\\\"mintRecipient\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"name\\\":\\\"burnToken\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"depositForBurn\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"_nonce\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}]\"},\n    {\"Type\": \"Object[]\", \"Name\": \"functionInputs\", \"Value\": [\"%amount%\", 1, \"%destinationAddress%\", \"0x5425890298aed601595a70ab815c96711a31bc65\"]}\n]}"
    },
    "answer": "{\"FunctionName\": \"CallAndSignFunction\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"String\", \"Name\": \"abi\", \"Value\": \"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"destinationDomain\\\",\\\"type\\\":\\\"uint32\\\"},{\\\"name\\\":\\\"mintRecipient\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"name\\\":\\\"burnToken\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"depositForBurn\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"_nonce\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}]\"},\n    {\"Type\": \"Object[]\", \"Name\": \"functionInputs\", \"Value\": [\"%amount%\", 1, \"%destinationAddress%\", \"0x5425890298aed601595a70ab815c96711a31bc65\"]}\n]}",
    "hash": "ba0ac2a984fb4419d616dcb4193f0a4d9a1ea3f52362445e603463930a2419c0",
    "Created": "2023-09-29T22:41:25.310561Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\nATTN: User wants to use PLang.Modules.BlockchainModule\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[blockchain] Call `approve` on 0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63.\n    Params: 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352, %amount%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ApproveBlockchainTransaction\",\n\"StepDescription\": \"Call the 'approve' function on the blockchain address 0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63 with parameters: 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 and the variable %amount%\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"ApproveBlockchainTransaction\",\n\"StepDescription\": \"Call the 'approve' function on the blockchain address 0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63 with parameters: 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 and the variable %amount%\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true}",
    "hash": "62643432d8e30bed46f89171d52a58483234aec73a42234129edcc399b072d76",
    "Created": "2023-09-29T22:42:43.1510927Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [blockchain] Call `approve` on 0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63.\n    Params: 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352, %amount%",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddress, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject nameOfSmartContract(String contractAddress) \nObject totalSupplyOnSmartContract(String contractAddress) \nObject getMyBalanceOnSmartContract(String contractAddress) \nObject balanceOfOnSmartContract(String contractAddress, String addressToCheckBalanceOf) \nObject balanceOfBatchOnSmartContract(String contractAddress, String[] addresses, BigInteger[] ids) \nObject isApprovedForAllOnSmartContract(String contractAddress, String accountAddress, String operatorAddress) \nObject decimalsOnSmartContract(String contractAddress) \nObject allowanceFromSmartContract(String contractAddress, String from, String to, BigInteger value) \nObject symbolOnSmartContract(String contractAddress) \nObject supportsInterfaceOnSmartContract(String contractAddress, String interfaceId) \nObject getUriOnSmartContract(String contractAddress, BigInteger id) \nObject getApprovedOnSmartContract(String contractAddress) \nObject approveSmartContract(String contractAddress, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject mintSmartContract(String contractAddress, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject burnSmartContract(String contractAddress, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject transferSmartContract(String contractAddress, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject transferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject safeTransferFromErc721SmartContract(String contractAddress, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject safeTransferFromErc1155SmartContract(String contractAddress, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject safeBatchTransferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject setApprovalForAllOnSmartContract(String contractAddress, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddress, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddress, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString TransferErc20(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferErc20WaitForReceipt(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%amount%\r\n## defined variables ##\n# RPC servers available #\r\n[]\r\n# RPC servers available #\r\n# wallets with addresses #\r\n[]\r\n# wallets with addresses #\r\n# Tokens #\r\n[{\"symbol\":\"USDC\",\"name\":\"USDC Coin\",\"decimal\":8,\"contractAddress\":\"0x9999f7fea5938fd3b1e26a12c3f2fb024e194f97\",\"chainId\":137}]\r\n# Tokens #\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"approveSmartContract\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63\"},\n    {\"Type\": \"String\", \"Name\": \"spender\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"BigInteger\", \"Name\": \"value\", \"Value\": \"%amount%\"}\n],\n\"ReturnValue\": {\"Type\": \"Object\", \"VariableName\": \"approveResult\"}}"
    },
    "answer": "{\"FunctionName\": \"approveSmartContract\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63\"},\n    {\"Type\": \"String\", \"Name\": \"spender\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"BigInteger\", \"Name\": \"value\", \"Value\": \"%amount%\"}\n],\n\"ReturnValue\": {\"Type\": \"Object\", \"VariableName\": \"approveResult\"}}",
    "hash": "2f37131feae4423b82ec76407e08dab07ef2d469af69914bc64a39c7a23d73b5",
    "Created": "2023-09-29T22:42:52.9843133Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : @GoalName / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\nATTN: User wants to use PLang.Modules.BlockchainModule\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\"?: string,\n\"StepDescription\"?: string,\n\"Modules\"?: string[],\n\"WaitForExecution\": boolean,\n\"ExternalServiceHandler\": {\"GoalName\": string,\n\"Uri\": string,\n\"StartCssSelector\": string,\n\"EndCssSelector\": string},\n\"CachingHandler\": {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\": {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\": {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[blockchain] Call `approve` on %fromAddress%.\n    Params: 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352, %amount%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.ReturnModule\", \"description\": \"Return true, return false, return. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ApproveBlockchainTransaction\",\n\"StepDescription\": \"Call the 'approve' function on the blockchain from the address specified in the variable %fromAddress%. The parameters for this function are 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 and the amount specified in the variable %amount%.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"ApproveBlockchainTransaction\",\n\"StepDescription\": \"Call the 'approve' function on the blockchain from the address specified in the variable %fromAddress%. The parameters for this function are 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352 and the amount specified in the variable %amount%.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true}",
    "hash": "b4ded637ae2e67323574913533eda98e899742b336a667fb80f8774332f1ef36",
    "Created": "2023-09-29T22:53:38.5697518Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BaseBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [blockchain] Call `approve` on %fromAddress%.\n    Params: 0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352, %amount%",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddress, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddress, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject nameOfSmartContract(String contractAddress) \nObject totalSupplyOnSmartContract(String contractAddress) \nObject getMyBalanceOnSmartContract(String contractAddress) \nObject balanceOfOnSmartContract(String contractAddress, String addressToCheckBalanceOf) \nObject balanceOfBatchOnSmartContract(String contractAddress, String[] addresses, BigInteger[] ids) \nObject isApprovedForAllOnSmartContract(String contractAddress, String accountAddress, String operatorAddress) \nObject decimalsOnSmartContract(String contractAddress) \nObject allowanceFromSmartContract(String contractAddress, String from, String to, BigInteger value) \nObject symbolOnSmartContract(String contractAddress) \nObject supportsInterfaceOnSmartContract(String contractAddress, String interfaceId) \nObject getUriOnSmartContract(String contractAddress, BigInteger id) \nObject getApprovedOnSmartContract(String contractAddress) \nObject approveSmartContract(String contractAddress, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject mintSmartContract(String contractAddress, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject burnSmartContract(String contractAddress, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject transferSmartContract(String contractAddress, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject transferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject safeTransferFromErc721SmartContract(String contractAddress, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject safeTransferFromErc1155SmartContract(String contractAddress, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject safeBatchTransferFromSmartContract(String contractAddress, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject setApprovalForAllOnSmartContract(String contractAddress, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddress, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddress, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString TransferErc20(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nTransactionReceipt TransferErc20WaitForReceipt(String contractAddress, String to, Decimal amount, Nullable`1? gasPriceWei, Nullable`1? gas, Nullable`1? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\r\n## defined variables ##\r\n\t\t\t\t%fromAddress%, %amount%\r\n## defined variables ##\n# RPC servers available #\r\n[]\r\n# RPC servers available #\r\n# wallets with addresses #\r\n[]\r\n# wallets with addresses #\r\n# Tokens #\r\n[{\"symbol\":\"USDC\",\"name\":\"USDC Coin\",\"decimal\":8,\"contractAddress\":\"0x9999f7fea5938fd3b1e26a12c3f2fb024e194f97\",\"chainId\":137}]\r\n# Tokens #\r\n\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"approveSmartContract\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"%fromAddress%\"},\n    {\"Type\": \"String\", \"Name\": \"spender\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"BigInteger\", \"Name\": \"value\", \"Value\": \"%amount%\"}\n],\n\"ReturnValue\": {\"Type\": \"Object\", \"VariableName\": \"approveResult\"}}"
    },
    "answer": "{\"FunctionName\": \"approveSmartContract\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddress\", \"Value\": \"%fromAddress%\"},\n    {\"Type\": \"String\", \"Name\": \"spender\", \"Value\": \"0x12dcfd3fe2e9eac2859fd1ed86d2ab8c5a2f9352\"},\n    {\"Type\": \"BigInteger\", \"Name\": \"value\", \"Value\": \"%amount%\"}\n],\n\"ReturnValue\": {\"Type\": \"Object\", \"VariableName\": \"approveResult\"}}",
    "hash": "9857da4d411d822577ea693da82654591a7c2dd1195e245acd5a0ff9e081a174",
    "Created": "2023-09-29T22:53:46.9299198Z"
  }
]